/*
Resorder使用的 ogg格式解码编码器
https://github.com/xiangyuecn/Recorder

由此源码改动而来 （2023-09-25 大幅精简代码，移除了未调用的函数，但asm里面的代码未做任何精简，原因是精简了200kb的asm代码后需经过大量测试才能偶尔发现精简错误）
ogg-vorbis-encoder-js 这个版本的代码
https://github.com/higuma/ogg-vorbis-encoder-js/blob/7a872423f416e330e925f5266d2eb66cff63c1b6/lib/OggVorbisEncoder.js
*/
(function(factory){
	var browser=typeof window=="object" && !!window.document;
	var win=browser?window:Object; //非浏览器环境，Recorder挂载在Object下面
	var rec=win.Recorder;
	factory(rec);
}(function(Recorder){ //需要在Worker中运行，不能使用Recorder里的方法，包括$T
"use strict";

function Create(){

var Module={};
//精简

var Runtime = {
  //精简
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret; return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  GLOBAL_BASE: 8
  //精简
}


Module['Runtime'] = Runtime;
var ABORT = false;
//精简

function assert(condition, text) {
  if (!condition) {
    abort("Assertion failed: " + text)
  }
}

//精简
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    if(allocator!=ALLOC_STATIC)abort("fix !ALLOC_STATIC");//精简
    ret = Runtime.staticAlloc(Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  abort("fix allocate")
}
Module['allocate'] = allocate;

//精简

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function enlargeMemory() {
  abort('enlargeMemory');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  abort('fix t!==T')
}
//精简
var buffer;
buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'fix !LE');
Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

//精简

if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

//精简

STATIC_BASE = 8;
STATICTOP = STATIC_BASE + 553552;

//精简 负优化
Module.b64Zip="";
Module.b64Dic={"size":448462,"bits":8,"b0":157,"bs":[[157],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9],[0,0,0],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],[194,0,0],[192,121,196,0,192,121,196,0,192,121,196,0,192,121,196],[121,196,0,192,121,196,0,192,121,196,0,192,121,196,0],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16],[0,192,121,196,0,192,121,196,0,192,121,196,0,192,121],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],[196,0,192,121,196,0,192,121,196,0,192,121,196,0,192],[2,0,0,0],[0,0,2,0,0,0],[255,255,255],[4,0,0,0,0,0,0,0],[4,0,0,0],[12,12,12,12,12,12],[9,9,9,9,9,9],[1,0,0,0,0,0],[3,0,0,0],[3,0,0,0,0,0,0,0],[7,0,0,0],[10,10,10,10,10,10,10],[6,0,0,0],[5,0,0,0],[9,0,0,0,2,0,0,0,10,0,0,0,1,0,0],[0,11,0,0,0,0,0,0,0,12,0,0,0,0,0],[0,48,224,0,0,16,96,3,0,0,0,0,0,0,0],[2,0,1,0,0,0,0],[8,8,8,8],[226,255,255,255,226,255,255,255,226,255,255,255],[8,0,0,0],[194,0,192,121,196,0,192,121,196,0,192,121,196,0,192],[11,11,11,11],[0,2,0,0,0],[0,1,0,0,0],[11,11,12,12],[1,0,0,0],[11,12,12],[10,10,11,11],[12,12,11,12,12,12,12],[9,9,9,9],[0,16,224,0,0,16,96,2,0,0,0,0,0,0,0],[12,12,12],[9,9,10,10],[12,12,13,13],[10,10,10,10],[12,13,13],[9,10,10],[7,7,8,8],[15,15,15],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],[10,11,11],[8,8,8,8,8,8,8,8,8,8],[8,8,9,9],[10,0,0,0],[0,0,4,0,0,0],[246,255,255,255,246,255,255,255,246,255,255,255],[236,255,255,255,236,255,255,255,236,255,255,255],[4,0,1,0,0,0,0],[0,0,1,0,0,0],[13,0,0,0,2,0,0,0,14,0,0,0,1,0,0],[0,15,0,0,0,0,0,0,0,16,0,0,0,0,0],[18,0,0,0],[9,0,0,0,0,0,0],[64,0,0,0,0,0],[7,7,7,7],[13,13,13,13,13,13,13],[0,0,5,0,0,0],[13,14,14],[8,9,9],[13,13,12,12],[96,4,0,0,0,0,0,0,0],[13,0,0,0,0,0,0,0],[220,194,0,192,121,196,0,192,121,196,0,192,121,196,0],[226,255,255,255,230,255,255,255,234,255,255,255,236,255,255],[13,12,13,13],[13,13,13],[7,0,1,0,0,0,0],[241,255,255,255,241,255,255,255,241,255,255,255],[240,255,255,255,240,255,255,255,240,255,255,255],[14,14,14],[15,14,14],[10,10,0,0,0,0,0,0],[3,0,1,0,0,0,0,0],[14,15,15],[12,0,0,0],[15,16,16],[12,13,12],[0,80,224,0,0,16,96,4,0,0,0,0,0,0,0],[19,0,0,0],[13,13,12,13,13,13,13],[14,0,0,0,0,0,0,0],[12,11,12,12,12,12],[7,8,8],[12,12,0,0,0],[13,13,11,12,12,12,12,12,12,12],[6,0,1,0,0,0,0],[9,11,11],[0,12,12],[0,84,224,0,0,16,96,4,0,0,0,0,0,0,0],[17,15,15],[14,14,13,13],[16,16,0],[14,14,12,12],[10,10,10],[13,13,0,0,0,0,0],[0,158,224,0,0,84,96,4,0,0,0,0,0,0,0],[6,6,0,0,0,0,0,0,0],[13,12,12,12],[11,0,0,0],[7,9,9],[96,2,0,0,0,0,0,0,0],[11,11,10,11,11],[12,12,10,11,11],[8,8,0,0,0,0,0,0],[6,8,8],[246,255,255,255],[20,0,0,0],[8,10,10],[17,17,0],[224,0,0,16,96,5,0,0,0,0,0,0,0],[16,15,15],[9,9,0,0,0,0,0,0],[17,0,0,0],[11,11,11],[9,0,0,0],[7,8,8,8,8],[9,10,11],[14,0,0,0,9,0,0,0,15,0,0,0,8,0,0],[21,0,0,0,2,0,0,0,22,0,0,0,1,0,0],[0,23,0,0,0,0,0,0,0,24,0,0,0,0,0],[0,13,13],[11,13,13],[7,7,0,0,0,0,0,0],[12,12,11,11],[81,0,0,0],[0,8,0,0,0],[10,12,12],[5,5,7,7],[14,15,14],[0,112,224,0,0,16,96,5,0,0,0,0,0,0,0],[16,16,16],[10,10,12,12],[15,12,13,13,15],[15,15,14,14],[12,10,10],[17,17,17],[8,8,10,10],[232,255,255,255,232,255,255,255,232,255,255,255],[10,11,10],[0,11,11],[0,0,198,66,0,0,198,66,0,0,198,66,0,0,198],[0,0,48,224,0,0,16,96,3,0,0,0,0,0,0],[11,10,11,11],[13,0,0,0],[17,14,15,15],[12,11,11],[16,16,17],[14,14,12,13,13],[5,5,6,6],[236,255,255,255,242,255,255,255,246,255,255,255],[7,7,7,8,8],[15,16,15],[15,15,13,13],[12,0,0,0,0,0,0,0],[5,7,7],[4,4,6,6,7,7],[16,14,14],[12,12,13,12],[250,255,255,255,250,255,255,255],[10,12,11],[6,6,7,7],[15,14,15,15],[11,12,11],[8,9,9,9,9],[13,13,14],[15,15,12,12],[15,15,0],[0,198,66,0,0,198,66,0,0,198,66,0,0,198,66],[198,66,0,0,198,66,0,0,198,66,0,0,198,66,0],[66,0,0,198,66,0,0,198,66,0,0,198,66,0,0],[0,8,8,0],[0,8,8,8,8,9,9,9,9,10,10,11,11],[13,12,12,13],[12,12,11,12],[13,14,13],[10,9,10,10],[16,13,14,14],[9,8,9,9],[11,0,0,0,0,0,0,0],[9,11,10],[14,14,15],[16,0,0,0],[13,13,12,13,12,13],[216,255,255,255,216,255,255,255,216,255,255,255,216,255,255],[11,12,13],[15,13,13],[0,14,14],[11,11,0,0,0,0,0,0,0],[5,5,0,0,0,0,0,0,0],[16,17,17],[13,13,10],[9,9,11,11],[9,9,9,10,10],[248,255,255,255,248,255,255,255],[10,11,12],[12,11,12,12],[230,255,255,255,230,255,255,255,230,255,255,255,230,255,255],[0,118,224,0,0,118,96,2,0,0,0,0,0,0,0],[14,12,12],[48,224,0,0,16,96,3,0,0,0,0,0,0,0],[0,10,10],[15,0,0,0],[8,7,8,8,8,8,8,8,8,8,8,8],[9,9,0,0,0],[14,14,0,0,0,0,0,0,0],[11,13,12],[0,15,15],[11,10,10],[16,15,16,16],[8,8,8,9,9],[10,9,9],[13,14,15],[9,10,9],[5,6,6],[0,10,0,0,0],[11,11,13,13],[13,13,15],[13,11,11],[12,10,11,11],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],[0,0,80,224,0,0,16,96,4,0,0,0,0,0,0],[242,255,255,255,242,255,255,255],[255,230,255,255,255,230,255,255,255,230,255,255,255],[16,14,15,15],[12,12,9,10,10],[10,10,11],[11,11,10,10],[0,1,4,4],[16,16,14,15],[5,5,5,5,5,5,5,5,5,5],[8,8,8],[14,13,13],[6,6,6],[14,11,12,12],[5,5,5,5],[0,4,0,0,0],[0,0,16,224,0,0,16,96,2,0,0,0,0,0,0],[12,13,14],[14,14,16],[11,9,9]]};
Module.b64Bytes=0;
//本代码由assets/node-codes/emcc-memory-zip.js生成，强力压缩Emscripten编译出来的静态内存初始化数据

Module.b64Atob=function(input) {
	//低版本Worker里面没有atob https://developer.mozilla.org/en-US/docs/Web/API/atob
	//测试： s=new Array(1024*10).fill();s=s.map(v=>String.fromCharCode(~~(Math.random()*256)));t=s.join("");s=btoa(t);b64Atob(s)==atob(s)
	var bc = 0, bs, buffer, idx = 0, output = '';
	while(true){
		buffer = input.charCodeAt(idx++);
		if(!buffer || buffer==61) break //""||"="
		if(buffer>64&&buffer<91) buffer-=65;
		else if(buffer>96&&buffer<123) buffer-=71; //97-26
		else if(buffer>47&&buffer<58) buffer+=4; //48-26-26
		else if(buffer==43) buffer=62;// +
		else if(buffer==47) buffer=63;// /
		else continue;
		bs = bc % 4 ? bs * 64 + buffer : buffer;
		if(bc++ % 4) output += String.fromCharCode(255 & bs >> (-2 * bc & 6));
	}
	return output;
};
Module.b64UnZip=function(b64,dic){
	var b0=dic.b0,bits=dic.bits,b2=(bits==8?0:bits==7?128:192)-1,mask=bits==8?255:bits==7?127:63;
	var s=typeof atob=="function"?atob(b64):Module.b64Atob(b64);
	var buf=new Uint8Array(dic.size),n=0;
	for(var i=0;i<s.length;i++){
		var v=s.charCodeAt(i);
		if(v==b0){
			var v2=s.charCodeAt(i+1)||0;
			if(v2>b2){//查找字典替换
				var iD=v2&mask,vD=dic.bs[iD];
				for(var j=0;j<vD.length;j++){
					buf[n++]=vD[j];
				}
				i++; continue;
			}
		}
		buf[n++]=v;
	}
	return buf;
};
if(!Module.b64Bytes)Module.b64Bytes=Module.b64UnZip(Module.b64Zip,Module.b64Dic);
Module.b64Val=function(offset,size){
	if(offset+size>Module.b64Bytes.length)abort("b64Val OB");
	return Module.b64Bytes.subarray(offset,offset+size);
};
/* memory initializer */ allocate(Module.b64Val(0,10240), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate(Module.b64Val(10240,10240), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate(Module.b64Val(20480,10240), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);
/* memory initializer */ allocate(Module.b64Val(30720,10185), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+30720);
/* memory initializer */ allocate(Module.b64Val(40905,5305), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+41032);
/* memory initializer */ allocate([1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+49544);
/* memory initializer */ allocate(Module.b64Val(46210,65), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+50572);
/* memory initializer */ allocate(Module.b64Val(46275,348), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+52752);
/* memory initializer */ allocate(Module.b64Val(46623,5016), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+55148);
/* memory initializer */ allocate(Module.b64Val(51639,10223), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+62212);
/* memory initializer */ allocate(Module.b64Val(61862,5297), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+72464);
/* memory initializer */ allocate([1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+78916);
/* memory initializer */ allocate(Module.b64Val(67159,1025), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+79944);
/* memory initializer */ allocate(Module.b64Val(68184,129), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+81996);
/* memory initializer */ allocate(Module.b64Val(68313,1372), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+83152);
/* memory initializer */ allocate(Module.b64Val(69685,5773), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+86572);
/* memory initializer */ allocate(Module.b64Val(75458,5257), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+97272);
/* memory initializer */ allocate(Module.b64Val(80715,10237), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+107456);
/* memory initializer */ allocate(Module.b64Val(90952,4596), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+117696);
/* memory initializer */ allocate(Module.b64Val(95548,10240), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+124340);
/* memory initializer */ allocate(Module.b64Val(105788,10240), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+134580);
/* memory initializer */ allocate(Module.b64Val(116028,10215), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+144820);
/* memory initializer */ allocate(Module.b64Val(126243,10240), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+155104);
/* memory initializer */ allocate(Module.b64Val(136483,7956), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+165344);
/* memory initializer */ allocate(Module.b64Val(144439,10240), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+175348);
/* memory initializer */ allocate(Module.b64Val(154679,10239), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+185588);
/* memory initializer */ allocate(Module.b64Val(164918,6507), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+195830);
/* memory initializer */ allocate(Module.b64Val(171425,6225), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+207264);
/* memory initializer */ allocate(Module.b64Val(177650,6057), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+218416);
/* memory initializer */ allocate(Module.b64Val(183707,5993), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+229400);
/* memory initializer */ allocate(Module.b64Val(189700,404), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+240320);
/* memory initializer */ allocate(Module.b64Val(190104,6029), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+242772);
/* memory initializer */ allocate(Module.b64Val(196133,4817), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+253728);
/* memory initializer */ allocate(Module.b64Val(200950,5609), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+263472);
/* memory initializer */ allocate(Module.b64Val(206559,5241), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+274008);
/* memory initializer */ allocate(Module.b64Val(211800,5609), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+284176);
/* memory initializer */ allocate(Module.b64Val(217409,5241), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+294712);
/* memory initializer */ allocate(Module.b64Val(222650,10240), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+304880);
/* memory initializer */ allocate(Module.b64Val(232890,10240), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+315120);
/* memory initializer */ allocate(Module.b64Val(243130,9033), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+325360);
/* memory initializer */ allocate(Module.b64Val(252163,5257), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+339320);
/* memory initializer */ allocate(Module.b64Val(257420,8873), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+349504);
/* memory initializer */ allocate(Module.b64Val(266293,1097), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+360488);
/* memory initializer */ allocate(Module.b64Val(267390,764), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+363696);
/* memory initializer */ allocate(Module.b64Val(268154,1064), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+366508);
/* memory initializer */ allocate(Module.b64Val(269218,10240), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+369616);
/* memory initializer */ allocate(Module.b64Val(279458,10237), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+379856);
/* memory initializer */ allocate(Module.b64Val(289695,10240), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+390097);
/* memory initializer */ allocate(Module.b64Val(299935,10240), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+400337);
/* memory initializer */ allocate(Module.b64Val(310175,10240), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+410577);
/* memory initializer */ allocate(Module.b64Val(320415,10240), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+420817);
/* memory initializer */ allocate(Module.b64Val(330655,10240), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+431057);
/* memory initializer */ allocate(Module.b64Val(340895,2955), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+441297);
/* memory initializer */ allocate(Module.b64Val(343850,10239), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+446300);
/* memory initializer */ allocate(Module.b64Val(354089,10240), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+456540);
/* memory initializer */ allocate(Module.b64Val(364329,10240), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+466780);
/* memory initializer */ allocate(Module.b64Val(374569,10023), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+477020);
/* memory initializer */ allocate(Module.b64Val(384592,364), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+487288);
/* memory initializer */ allocate(Module.b64Val(384956,10199), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+489700);
/* memory initializer */ allocate(Module.b64Val(395155,10227), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+500144);
/* memory initializer */ allocate(Module.b64Val(405382,10240), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+510456);
/* memory initializer */ allocate(Module.b64Val(415622,10240), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+520696);
/* memory initializer */ allocate(Module.b64Val(425862,10240), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+530936);
/* memory initializer */ allocate(Module.b64Val(436102,10240), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+541176);
/* memory initializer */ allocate(Module.b64Val(446342,2120), "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+551416);

/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
assert(tempDoublePtr % 8 == 0);

//精简

  
  
  var ___errno_state=0;
  
  function _sysconf(name) {
      if(name==30) return PAGE_SIZE;
      abort("fix _sysconf"); //精简
    }

   
  Module["_memset"] = _memset;
  Module["_strlen"] = _strlen; 
  Module["_strcat"] = _strcat;
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function abort(what) {
    throw new Error("abort(" + what + ")")
  }
  Module.abort = abort;
  function _abort(what) {
      Module['abort'](what);
  }


   
  Module["_i64Add"] = _i64Add;

  var _floor=Math_floor;

  
  function _fflush(stream) {} //精简
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      //精简
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      //精简
    }

  var _llvm_sqrt_f64=Math_sqrt;

  
  function _exit(status) {
      abort('fix _exit')
    }

  var _sin=Math_sin;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  var _atan=Math_atan;

  var _BDtoIHigh=true;

  var _ceil=Math_ceil;

  var _sinf=Math_sin;

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _log=Math_log;

  var _cos=Math_cos;

  var _llvm_pow_f64=Math_pow;

  function _sbrk(bytes) {
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  function ___errno_location() {
      return ___errno_state;
    }


   
  Module["_strcpy"] = _strcpy;

  var _exp=Math_exp;

  function _time(ptr) {
      if(!Module.StaticSeed){//每次生成的帧头不一样
        var ret = (Date.now()/1000)|0;
      }else{
        var ret = (1262390400000/1000)|0;
      }
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
  
  //精简
  

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");
//精简

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
Module.asmLibraryArg = { "abort": abort, "assert": assert,
  //精简
  "_sin": _sin, "_exp": _exp, "_floor": _floor, "_fflush": _fflush,
  "_llvm_sqrt_f64": _llvm_sqrt_f64, "_llvm_pow_f64": _llvm_pow_f64, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk,
  "_atan": _atan, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_sysconf": _sysconf, "_sinf": _sinf, "_cos": _cos, "_log": _log, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___errno_location": ___errno_location, "_abort": _abort, "_time": _time, "_ceil": _ceil,
  "_exit": _exit, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  //精简

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  //var invoke_iiiii=env.invoke_iiiii;
  //var invoke_vi=env.invoke_vi;
  //var invoke_vii=env.invoke_vii;
  //var invoke_ii=env.invoke_ii;
  //var invoke_viii=env.invoke_viii;
  //var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  //var invoke_iii=env.invoke_iii;
  //var invoke_iiiiii=env.invoke_iiiiii;
  var _sin=env._sin;
  var _exp=env._exp;
  //var _cosf=env._cosf;
  //var ___setErrNo=env.___setErrNo;
  var _floor=env._floor;
  var _fflush=env._fflush;
  var _llvm_sqrt_f64=env._llvm_sqrt_f64;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  //var _fabsf=env._fabsf;
  var _sbrk=env._sbrk;
  var _atan=env._atan;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _sysconf=env._sysconf;
  var _sinf=env._sinf;
  var _cos=env._cos;
  var _log=env._log;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___errno_location=env.___errno_location;
  //var __exit=env.__exit;
  var _abort=env._abort;
  var _time=env._time;
  var _ceil=env._ceil;
  var _exit=env._exit;
  var tempFloat = 0.0;

//精简

function _oggpack_writeinit($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$b>>2]=0|0;HEAP32[$b+4>>2]=0|0;HEAP32[$b+8>>2]=0|0;HEAP32[$b+12>>2]=0|0;
 $0 = (_malloc(256)|0);
 $1 = ((($b)) + 8|0);
 HEAP32[$1>>2] = $0;
 $2 = ((($b)) + 12|0);
 HEAP32[$2>>2] = $0;
 HEAP8[$0>>0] = 0;
 $3 = ((($b)) + 16|0);
 HEAP32[$3>>2] = 256;
 return;
}
function _oggpack_writetrunc($b,$bits) {
 $b = $b|0;
 $bits = $bits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $bits >> 3;
 $1 = ((($b)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = $0 << 3;
 $5 = (($bits) - ($4))|0;
 $6 = ((($b)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($0)|0);
 HEAP32[$1>>2] = $8;
 $9 = ((($b)) + 4|0);
 HEAP32[$9>>2] = $5;
 HEAP32[$b>>2] = $0;
 $10 = (8 + ($5<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP8[$8>>0]|0;
 $13 = $12&255;
 $14 = $13 & $11;
 $15 = $14&255;
 HEAP8[$8>>0] = $15;
 return;
}
function _oggpack_write($b,$value,$bits) {
 $b = $b|0;
 $value = $value|0;
 $bits = $bits|0;
 var $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bits>>>0)>(32);
 do {
  if (!($0)) {
   $1 = HEAP32[$b>>2]|0;
   $2 = ((($b)) + 16|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($3) + -4)|0;
   $5 = ($1|0)<($4|0);
   $$phi$trans$insert = ((($b)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($5) {
    $25 = $$pre;
   } else {
    $6 = ($$pre|0)==(0|0);
    if ($6) {
     return;
    }
    $7 = ($3|0)>(2147483391);
    if ($7) {
     break;
    }
    $8 = ((($b)) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (($3) + 256)|0;
    $11 = (_realloc($9,$10)|0);
    $12 = ($11|0)==(0|0);
    if ($12) {
     break;
    }
    HEAP32[$8>>2] = $11;
    $13 = HEAP32[$2>>2]|0;
    $14 = (($13) + 256)|0;
    HEAP32[$2>>2] = $14;
    $15 = HEAP32[$b>>2]|0;
    $16 = (($11) + ($15)|0);
    HEAP32[$$phi$trans$insert>>2] = $16;
    $25 = $16;
   }
   $17 = (8 + ($bits<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $18 & $value;
   $20 = ((($b)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + ($bits))|0;
   $23 = $19 << $21;
   $24 = HEAP8[$25>>0]|0;
   $26 = $24&255;
   $27 = $26 | $23;
   $28 = $27&255;
   HEAP8[$25>>0] = $28;
   $29 = ($22|0)>(7);
   do {
    if ($29) {
     $30 = HEAP32[$20>>2]|0;
     $31 = (8 - ($30))|0;
     $32 = $19 >>> $31;
     $33 = $32&255;
     $34 = HEAP32[$$phi$trans$insert>>2]|0;
     $35 = ((($34)) + 1|0);
     HEAP8[$35>>0] = $33;
     $36 = ($22|0)>(15);
     if ($36) {
      $37 = HEAP32[$20>>2]|0;
      $38 = (16 - ($37))|0;
      $39 = $19 >>> $38;
      $40 = $39&255;
      $41 = HEAP32[$$phi$trans$insert>>2]|0;
      $42 = ((($41)) + 2|0);
      HEAP8[$42>>0] = $40;
      $43 = ($22|0)>(23);
      if ($43) {
       $44 = HEAP32[$20>>2]|0;
       $45 = (24 - ($44))|0;
       $46 = $19 >>> $45;
       $47 = $46&255;
       $48 = HEAP32[$$phi$trans$insert>>2]|0;
       $49 = ((($48)) + 3|0);
       HEAP8[$49>>0] = $47;
       $50 = ($22|0)>(31);
       if ($50) {
        $51 = HEAP32[$20>>2]|0;
        $52 = ($51|0)==(0);
        if ($52) {
         $58 = HEAP32[$$phi$trans$insert>>2]|0;
         $59 = ((($58)) + 4|0);
         HEAP8[$59>>0] = 0;
         break;
        } else {
         $53 = (32 - ($51))|0;
         $54 = $19 >>> $53;
         $55 = $54&255;
         $56 = HEAP32[$$phi$trans$insert>>2]|0;
         $57 = ((($56)) + 4|0);
         HEAP8[$57>>0] = $55;
         break;
        }
       }
      }
     }
    }
   } while(0);
   $60 = (($22|0) / 8)&-1;
   $61 = HEAP32[$b>>2]|0;
   $62 = (($61) + ($60))|0;
   HEAP32[$b>>2] = $62;
   $63 = HEAP32[$$phi$trans$insert>>2]|0;
   $64 = (($63) + ($60)|0);
   HEAP32[$$phi$trans$insert>>2] = $64;
   $65 = $22 & 7;
   HEAP32[$20>>2] = $65;
   return;
  }
 } while(0);
 $66 = ((($b)) + 8|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ($67|0)==(0|0);
 if (!($68)) {
  _free($67);
 }
 ;HEAP32[$b>>2]=0|0;HEAP32[$b+4>>2]=0|0;HEAP32[$b+8>>2]=0|0;HEAP32[$b+12>>2]=0|0;HEAP32[$b+16>>2]=0|0;
 return;
}
function _oggpack_writeclear($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($b)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _free($1);
 }
 ;HEAP32[$b>>2]=0|0;HEAP32[$b+4>>2]=0|0;HEAP32[$b+8>>2]=0|0;HEAP32[$b+12>>2]=0|0;HEAP32[$b+16>>2]=0|0;
 return;
}
function _oggpack_reset($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($b)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($b)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$0>>2] = $4;
 $5 = $4;
 HEAP8[$5>>0] = 0;
 HEAP32[$b>>2] = 0;
 $6 = ((($b)) + 4|0);
 HEAP32[$6>>2] = 0;
 return;
}
function _oggpack_look($b,$bits) {
 $b = $b|0;
 $bits = $bits|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bits>>>0)>(32);
 if ($0) {
  $$0 = -1;
  return ($$0|0);
 }
 $1 = (8 + ($bits<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($b)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($bits))|0;
 $6 = HEAP32[$b>>2]|0;
 $7 = ((($b)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + -4)|0;
 $10 = ($6|0)<($9|0);
 if (!($10)) {
  $11 = (($5) + 7)|0;
  $12 = $11 >> 3;
  $13 = (($8) - ($12))|0;
  $14 = ($6|0)>($13|0);
  if ($14) {
   $$0 = -1;
   return ($$0|0);
  }
  $15 = ($5|0)==(0);
  if ($15) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $16 = ((($b)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $19 >>> $4;
 $21 = ($5|0)>(8);
 if ($21) {
  $22 = ((($17)) + 1|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = (8 - ($4))|0;
  $26 = $24 << $25;
  $27 = $26 | $20;
  $28 = ($5|0)>(16);
  if ($28) {
   $29 = ((($17)) + 2|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $32 = (16 - ($4))|0;
   $33 = $31 << $32;
   $34 = $33 | $27;
   $35 = ($5|0)>(24);
   if ($35) {
    $36 = ((($17)) + 3|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = $37&255;
    $39 = (24 - ($4))|0;
    $40 = $38 << $39;
    $41 = $40 | $34;
    $42 = ($5|0)<(33);
    $43 = ($4|0)==(0);
    $or$cond = $42 | $43;
    if ($or$cond) {
     $ret$0 = $41;
    } else {
     $44 = ((($17)) + 4|0);
     $45 = HEAP8[$44>>0]|0;
     $46 = $45&255;
     $47 = (32 - ($4))|0;
     $48 = $46 << $47;
     $49 = $48 | $41;
     $ret$0 = $49;
    }
   } else {
    $ret$0 = $34;
   }
  } else {
   $ret$0 = $27;
  }
 } else {
  $ret$0 = $20;
 }
 $50 = $ret$0 & $2;
 $$0 = $50;
 return ($$0|0);
}
function _oggpack_adv($b,$bits) {
 $b = $b|0;
 $bits = $bits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($b)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($bits))|0;
 $3 = HEAP32[$b>>2]|0;
 $4 = ((($b)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + 7)|0;
 $7 = $6 >> 3;
 $8 = (($5) - ($7))|0;
 $9 = ($3|0)>($8|0);
 if ($9) {
  $16 = ((($b)) + 12|0);
  HEAP32[$16>>2] = 0;
  HEAP32[$b>>2] = $5;
  $storemerge = 1;
  HEAP32[$0>>2] = $storemerge;
  return;
 } else {
  $10 = (($2|0) / 8)&-1;
  $11 = ((($b)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + ($10)|0);
  HEAP32[$11>>2] = $13;
  $14 = (($3) + ($10))|0;
  HEAP32[$b>>2] = $14;
  $15 = $2 & 7;
  $storemerge = $15;
  HEAP32[$0>>2] = $storemerge;
  return;
 }
}
function _oggpack_read($b,$bits) {
 $b = $b|0;
 $bits = $bits|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phi3Z2D = 0, $$pre$phi5Z2D = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bits>>>0)>(32);
 do {
  if ($0) {
   $$phi$trans$insert = ((($b)) + 16|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $$pre4 = ((($b)) + 4|0);
   $$pre$phi3Z2D = $b;$$pre$phi5Z2D = $$pre4;$56 = $$pre;
  } else {
   $1 = (8 + ($bits<<2)|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ((($b)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = (($4) + ($bits))|0;
   $6 = HEAP32[$b>>2]|0;
   $7 = ((($b)) + 16|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (($8) + -4)|0;
   $10 = ($6|0)<($9|0);
   if (!($10)) {
    $11 = (($5) + 7)|0;
    $12 = $11 >> 3;
    $13 = (($8) - ($12))|0;
    $14 = ($6|0)>($13|0);
    if ($14) {
     $$pre$phi3Z2D = $b;$$pre$phi5Z2D = $3;$56 = $8;
     break;
    }
    $15 = ($5|0)==(0);
    if ($15) {
     $$0 = 0;
     return ($$0|0);
    }
   }
   $16 = ((($b)) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = $19 >>> $4;
   $21 = ($5|0)>(8);
   if ($21) {
    $22 = ((($17)) + 1|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = (8 - ($4))|0;
    $26 = $24 << $25;
    $27 = $26 | $20;
    $28 = ($5|0)>(16);
    if ($28) {
     $29 = ((($17)) + 2|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = $30&255;
     $32 = (16 - ($4))|0;
     $33 = $31 << $32;
     $34 = $33 | $27;
     $35 = ($5|0)>(24);
     if ($35) {
      $36 = ((($17)) + 3|0);
      $37 = HEAP8[$36>>0]|0;
      $38 = $37&255;
      $39 = (24 - ($4))|0;
      $40 = $38 << $39;
      $41 = $40 | $34;
      $42 = ($5|0)<(33);
      $43 = ($4|0)==(0);
      $or$cond = $42 | $43;
      if ($or$cond) {
       $ret$0 = $41;
      } else {
       $44 = ((($17)) + 4|0);
       $45 = HEAP8[$44>>0]|0;
       $46 = $45&255;
       $47 = (32 - ($4))|0;
       $48 = $46 << $47;
       $49 = $48 | $41;
       $ret$0 = $49;
      }
     } else {
      $ret$0 = $34;
     }
    } else {
     $ret$0 = $27;
    }
   } else {
    $ret$0 = $20;
   }
   $50 = $ret$0 & $2;
   $51 = (($5|0) / 8)&-1;
   $52 = (($17) + ($51)|0);
   HEAP32[$16>>2] = $52;
   $53 = (($6) + ($51))|0;
   HEAP32[$b>>2] = $53;
   $54 = $5 & 7;
   HEAP32[$3>>2] = $54;
   $$0 = $50;
   return ($$0|0);
  }
 } while(0);
 $55 = ((($b)) + 12|0);
 HEAP32[$55>>2] = 0;
 HEAP32[$$pre$phi3Z2D>>2] = $56;
 HEAP32[$$pre$phi5Z2D>>2] = 1;
 $$0 = -1;
 return ($$0|0);
}
function _oggpack_bytes($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$b>>2]|0;
 $1 = ((($b)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 7)|0;
 $4 = (($3|0) / 8)&-1;
 $5 = (($4) + ($0))|0;
 return ($5|0);
}
function _oggpack_get_buffer($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($b)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _ogg_stream_init($os,$serialno) {
 $os = $os|0;
 $serialno = $serialno|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($os|0)==(0|0);
 if ($0) {
  $$0 = -1;
  return ($$0|0);
 }
 _memset(($os|0),0,360)|0;
 $1 = ((($os)) + 4|0);
 HEAP32[$1>>2] = 16384;
 $2 = ((($os)) + 24|0);
 HEAP32[$2>>2] = 1024;
 $3 = (_malloc(16384)|0);
 HEAP32[$os>>2] = $3;
 $4 = (_malloc(4096)|0);
 $5 = ((($os)) + 16|0);
 HEAP32[$5>>2] = $4;
 $6 = (_malloc(8192)|0);
 $7 = ((($os)) + 20|0);
 HEAP32[$7>>2] = $6;
 $8 = ($3|0)==(0|0);
 do {
  if ($8) {
   $11 = $4;
  } else {
   $9 = ($4|0)==(0|0);
   $10 = ($6|0)==(0|0);
   $or$cond = $10 | $9;
   if ($or$cond) {
    _free($3);
    $$pre = HEAP32[$5>>2]|0;
    $11 = $$pre;
    break;
   }
   $15 = ((($os)) + 336|0);
   HEAP32[$15>>2] = $serialno;
   $$0 = 0;
   return ($$0|0);
  }
 } while(0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  _free($11);
 }
 $13 = HEAP32[$7>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  _free($13);
 }
 _memset(($os|0),0,360)|0;
 $$0 = -1;
 return ($$0|0);
}
function _ogg_stream_clear($os) {
 $os = $os|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($os|0)==(0|0);
 if ($0) {
  return 0;
 }
 $1 = HEAP32[$os>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _free($1);
 }
 $3 = ((($os)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  _free($4);
 }
 $6 = ((($os)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  _free($7);
 }
 _memset(($os|0),0,360)|0;
 return 0;
}
function _ogg_page_checksum_set($og) {
 $og = $og|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $crc_reg$0$lcssa = 0, $crc_reg$03 = 0, $crc_reg$1$lcssa = 0, $crc_reg$11 = 0, $i$04 = 0;
 var $i$12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($og|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP32[$og>>2]|0;
 $2 = ((($1)) + 22|0);
 HEAP8[$2>>0] = 0;
 $3 = HEAP32[$og>>2]|0;
 $4 = ((($3)) + 23|0);
 HEAP8[$4>>0] = 0;
 $5 = HEAP32[$og>>2]|0;
 $6 = ((($5)) + 24|0);
 HEAP8[$6>>0] = 0;
 $7 = HEAP32[$og>>2]|0;
 $8 = ((($7)) + 25|0);
 HEAP8[$8>>0] = 0;
 $9 = ((($og)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)>(0);
 if ($11) {
  $12 = HEAP32[$og>>2]|0;
  $crc_reg$03 = 0;$i$04 = 0;
  while(1) {
   $18 = $crc_reg$03 << 8;
   $19 = $crc_reg$03 >>> 24;
   $20 = (($12) + ($i$04)|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21&255;
   $23 = $22 ^ $19;
   $24 = (144 + ($23<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $25 ^ $18;
   $27 = (($i$04) + 1)|0;
   $28 = ($27|0)<($10|0);
   if ($28) {
    $crc_reg$03 = $26;$i$04 = $27;
   } else {
    $crc_reg$0$lcssa = $26;
    break;
   }
  }
 } else {
  $crc_reg$0$lcssa = 0;
 }
 $13 = ((($og)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)>(0);
 if ($15) {
  $16 = ((($og)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $crc_reg$11 = $crc_reg$0$lcssa;$i$12 = 0;
  while(1) {
   $29 = $crc_reg$11 << 8;
   $30 = $crc_reg$11 >>> 24;
   $31 = (($17) + ($i$12)|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   $34 = $33 ^ $30;
   $35 = (144 + ($34<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $36 ^ $29;
   $38 = (($i$12) + 1)|0;
   $39 = ($38|0)<($14|0);
   if ($39) {
    $crc_reg$11 = $37;$i$12 = $38;
   } else {
    $crc_reg$1$lcssa = $37;
    break;
   }
  }
 } else {
  $crc_reg$1$lcssa = $crc_reg$0$lcssa;
 }
 $40 = $crc_reg$1$lcssa&255;
 $41 = HEAP32[$og>>2]|0;
 $42 = ((($41)) + 22|0);
 HEAP8[$42>>0] = $40;
 $43 = $crc_reg$1$lcssa >>> 8;
 $44 = $43&255;
 $45 = HEAP32[$og>>2]|0;
 $46 = ((($45)) + 23|0);
 HEAP8[$46>>0] = $44;
 $47 = $crc_reg$1$lcssa >>> 16;
 $48 = $47&255;
 $49 = HEAP32[$og>>2]|0;
 $50 = ((($49)) + 24|0);
 HEAP8[$50>>0] = $48;
 $51 = $crc_reg$1$lcssa >>> 24;
 $52 = $51&255;
 $53 = HEAP32[$og>>2]|0;
 $54 = ((($53)) + 25|0);
 HEAP8[$54>>0] = $52;
 return;
}
function _ogg_stream_iovecin($os,$iov,$count,$e_o_s,$0,$1) {
 $os = $os|0;
 $iov = $iov|0;
 $count = $count|0;
 $e_o_s = $e_o_s|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$$i2 = 0, $$0 = 0, $$phi$trans$insert21 = 0, $$pre = 0, $$pre$phi28Z2D = 0, $$pre22 = 0, $$pre27 = 0, $$pre30 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bytes$0$lcssa = 0, $bytes$012 = 0, $exitcond = 0, $i$013 = 0, $i$110 = 0, $i$2$lcssa = 0, $i$29 = 0, $or$cond = 0, $smax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($os|0)==(0|0);
 if ($2) {
  $$0 = -1;
  return ($$0|0);
 }
 $3 = HEAP32[$os>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = -1;
  return ($$0|0);
 }
 $5 = ($iov|0)==(0|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ($count|0)>(0);
 L10: do {
  if ($6) {
   $bytes$012 = 0;$i$013 = 0;
   while(1) {
    $7 = (((($iov) + ($i$013<<3)|0)) + 4|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)<(0);
    $10 = (2147483647 - ($8))|0;
    $11 = ($bytes$012|0)>($10|0);
    $or$cond = $9 | $11;
    if ($or$cond) {
     $$0 = -1;
     break;
    }
    $12 = (($8) + ($bytes$012))|0;
    $13 = (($i$013) + 1)|0;
    $14 = ($13|0)<($count|0);
    if ($14) {
     $bytes$012 = $12;$i$013 = $13;
    } else {
     $bytes$0$lcssa = $12;
     break L10;
    }
   }
   return ($$0|0);
  } else {
   $bytes$0$lcssa = 0;
  }
 } while(0);
 $15 = (($bytes$0$lcssa|0) / 255)&-1;
 $16 = (($15) + 1)|0;
 $17 = ((($os)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0);
 $$pre30 = ((($os)) + 8|0);
 if (!($19)) {
  $20 = HEAP32[$$pre30>>2]|0;
  $21 = (($20) - ($18))|0;
  HEAP32[$$pre30>>2] = $21;
  $22 = ($20|0)==($18|0);
  if (!($22)) {
   $23 = (($3) + ($18)|0);
   _memmove(($3|0),($23|0),($21|0))|0;
  }
  HEAP32[$17>>2] = 0;
 }
 $24 = ((($os)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) - ($bytes$0$lcssa))|0;
 $27 = HEAP32[$$pre30>>2]|0;
 $28 = ($26|0)>($27|0);
 do {
  if (!($28)) {
   $29 = (2147483647 - ($bytes$0$lcssa))|0;
   $30 = ($25|0)>($29|0);
   if ($30) {
    $31 = HEAP32[$os>>2]|0;
    $32 = ($31|0)==(0|0);
    if (!($32)) {
     _free($31);
    }
    $33 = ((($os)) + 16|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)==(0|0);
    if (!($35)) {
     _free($34);
    }
    $36 = ((($os)) + 20|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37|0)==(0|0);
    if (!($38)) {
     _free($37);
    }
    _memset(($os|0),0,360)|0;
    $$0 = -1;
    return ($$0|0);
   }
   $39 = (($25) + ($bytes$0$lcssa))|0;
   $40 = ($39|0)<(2147482623);
   $41 = (($39) + 1024)|0;
   $$$i2 = $40 ? $41 : $39;
   $42 = HEAP32[$os>>2]|0;
   $43 = (_realloc($42,$$$i2)|0);
   $44 = ($43|0)==(0|0);
   if (!($44)) {
    HEAP32[$24>>2] = $$$i2;
    HEAP32[$os>>2] = $43;
    break;
   }
   $45 = HEAP32[$os>>2]|0;
   $46 = ($45|0)==(0|0);
   if (!($46)) {
    _free($45);
   }
   $47 = ((($os)) + 16|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==(0|0);
   if (!($49)) {
    _free($48);
   }
   $50 = ((($os)) + 20|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)==(0|0);
   if (!($52)) {
    _free($51);
   }
   _memset(($os|0),0,360)|0;
   $$0 = -1;
   return ($$0|0);
  }
 } while(0);
 $53 = (__os_lacing_expand($os,$16)|0);
 $54 = ($53|0)==(0);
 if (!($54)) {
  $$0 = -1;
  return ($$0|0);
 }
 if ($6) {
  $$pre = HEAP32[$$pre30>>2]|0;
  $66 = $$pre;$i$110 = 0;
  while(1) {
   $64 = HEAP32[$os>>2]|0;
   $65 = (($64) + ($66)|0);
   $67 = (($iov) + ($i$110<<3)|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = (((($iov) + ($i$110<<3)|0)) + 4|0);
   $70 = HEAP32[$69>>2]|0;
   _memcpy(($65|0),($68|0),($70|0))|0;
   $71 = HEAP32[$69>>2]|0;
   $72 = HEAP32[$$pre30>>2]|0;
   $73 = (($72) + ($71))|0;
   HEAP32[$$pre30>>2] = $73;
   $74 = (($i$110) + 1)|0;
   $exitcond = ($74|0)==($count|0);
   if ($exitcond) {
    break;
   } else {
    $66 = $73;$i$110 = $74;
   }
  }
 }
 $55 = ($bytes$0$lcssa|0)>(254);
 $56 = ((($os)) + 28|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ((($os)) + 16|0);
 $59 = HEAP32[$58>>2]|0;
 if ($55) {
  $60 = ((($os)) + 352|0);
  $61 = ((($os)) + 20|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ($15|0)>(1);
  $i$29 = 0;
  while(1) {
   $75 = (($57) + ($i$29))|0;
   $76 = (($59) + ($75<<2)|0);
   HEAP32[$76>>2] = 255;
   $77 = $60;
   $78 = $77;
   $79 = HEAP32[$78>>2]|0;
   $80 = (($77) + 4)|0;
   $81 = $80;
   $82 = HEAP32[$81>>2]|0;
   $83 = (($62) + ($75<<3)|0);
   $84 = $83;
   $85 = $84;
   HEAP32[$85>>2] = $79;
   $86 = (($84) + 4)|0;
   $87 = $86;
   HEAP32[$87>>2] = $82;
   $88 = (($i$29) + 1)|0;
   $89 = ($88|0)<($15|0);
   if ($89) {
    $i$29 = $88;
   } else {
    break;
   }
  }
  $smax = $63 ? $15 : 1;
  $$pre$phi28Z2D = $60;$94 = $62;$i$2$lcssa = $smax;
 } else {
  $$phi$trans$insert21 = ((($os)) + 20|0);
  $$pre22 = HEAP32[$$phi$trans$insert21>>2]|0;
  $$pre27 = ((($os)) + 352|0);
  $$pre$phi28Z2D = $$pre27;$94 = $$pre22;$i$2$lcssa = 0;
 }
 $90 = (($bytes$0$lcssa|0) % 255)&-1;
 $91 = (($57) + ($i$2$lcssa))|0;
 $92 = (($59) + ($91<<2)|0);
 HEAP32[$92>>2] = $90;
 $93 = (($94) + ($91<<3)|0);
 $95 = $93;
 $96 = $95;
 HEAP32[$96>>2] = $0;
 $97 = (($95) + 4)|0;
 $98 = $97;
 HEAP32[$98>>2] = $1;
 $99 = $$pre$phi28Z2D;
 $100 = $99;
 HEAP32[$100>>2] = $0;
 $101 = (($99) + 4)|0;
 $102 = $101;
 HEAP32[$102>>2] = $1;
 $103 = (($59) + ($57<<2)|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $104 | 256;
 HEAP32[$103>>2] = $105;
 $106 = (($57) + ($16))|0;
 HEAP32[$56>>2] = $106;
 $107 = ((($os)) + 344|0);
 $108 = $107;
 $109 = $108;
 $110 = HEAP32[$109>>2]|0;
 $111 = (($108) + 4)|0;
 $112 = $111;
 $113 = HEAP32[$112>>2]|0;
 $114 = (_i64Add(($110|0),($113|0),1,0)|0);
 $115 = tempRet0;
 $116 = $107;
 $117 = $116;
 HEAP32[$117>>2] = $114;
 $118 = (($116) + 4)|0;
 $119 = $118;
 HEAP32[$119>>2] = $115;
 $120 = ($e_o_s|0)==(0);
 if ($120) {
  $$0 = 0;
  return ($$0|0);
 }
 $121 = ((($os)) + 328|0);
 HEAP32[$121>>2] = 1;
 $$0 = 0;
 return ($$0|0);
}
function _ogg_stream_packetin($os,$op) {
 $os = $os|0;
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iov = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $iov = sp;
 $0 = HEAP32[$op>>2]|0;
 HEAP32[$iov>>2] = $0;
 $1 = ((($op)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($iov)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($op)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($op)) + 16|0);
 $7 = $6;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (_ogg_stream_iovecin($os,$iov,1,$5,$9,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function _ogg_stream_flush($os,$og) {
 $os = $os|0;
 $og = $og|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ogg_stream_flush_i($os,$og,1,4096)|0);
 return ($0|0);
}
function _ogg_stream_pageout($os,$og) {
 $os = $os|0;
 $og = $og|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $force$0 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($os|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = HEAP32[$os>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($os)) + 328|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 $$phi$trans$insert = ((($os)) + 28|0);
 $$pre = HEAP32[$$phi$trans$insert>>2]|0;
 $phitmp = ($$pre|0)==(0);
 if ($5) {
  if ($phitmp) {
   $force$0 = 0;
  } else {
   $6 = ((($os)) + 332|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0);
   if ($8) {
    label = 7;
   } else {
    $force$0 = 0;
   }
  }
 } else {
  if ($phitmp) {
   $force$0 = 0;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $force$0 = 1;
 }
 $9 = (_ogg_stream_flush_i($os,$og,$force$0,4096)|0);
 $$0 = $9;
 return ($$0|0);
}
function __os_lacing_expand($os,$needed) {
 $os = $os|0;
 $needed = $needed|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($os)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) - ($needed))|0;
 $3 = ((($os)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)>($4|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = (2147483647 - ($needed))|0;
 $7 = ($1|0)>($6|0);
 if ($7) {
  $8 = HEAP32[$os>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   _free($8);
  }
  $10 = ((($os)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   _free($11);
  }
  $13 = ((($os)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0|0);
  if (!($15)) {
   _free($14);
  }
  _memset(($os|0),0,360)|0;
  $$0 = -1;
  return ($$0|0);
 }
 $16 = (($1) + ($needed))|0;
 $17 = ($16|0)<(2147483615);
 $18 = (($16) + 32)|0;
 $$ = $17 ? $18 : $16;
 $19 = ((($os)) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $$ << 2;
 $22 = (_realloc($20,$21)|0);
 $23 = ($22|0)==(0|0);
 if ($23) {
  $24 = HEAP32[$os>>2]|0;
  $25 = ($24|0)==(0|0);
  if (!($25)) {
   _free($24);
  }
  $26 = HEAP32[$19>>2]|0;
  $27 = ($26|0)==(0|0);
  if (!($27)) {
   _free($26);
  }
  $28 = ((($os)) + 20|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(0|0);
  if (!($30)) {
   _free($29);
  }
  _memset(($os|0),0,360)|0;
  $$0 = -1;
  return ($$0|0);
 }
 HEAP32[$19>>2] = $22;
 $31 = ((($os)) + 20|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $$ << 3;
 $34 = (_realloc($32,$33)|0);
 $35 = ($34|0)==(0|0);
 if (!($35)) {
  HEAP32[$31>>2] = $34;
  HEAP32[$0>>2] = $$;
  $$0 = 0;
  return ($$0|0);
 }
 $36 = HEAP32[$os>>2]|0;
 $37 = ($36|0)==(0|0);
 if (!($37)) {
  _free($36);
 }
 $38 = HEAP32[$19>>2]|0;
 $39 = ($38|0)==(0|0);
 if (!($39)) {
  _free($38);
 }
 $40 = HEAP32[$31>>2]|0;
 $41 = ($40|0)==(0|0);
 if (!($41)) {
  _free($40);
 }
 _memset(($os|0),0,360)|0;
 $$0 = -1;
 return ($$0|0);
}
function _ogg_stream_flush_i($os,$og,$force,$nfill) {
 $os = $os|0;
 $og = $og|0;
 $force = $force|0;
 $nfill = $nfill|0;
 var $$ = 0, $$0 = 0, $$02 = 0, $$1 = 0, $$157 = 0, $$158 = 0, $$lcssa = 0, $$lobit = 0, $$pre = 0, $$pre38 = 0, $$pre39 = 0, $$pre40 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $acc$018 = 0, $bytes$0$lcssa = 0, $exitcond = 0, $exitcond160 = 0, $granule_pos$0$lcssa$off0 = 0, $granule_pos$0$lcssa$off16 = 0, $granule_pos$0$lcssa$off24 = 0, $granule_pos$0$lcssa$off32 = 0, $granule_pos$0$lcssa$off40 = 0, $granule_pos$0$lcssa$off48 = 0, $granule_pos$0$lcssa$off56 = 0, $granule_pos$0$lcssa$off8 = 0, $granule_pos$019$off0 = 0, $granule_pos$019$off16 = 0, $granule_pos$019$off24 = 0;
 var $granule_pos$019$off32 = 0, $granule_pos$019$off40 = 0, $granule_pos$019$off48 = 0, $granule_pos$019$off56 = 0, $granule_pos$019$off8 = 0, $granule_pos$1$off0 = 0, $granule_pos$1$off16 = 0, $granule_pos$1$off24 = 0, $granule_pos$1$off32 = 0, $granule_pos$1$off40 = 0, $granule_pos$1$off48 = 0, $granule_pos$1$off56 = 0, $granule_pos$1$off8 = 0, $granule_pos$2$off0 = 0, $granule_pos$2$off16 = 0, $granule_pos$2$off24 = 0, $granule_pos$2$off32 = 0, $granule_pos$2$off40 = 0, $granule_pos$2$off48 = 0, $granule_pos$2$off56 = 0;
 var $granule_pos$2$off8 = 0, $granule_pos$27$off0 = 0, $granule_pos$27$off16 = 0, $granule_pos$27$off24 = 0, $granule_pos$27$off32 = 0, $granule_pos$27$off40 = 0, $granule_pos$27$off48 = 0, $granule_pos$27$off56 = 0, $granule_pos$27$off8 = 0, $or$cond = 0, $or$cond159 = 0, $or$cond4 = 0, $packet_just_done$021 = 0, $packet_just_done$1 = 0, $packets_done$020 = 0, $packets_done$1 = 0, $storemerge = 0, $vals$0 = 0, $vals$1$lcssa = 0, $vals$117 = 0;
 var $vals$2 = 0, $vals$26 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($os)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(255);
 $$ = $2 ? 255 : $1;
 $3 = ($os|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[$os>>2]|0;
 $5 = ($4|0)==(0|0);
 $6 = ($$|0)==(0);
 $or$cond4 = $6 | $5;
 if ($or$cond4) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ((($os)) + 332|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 L7: do {
  if ($9) {
   $13 = ((($os)) + 16|0);
   $vals$0 = 0;
   while(1) {
    $14 = ($vals$0|0)<($$|0);
    if (!($14)) {
     $$1 = $force;$granule_pos$2$off0 = 0;$granule_pos$2$off16 = 0;$granule_pos$2$off24 = 0;$granule_pos$2$off32 = 0;$granule_pos$2$off40 = 0;$granule_pos$2$off48 = 0;$granule_pos$2$off56 = 0;$granule_pos$2$off8 = 0;$vals$2 = $vals$0;
     label = 14;
     break L7;
    }
    $15 = HEAP32[$13>>2]|0;
    $16 = (($15) + ($vals$0<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = $17 & 255;
    $19 = ($18|0)==(255);
    $20 = (($vals$0) + 1)|0;
    if ($19) {
     $vals$0 = $20;
    } else {
     $$1 = $force;$granule_pos$2$off0 = 0;$granule_pos$2$off16 = 0;$granule_pos$2$off24 = 0;$granule_pos$2$off32 = 0;$granule_pos$2$off40 = 0;$granule_pos$2$off48 = 0;$granule_pos$2$off56 = 0;$granule_pos$2$off8 = 0;$vals$2 = $20;
     label = 14;
     break;
    }
   }
  } else {
   $10 = ($$|0)>(0);
   if ($10) {
    $11 = ((($os)) + 16|0);
    $12 = ((($os)) + 20|0);
    $acc$018 = 0;$granule_pos$019$off0 = -1;$granule_pos$019$off16 = -1;$granule_pos$019$off24 = -1;$granule_pos$019$off32 = -1;$granule_pos$019$off40 = -1;$granule_pos$019$off48 = -1;$granule_pos$019$off56 = -1;$granule_pos$019$off8 = -1;$packet_just_done$021 = 0;$packets_done$020 = 0;$vals$117 = 0;
    while(1) {
     $21 = ($acc$018|0)>($nfill|0);
     $22 = ($packet_just_done$021|0)>(3);
     $or$cond = $21 & $22;
     if ($or$cond) {
      $$02 = 1;$granule_pos$0$lcssa$off0 = $granule_pos$019$off0;$granule_pos$0$lcssa$off16 = $granule_pos$019$off16;$granule_pos$0$lcssa$off24 = $granule_pos$019$off24;$granule_pos$0$lcssa$off32 = $granule_pos$019$off32;$granule_pos$0$lcssa$off40 = $granule_pos$019$off40;$granule_pos$0$lcssa$off48 = $granule_pos$019$off48;$granule_pos$0$lcssa$off56 = $granule_pos$019$off56;$granule_pos$0$lcssa$off8 = $granule_pos$019$off8;$vals$1$lcssa = $vals$117;
      break;
     }
     $23 = HEAP32[$11>>2]|0;
     $24 = (($23) + ($vals$117<<2)|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = $25 & 255;
     $27 = (($26) + ($acc$018))|0;
     $28 = ($26|0)==(255);
     if ($28) {
      $granule_pos$1$off0 = $granule_pos$019$off0;$granule_pos$1$off16 = $granule_pos$019$off16;$granule_pos$1$off24 = $granule_pos$019$off24;$granule_pos$1$off32 = $granule_pos$019$off32;$granule_pos$1$off40 = $granule_pos$019$off40;$granule_pos$1$off48 = $granule_pos$019$off48;$granule_pos$1$off56 = $granule_pos$019$off56;$granule_pos$1$off8 = $granule_pos$019$off8;$packet_just_done$1 = 0;$packets_done$1 = $packets_done$020;
     } else {
      $29 = HEAP32[$12>>2]|0;
      $30 = (($29) + ($vals$117<<3)|0);
      $31 = $30;
      $32 = $31;
      $33 = HEAP32[$32>>2]|0;
      $34 = (($31) + 4)|0;
      $35 = $34;
      $36 = HEAP32[$35>>2]|0;
      $37 = (($packets_done$020) + 1)|0;
      $38 = $33&255;
      $39 = (_bitshift64Lshr(($33|0),($36|0),8)|0);
      $40 = tempRet0;
      $41 = $39&255;
      $42 = (_bitshift64Lshr(($33|0),($36|0),16)|0);
      $43 = tempRet0;
      $44 = $42&255;
      $45 = (_bitshift64Lshr(($33|0),($36|0),24)|0);
      $46 = tempRet0;
      $47 = $45&255;
      $48 = $36&255;
      $49 = (_bitshift64Lshr(($33|0),($36|0),40)|0);
      $50 = tempRet0;
      $51 = $49&255;
      $52 = (_bitshift64Lshr(($33|0),($36|0),48)|0);
      $53 = tempRet0;
      $54 = $52&255;
      $55 = (_bitshift64Lshr(($33|0),($36|0),56)|0);
      $56 = tempRet0;
      $57 = $55&255;
      $granule_pos$1$off0 = $38;$granule_pos$1$off16 = $44;$granule_pos$1$off24 = $47;$granule_pos$1$off32 = $48;$granule_pos$1$off40 = $51;$granule_pos$1$off48 = $54;$granule_pos$1$off56 = $57;$granule_pos$1$off8 = $41;$packet_just_done$1 = $37;$packets_done$1 = $37;
     }
     $58 = (($vals$117) + 1)|0;
     $59 = ($58|0)<($$|0);
     if ($59) {
      $acc$018 = $27;$granule_pos$019$off0 = $granule_pos$1$off0;$granule_pos$019$off16 = $granule_pos$1$off16;$granule_pos$019$off24 = $granule_pos$1$off24;$granule_pos$019$off32 = $granule_pos$1$off32;$granule_pos$019$off40 = $granule_pos$1$off40;$granule_pos$019$off48 = $granule_pos$1$off48;$granule_pos$019$off56 = $granule_pos$1$off56;$granule_pos$019$off8 = $granule_pos$1$off8;$packet_just_done$021 = $packet_just_done$1;$packets_done$020 = $packets_done$1;$vals$117 = $58;
     } else {
      $$02 = $force;$granule_pos$0$lcssa$off0 = $granule_pos$1$off0;$granule_pos$0$lcssa$off16 = $granule_pos$1$off16;$granule_pos$0$lcssa$off24 = $granule_pos$1$off24;$granule_pos$0$lcssa$off32 = $granule_pos$1$off32;$granule_pos$0$lcssa$off40 = $granule_pos$1$off40;$granule_pos$0$lcssa$off48 = $granule_pos$1$off48;$granule_pos$0$lcssa$off56 = $granule_pos$1$off56;$granule_pos$0$lcssa$off8 = $granule_pos$1$off8;$vals$1$lcssa = $58;
      break;
     }
    }
    $60 = ($vals$1$lcssa|0)==(255);
    if ($60) {
     $granule_pos$27$off0 = $granule_pos$0$lcssa$off0;$granule_pos$27$off16 = $granule_pos$0$lcssa$off16;$granule_pos$27$off24 = $granule_pos$0$lcssa$off24;$granule_pos$27$off32 = $granule_pos$0$lcssa$off32;$granule_pos$27$off40 = $granule_pos$0$lcssa$off40;$granule_pos$27$off48 = $granule_pos$0$lcssa$off48;$granule_pos$27$off56 = $granule_pos$0$lcssa$off56;$granule_pos$27$off8 = $granule_pos$0$lcssa$off8;$vals$26 = 255;
    } else {
     $$1 = $$02;$granule_pos$2$off0 = $granule_pos$0$lcssa$off0;$granule_pos$2$off16 = $granule_pos$0$lcssa$off16;$granule_pos$2$off24 = $granule_pos$0$lcssa$off24;$granule_pos$2$off32 = $granule_pos$0$lcssa$off32;$granule_pos$2$off40 = $granule_pos$0$lcssa$off40;$granule_pos$2$off48 = $granule_pos$0$lcssa$off48;$granule_pos$2$off56 = $granule_pos$0$lcssa$off56;$granule_pos$2$off8 = $granule_pos$0$lcssa$off8;$vals$2 = $vals$1$lcssa;
     label = 14;
    }
   } else {
    $$1 = $force;$granule_pos$2$off0 = -1;$granule_pos$2$off16 = -1;$granule_pos$2$off24 = -1;$granule_pos$2$off32 = -1;$granule_pos$2$off40 = -1;$granule_pos$2$off48 = -1;$granule_pos$2$off56 = -1;$granule_pos$2$off8 = -1;$vals$2 = 0;
    label = 14;
   }
  }
 } while(0);
 if ((label|0) == 14) {
  $61 = ($$1|0)==(0);
  if ($61) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $granule_pos$27$off0 = $granule_pos$2$off0;$granule_pos$27$off16 = $granule_pos$2$off16;$granule_pos$27$off24 = $granule_pos$2$off24;$granule_pos$27$off32 = $granule_pos$2$off32;$granule_pos$27$off40 = $granule_pos$2$off40;$granule_pos$27$off48 = $granule_pos$2$off48;$granule_pos$27$off56 = $granule_pos$2$off56;$granule_pos$27$off8 = $granule_pos$2$off8;$vals$26 = $vals$2;
  }
 }
 $62 = ((($os)) + 40|0);
 HEAP8[$62>>0]=1399285583&255;HEAP8[$62+1>>0]=(1399285583>>8)&255;HEAP8[$62+2>>0]=(1399285583>>16)&255;HEAP8[$62+3>>0]=1399285583>>24;
 $63 = ((($os)) + 44|0);
 HEAP8[$63>>0] = 0;
 $64 = ((($os)) + 45|0);
 HEAP8[$64>>0] = 0;
 $65 = ((($os)) + 16|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$66>>2]|0;
 $68 = $67 >>> 8;
 $$lobit = $68 & 1;
 $69 = $$lobit ^ 1;
 $70 = $69 | 2;
 $$157 = $9 ? $70 : $69;
 $storemerge = $$157&255;
 HEAP8[$64>>0] = $storemerge;
 $71 = ((($os)) + 328|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($72|0)!=(0);
 $74 = ($1|0)==($vals$26|0);
 $or$cond159 = $73 & $74;
 if ($or$cond159) {
  $$158 = $9 ? $70 : $69;
  $75 = $$158 | 4;
  $76 = $75&255;
  HEAP8[$64>>0] = $76;
 }
 HEAP32[$7>>2] = 1;
 $77 = ((($os)) + 46|0);
 HEAP8[$77>>0] = $granule_pos$27$off0;
 $78 = ((($os)) + 47|0);
 HEAP8[$78>>0] = $granule_pos$27$off8;
 $79 = ((($os)) + 48|0);
 HEAP8[$79>>0] = $granule_pos$27$off16;
 $80 = ((($os)) + 49|0);
 HEAP8[$80>>0] = $granule_pos$27$off24;
 $81 = ((($os)) + 50|0);
 HEAP8[$81>>0] = $granule_pos$27$off32;
 $82 = ((($os)) + 51|0);
 HEAP8[$82>>0] = $granule_pos$27$off40;
 $83 = ((($os)) + 52|0);
 HEAP8[$83>>0] = $granule_pos$27$off48;
 $84 = ((($os)) + 53|0);
 HEAP8[$84>>0] = $granule_pos$27$off56;
 $85 = ((($os)) + 336|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = $86&255;
 $88 = ((($os)) + 54|0);
 HEAP8[$88>>0] = $87;
 $89 = $86 >>> 8;
 $90 = $89&255;
 $91 = ((($os)) + 55|0);
 HEAP8[$91>>0] = $90;
 $92 = $86 >>> 16;
 $93 = $92&255;
 $94 = ((($os)) + 56|0);
 HEAP8[$94>>0] = $93;
 $95 = $86 >>> 24;
 $96 = $95&255;
 $97 = ((($os)) + 57|0);
 HEAP8[$97>>0] = $96;
 $98 = ((($os)) + 340|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = ($99|0)==(-1);
 if ($100) {
  HEAP32[$98>>2] = 0;
  $102 = 0;
 } else {
  $102 = $99;
 }
 $101 = (($102) + 1)|0;
 HEAP32[$98>>2] = $101;
 $103 = $102&255;
 $104 = ((($os)) + 58|0);
 HEAP8[$104>>0] = $103;
 $105 = $102 >>> 8;
 $106 = $105&255;
 $107 = ((($os)) + 59|0);
 HEAP8[$107>>0] = $106;
 $108 = $102 >>> 16;
 $109 = $108&255;
 $110 = ((($os)) + 60|0);
 HEAP8[$110>>0] = $109;
 $111 = $102 >>> 24;
 $112 = $111&255;
 $113 = ((($os)) + 61|0);
 HEAP8[$113>>0] = $112;
 $114 = ((($os)) + 62|0);
 $115 = $vals$26&255;
 $116 = ((($os)) + 66|0);
 HEAP8[$114>>0]=0&255;HEAP8[$114+1>>0]=(0>>8)&255;HEAP8[$114+2>>0]=(0>>16)&255;HEAP8[$114+3>>0]=0>>24;
 HEAP8[$116>>0] = $115;
 $117 = ($vals$26|0)>(0);
 if ($117) {
  $118 = HEAP32[$66>>2]|0;
  $119 = $118&255;
  $120 = ((($os)) + 67|0);
  HEAP8[$120>>0] = $119;
  $121 = $118 & 255;
  $exitcond160 = ($vals$26|0)==(1);
  if ($exitcond160) {
   $$lcssa = $121;
  } else {
   $123 = 1;$130 = $121;
   while(1) {
    $$pre = HEAP32[$65>>2]|0;
    $122 = (($$pre) + ($123<<2)|0);
    $124 = HEAP32[$122>>2]|0;
    $125 = $124&255;
    $126 = (($123) + 27)|0;
    $127 = (((($os)) + 40|0) + ($126)|0);
    HEAP8[$127>>0] = $125;
    $128 = $124 & 255;
    $129 = (($128) + ($130))|0;
    $131 = (($123) + 1)|0;
    $exitcond = ($131|0)==($vals$26|0);
    if ($exitcond) {
     $$lcssa = $129;
     break;
    } else {
     $123 = $131;$130 = $129;
    }
   }
  }
  $$pre38 = HEAP32[$os>>2]|0;
  $$pre39 = HEAP32[$0>>2]|0;
  $$pre40 = HEAP32[$65>>2]|0;
  $138 = $$pre38;$142 = $$pre39;$144 = $$pre40;$bytes$0$lcssa = $$lcssa;
 } else {
  $138 = $4;$142 = $1;$144 = $66;$bytes$0$lcssa = 0;
 }
 HEAP32[$og>>2] = $62;
 $132 = (($vals$26) + 27)|0;
 $133 = ((($os)) + 324|0);
 HEAP32[$133>>2] = $132;
 $134 = ((($og)) + 4|0);
 HEAP32[$134>>2] = $132;
 $135 = ((($os)) + 12|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = (($138) + ($136)|0);
 $139 = ((($og)) + 8|0);
 HEAP32[$139>>2] = $137;
 $140 = ((($og)) + 12|0);
 HEAP32[$140>>2] = $bytes$0$lcssa;
 $141 = (($142) - ($vals$26))|0;
 HEAP32[$0>>2] = $141;
 $143 = (($144) + ($vals$26<<2)|0);
 $145 = $141 << 2;
 _memmove(($144|0),($143|0),($145|0))|0;
 $146 = ((($os)) + 20|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = (($147) + ($vals$26<<3)|0);
 $149 = HEAP32[$0>>2]|0;
 $150 = $149 << 3;
 _memmove(($147|0),($148|0),($150|0))|0;
 $151 = HEAP32[$135>>2]|0;
 $152 = (($151) + ($bytes$0$lcssa))|0;
 HEAP32[$135>>2] = $152;
 _ogg_page_checksum_set($og);
 $$0 = 1;
 return ($$0|0);
}
function _vorbis_analysis($vb,$op) {
 $vb = $vb|0;
 $op = $op|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vb)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($vb)) + 88|0);
 $3 = ((($1)) + 12|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
 $4 = HEAP32[$3>>2]|0;
 _oggpack_reset($4);
 $5 = ((($1)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 _oggpack_reset($6);
 $7 = ((($1)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 _oggpack_reset($8);
 $9 = ((($1)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 _oggpack_reset($10);
 $11 = ((($1)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 _oggpack_reset($12);
 $13 = ((($1)) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 _oggpack_reset($14);
 $15 = ((($1)) + 36|0);
 $16 = HEAP32[$15>>2]|0;
 _oggpack_reset($16);
 $17 = ((($1)) + 40|0);
 $18 = HEAP32[$17>>2]|0;
 _oggpack_reset($18);
 $19 = ((($1)) + 44|0);
 $20 = HEAP32[$19>>2]|0;
 _oggpack_reset($20);
 $21 = ((($1)) + 48|0);
 $22 = HEAP32[$21>>2]|0;
 _oggpack_reset($22);
 $23 = ((($1)) + 52|0);
 $24 = HEAP32[$23>>2]|0;
 _oggpack_reset($24);
 $25 = ((($1)) + 56|0);
 $26 = HEAP32[$25>>2]|0;
 _oggpack_reset($26);
 $27 = ((($1)) + 60|0);
 $28 = HEAP32[$27>>2]|0;
 _oggpack_reset($28);
 $29 = ((($1)) + 64|0);
 $30 = HEAP32[$29>>2]|0;
 _oggpack_reset($30);
 $31 = ((($1)) + 68|0);
 $32 = HEAP32[$31>>2]|0;
 _oggpack_reset($32);
 $33 = HEAP32[25664>>2]|0;
 $34 = ((($33)) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (FUNCTION_TABLE_ii[$35 & 1]($vb)|0);
 $37 = ($36|0)==(0);
 if (!($37)) {
  $$0 = $36;
  return ($$0|0);
 }
 $38 = ($op|0)==(0|0);
 if ($38) {
  $$0 = 0;
  return ($$0|0);
 }
 $39 = (_vorbis_bitrate_managed($vb)|0);
 $40 = ($39|0)==(0);
 if (!($40)) {
  $$0 = -131;
  return ($$0|0);
 }
 $41 = ((($vb)) + 4|0);
 $42 = (_oggpack_get_buffer($41)|0);
 HEAP32[$op>>2] = $42;
 $43 = (_oggpack_bytes($41)|0);
 $44 = ((($op)) + 4|0);
 HEAP32[$44>>2] = $43;
 $45 = ((($op)) + 8|0);
 HEAP32[$45>>2] = 0;
 $46 = ((($vb)) + 44|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($op)) + 12|0);
 HEAP32[$48>>2] = $47;
 $49 = ((($vb)) + 48|0);
 $50 = $49;
 $51 = $50;
 $52 = HEAP32[$51>>2]|0;
 $53 = (($50) + 4)|0;
 $54 = $53;
 $55 = HEAP32[$54>>2]|0;
 $56 = ((($op)) + 16|0);
 $57 = $56;
 $58 = $57;
 HEAP32[$58>>2] = $52;
 $59 = (($57) + 4)|0;
 $60 = $59;
 HEAP32[$60>>2] = $55;
 $61 = ((($vb)) + 56|0);
 $62 = $61;
 $63 = $62;
 $64 = HEAP32[$63>>2]|0;
 $65 = (($62) + 4)|0;
 $66 = $65;
 $67 = HEAP32[$66>>2]|0;
 $68 = ((($op)) + 24|0);
 $69 = $68;
 $70 = $69;
 HEAP32[$70>>2] = $64;
 $71 = (($69) + 4)|0;
 $72 = $71;
 HEAP32[$72>>2] = $67;
 $$0 = 0;
 return ($$0|0);
}
function _vorbis_bitrate_init($vi,$bm) {
 $vi = $vi|0;
 $bm = $bm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($vi)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 dest=$bm; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $2 = ((($1)) + 3372|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if (!($4)) {
  return;
 }
 $5 = ((($vi)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = $7 >> 1;
 $9 = ((($1)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10|0) / ($7|0))&-1;
 $12 = ((($bm)) + 24|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$bm>>2] = 1;
 $13 = ((($1)) + 3360|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (+($14|0));
 $16 = (+($8|0));
 $17 = $15 * $16;
 $18 = (+($6|0));
 $19 = $17 / $18;
 $20 = (+_rint($19));
 $21 = (~~(($20)));
 $22 = ((($bm)) + 12|0);
 HEAP32[$22>>2] = $21;
 $23 = ((($1)) + 3364|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (+($24|0));
 $26 = $25 * $16;
 $27 = $26 / $18;
 $28 = (+_rint($27));
 $29 = (~~(($28)));
 $30 = ((($bm)) + 16|0);
 HEAP32[$30>>2] = $29;
 $31 = ((($1)) + 3368|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (+($32|0));
 $34 = $33 * $16;
 $35 = $34 / $18;
 $36 = (+_rint($35));
 $37 = (~~(($36)));
 $38 = ((($bm)) + 20|0);
 HEAP32[$38>>2] = $37;
 $39 = ((($bm)) + 32|0);
 HEAPF64[$39>>3] = 7.0;
 $40 = (+($3|0));
 $41 = ((($1)) + 3376|0);
 $42 = +HEAPF64[$41>>3];
 $43 = $40 * $42;
 $44 = (~~(($43)));
 $45 = ((($bm)) + 8|0);
 HEAP32[$45>>2] = $44;
 $46 = ((($bm)) + 4|0);
 HEAP32[$46>>2] = $44;
 return;
}
function _vorbis_bitrate_clear($bm) {
 $bm = $bm|0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest=$bm; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 return;
}
function _vorbis_bitrate_managed($vb) {
 $vb = $vb|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vb)) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 104|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 80|0);
 $5 = HEAP32[$4>>2]|0;
 $not$ = ($5|0)!=(0);
 $$0 = $not$&1;
 return ($$0|0);
}
function _vorbis_bitrate_addblock($vb) {
 $vb = $vb|0;
 var $$ = 0, $$0 = 0, $$9 = 0, $$choice$7 = 0, $$lcssa = 0, $$pre = 0, $$pre68 = 0, $$pre69 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0;
 var $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $choice$03980 = 0;
 var $choice$2 = 0, $choice$3 = 0, $choice$430 = 0, $choice$5 = 0, $choice$622 = 0, $choice$7 = 0, $minsize$020 = 0, $or$cond = 0, $or$cond37 = 0, $or$cond4 = 0, $or$cond444 = 0, $or$cond5 = 0, $or$cond6 = 0, $or$cond7 = 0, $or$cond8 = 0, $slew$0 = 0.0, $slew$1 = 0.0, $this_bits$2 = 0, $this_bits$329 = 0, $this_bits$4 = 0;
 var $this_bits$521 = 0, $this_bits$6 = 0, $this_bits$7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vb)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($vb)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 104|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($5)) + 112|0);
 $11 = +HEAPF64[$10>>3];
 $12 = (+_rint($11));
 $13 = (~~(($12)));
 $14 = (((($1)) + 12|0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_oggpack_bytes($15)|0);
 $17 = $16 << 3;
 $18 = ((($vb)) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0);
 $21 = ((($5)) + 96|0);
 $22 = HEAP32[$21>>2]|0;
 if ($20) {
  $23 = ((($5)) + 100|0);
  $24 = HEAP32[$23>>2]|0;
  $120 = $22;$137 = $23;$140 = $24;
 } else {
  $25 = ((($5)) + 104|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($5)) + 100|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = Math_imul($26, $22)|0;
  $30 = Math_imul($26, $28)|0;
  $120 = $29;$137 = $27;$140 = $30;
 }
 $31 = (($9) + ($19<<2)|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 >> 1;
 $34 = ((($9)) + 3372|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (+($35|0));
 $37 = ((($9)) + 3376|0);
 $38 = +HEAPF64[$37>>3];
 $39 = $36 * $38;
 $40 = (~~(($39)));
 $41 = ((($5)) + 80|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)==(0);
 $44 = ((($5)) + 120|0);
 if ($43) {
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)==(0|0);
  if (!($46)) {
   $$0 = -1;
   return ($$0|0);
  }
  HEAP32[$44>>2] = $vb;
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$44>>2] = $vb;
 $47 = ((($5)) + 92|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)>(0);
 if ($49) {
  if ($20) {
   $59 = $48;
  } else {
   $50 = ((($5)) + 104|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = Math_imul($51, $48)|0;
   $59 = $52;
  }
  $53 = ((($9)) + 3384|0);
  $54 = +HEAPF64[$53>>3];
  $55 = 15.0 / $54;
  $56 = ((($5)) + 84|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($17) - ($59))|0;
  $60 = (($57) + ($58))|0;
  $61 = ($60|0)>($40|0);
  L17: do {
   if ($61) {
    $62 = ($13|0)>(0);
    $63 = ($17|0)>($59|0);
    $or$cond37 = $63 & $62;
    if ($or$cond37) {
     $64 = (($17) - ($59))|0;
     $65 = (($64) + ($57))|0;
     $66 = ($65|0)>($40|0);
     if ($66) {
      $choice$03980 = $13;
      while(1) {
       $67 = (($choice$03980) + -1)|0;
       $68 = (((($1)) + 12|0) + ($67<<2)|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = (_oggpack_bytes($69)|0);
       $71 = $70 << 3;
       $72 = ($choice$03980|0)>(1);
       $73 = ($71|0)>($59|0);
       $or$cond = $73 & $72;
       if (!($or$cond)) {
        $choice$2 = $67;
        break L17;
       }
       $$pre68 = HEAP32[$56>>2]|0;
       $74 = (($71) - ($59))|0;
       $75 = (($74) + ($$pre68))|0;
       $76 = ($75|0)>($40|0);
       if ($76) {
        $choice$03980 = $67;
       } else {
        $choice$2 = $67;
        break;
       }
      }
     } else {
      $choice$2 = $13;
     }
    } else {
     $choice$2 = $13;
    }
   } else {
    $77 = ($60|0)<($40|0);
    if ($77) {
     $78 = (($13) + 1)|0;
     $79 = ($78|0)<(15);
     $80 = ($17|0)<($59|0);
     $or$cond444 = $80 & $79;
     if ($or$cond444) {
      $81 = (($17) - ($59))|0;
      $82 = (($81) + ($57))|0;
      $83 = ($82|0)<($40|0);
      if ($83) {
       $85 = $78;
       while(1) {
        $84 = (((($1)) + 12|0) + ($85<<2)|0);
        $86 = HEAP32[$84>>2]|0;
        $87 = (_oggpack_bytes($86)|0);
        $88 = $87 << 3;
        $89 = (($85) + 1)|0;
        $90 = ($89|0)<(15);
        $91 = ($88|0)<($59|0);
        $or$cond4 = $91 & $90;
        if (!($or$cond4)) {
         $choice$2 = $85;
         break L17;
        }
        $$pre = HEAP32[$56>>2]|0;
        $92 = (($88) - ($59))|0;
        $93 = (($92) + ($$pre))|0;
        $94 = ($93|0)<($40|0);
        if ($94) {
         $85 = $89;
        } else {
         $choice$2 = $85;
         break;
        }
       }
      } else {
       $choice$2 = $13;
      }
     } else {
      $choice$2 = $13;
     }
    } else {
     $choice$2 = $13;
    }
   }
  } while(0);
  $95 = (+($choice$2|0));
  $96 = +HEAPF64[$10>>3];
  $97 = $95 - $96;
  $98 = (+_rint($97));
  $99 = (+($33|0));
  $100 = $98 / $99;
  $101 = ((($7)) + 8|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (+($102|0));
  $104 = $103 * $100;
  $105 = -$55;
  $106 = $104 < $105;
  $slew$0 = $106 ? $105 : $104;
  $107 = $slew$0 > $55;
  $slew$1 = $107 ? $55 : $slew$0;
  $108 = $slew$1 / $103;
  $109 = $108 * $99;
  $110 = $109 + $96;
  HEAPF64[$10>>3] = $110;
  $111 = (+_rint($110));
  $112 = (~~(($111)));
  $113 = (((($1)) + 12|0) + ($112<<2)|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (_oggpack_bytes($114)|0);
  $116 = $115 << 3;
  $$pre69 = HEAP32[$21>>2]|0;
  $117 = $$pre69;$choice$3 = $112;$this_bits$2 = $116;
 } else {
  $117 = $22;$choice$3 = $13;$this_bits$2 = $17;
 }
 $118 = ($117|0)>(0);
 $119 = ($this_bits$2|0)<($120|0);
 $or$cond5 = $119 & $118;
 L31: do {
  if ($or$cond5) {
   $121 = ((($5)) + 88|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($this_bits$2) - ($120))|0;
   $124 = (($123) + ($122))|0;
   $125 = ($124|0)<(0);
   if ($125) {
    $choice$430 = $choice$3;$this_bits$329 = $this_bits$2;
    while(1) {
     $126 = (($choice$430) + 1)|0;
     $127 = ($choice$430|0)>(13);
     if ($127) {
      $choice$5 = $126;$this_bits$4 = $this_bits$329;
      break L31;
     }
     $128 = (((($1)) + 12|0) + ($126<<2)|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = (_oggpack_bytes($129)|0);
     $131 = $130 << 3;
     $132 = HEAP32[$121>>2]|0;
     $133 = (($131) - ($120))|0;
     $134 = (($133) + ($132))|0;
     $135 = ($134|0)<(0);
     if ($135) {
      $choice$430 = $126;$this_bits$329 = $131;
     } else {
      $choice$5 = $126;$this_bits$4 = $131;
      break;
     }
    }
   } else {
    $choice$5 = $choice$3;$this_bits$4 = $this_bits$2;
   }
  } else {
   $choice$5 = $choice$3;$this_bits$4 = $this_bits$2;
  }
 } while(0);
 $136 = HEAP32[$137>>2]|0;
 $138 = ($136|0)>(0);
 $139 = ($this_bits$4|0)>($140|0);
 $or$cond6 = $139 & $138;
 L37: do {
  if ($or$cond6) {
   $141 = ((($5)) + 88|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = (($this_bits$4) - ($140))|0;
   $144 = (($143) + ($142))|0;
   $145 = HEAP32[$34>>2]|0;
   $146 = ($144|0)>($145|0);
   if ($146) {
    $choice$622 = $choice$5;$this_bits$521 = $this_bits$4;
    while(1) {
     $147 = (($choice$622) + -1)|0;
     $148 = ($choice$622|0)<(1);
     if ($148) {
      $choice$7 = $147;$this_bits$6 = $this_bits$521;
      break L37;
     }
     $149 = (((($1)) + 12|0) + ($147<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = (_oggpack_bytes($150)|0);
     $152 = $151 << 3;
     $153 = HEAP32[$141>>2]|0;
     $154 = (($152) - ($140))|0;
     $155 = (($154) + ($153))|0;
     $156 = HEAP32[$34>>2]|0;
     $157 = ($155|0)>($156|0);
     if ($157) {
      $choice$622 = $147;$this_bits$521 = $152;
     } else {
      $choice$7 = $147;$this_bits$6 = $152;
      break;
     }
    }
   } else {
    $choice$7 = $choice$5;$this_bits$6 = $this_bits$4;
   }
  } else {
   $choice$7 = $choice$5;$this_bits$6 = $this_bits$4;
  }
 } while(0);
 $158 = ($choice$7|0)<(0);
 if ($158) {
  $159 = HEAP32[$34>>2]|0;
  $160 = ((($5)) + 88|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = (($159) + ($140))|0;
  $163 = (($162) - ($161))|0;
  $164 = (($163|0) / 8)&-1;
  $165 = ((($5)) + 124|0);
  HEAP32[$165>>2] = 0;
  $166 = ((($1)) + 12|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = (_oggpack_bytes($167)|0);
  $169 = ($168|0)>($164|0);
  if ($169) {
   $170 = HEAP32[$166>>2]|0;
   $171 = $164 << 3;
   _oggpack_writetrunc($170,$171);
   $172 = HEAP32[$166>>2]|0;
   $173 = (_oggpack_bytes($172)|0);
   $174 = $173 << 3;
   $this_bits$7 = $174;
  } else {
   $this_bits$7 = $this_bits$6;
  }
 } else {
  $175 = ((($5)) + 88|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = (($120) + 7)|0;
  $178 = (($177) - ($176))|0;
  $179 = (($178|0) / 8)&-1;
  $180 = ($choice$7|0)>(14);
  $$choice$7 = $180 ? 14 : $choice$7;
  $181 = ((($5)) + 124|0);
  HEAP32[$181>>2] = $$choice$7;
  $182 = (((($1)) + 12|0) + ($$choice$7<<2)|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = (_oggpack_bytes($183)|0);
  $185 = (($179) - ($184))|0;
  $186 = ($185|0)>(0);
  $187 = HEAP32[$182>>2]|0;
  if ($186) {
   $189 = $187;$minsize$020 = $185;
   while(1) {
    $188 = (($minsize$020) + -1)|0;
    _oggpack_write($189,0,8);
    $190 = ($minsize$020|0)>(1);
    $191 = HEAP32[$182>>2]|0;
    if ($190) {
     $189 = $191;$minsize$020 = $188;
    } else {
     $$lcssa = $191;
     break;
    }
   }
  } else {
   $$lcssa = $187;
  }
  $192 = (_oggpack_bytes($$lcssa)|0);
  $193 = $192 << 3;
  $this_bits$7 = $193;
 }
 $194 = HEAP32[$21>>2]|0;
 $195 = ($194|0)>(0);
 if ($195) {
  label = 37;
 } else {
  $196 = HEAP32[$137>>2]|0;
  $197 = ($196|0)>(0);
  if ($197) {
   label = 37;
  }
 }
 do {
  if ((label|0) == 37) {
   $198 = ($140|0)>(0);
   $199 = ($this_bits$7|0)>($140|0);
   $or$cond7 = $198 & $199;
   if ($or$cond7) {
    $200 = (($this_bits$7) - ($140))|0;
    $201 = ((($5)) + 88|0);
    $202 = HEAP32[$201>>2]|0;
    $203 = (($200) + ($202))|0;
    HEAP32[$201>>2] = $203;
    break;
   }
   $204 = ($120|0)>(0);
   $205 = ($this_bits$7|0)<($120|0);
   $or$cond8 = $204 & $205;
   if ($or$cond8) {
    $206 = (($this_bits$7) - ($120))|0;
    $207 = ((($5)) + 88|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = (($206) + ($208))|0;
    HEAP32[$207>>2] = $209;
    break;
   }
   $210 = ((($5)) + 88|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = ($211|0)>($40|0);
   if ($212) {
    if ($198) {
     $213 = (($this_bits$7) - ($140))|0;
     $214 = (($211) + ($213))|0;
     $215 = ($214|0)<($40|0);
     $$ = $215 ? $40 : $214;
     HEAP32[$210>>2] = $$;
     break;
    } else {
     HEAP32[$210>>2] = $40;
     break;
    }
   } else {
    if ($204) {
     $216 = (($this_bits$7) - ($120))|0;
     $217 = (($211) + ($216))|0;
     $218 = ($217|0)>($40|0);
     $$9 = $218 ? $40 : $217;
     HEAP32[$210>>2] = $$9;
     break;
    } else {
     HEAP32[$210>>2] = $40;
     break;
    }
   }
  }
 } while(0);
 $219 = HEAP32[$47>>2]|0;
 $220 = ($219|0)>(0);
 if (!($220)) {
  $$0 = 0;
  return ($$0|0);
 }
 $221 = HEAP32[$18>>2]|0;
 $222 = ($221|0)==(0);
 if ($222) {
  $227 = $219;
 } else {
  $223 = ((($5)) + 104|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = Math_imul($224, $219)|0;
  $227 = $225;
 }
 $226 = (($this_bits$7) - ($227))|0;
 $228 = ((($5)) + 84|0);
 $229 = HEAP32[$228>>2]|0;
 $230 = (($226) + ($229))|0;
 HEAP32[$228>>2] = $230;
 $$0 = 0;
 return ($$0|0);
}
function _vorbis_bitrate_flushpacket($vd,$op) {
 $vd = $vd|0;
 $op = $op|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $choice$0 = 0, $not$$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vd)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 120|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ($op|0)==(0|0);
 if (!($5)) {
  $6 = ((($3)) + 104|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($3)) + 64|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 104|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 80|0);
  $13 = HEAP32[$12>>2]|0;
  $not$$i = ($13|0)==(0);
  if ($not$$i) {
   $choice$0 = 7;
  } else {
   $14 = ((($1)) + 124|0);
   $15 = HEAP32[$14>>2]|0;
   $choice$0 = $15;
  }
  $16 = (((($7)) + 12|0) + ($choice$0<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_oggpack_get_buffer($17)|0);
  HEAP32[$op>>2] = $18;
  $19 = HEAP32[$16>>2]|0;
  $20 = (_oggpack_bytes($19)|0);
  $21 = ((($op)) + 4|0);
  HEAP32[$21>>2] = $20;
  $22 = ((($op)) + 8|0);
  HEAP32[$22>>2] = 0;
  $23 = ((($3)) + 44|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($op)) + 12|0);
  HEAP32[$25>>2] = $24;
  $26 = ((($3)) + 48|0);
  $27 = $26;
  $28 = $27;
  $29 = HEAP32[$28>>2]|0;
  $30 = (($27) + 4)|0;
  $31 = $30;
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($op)) + 16|0);
  $34 = $33;
  $35 = $34;
  HEAP32[$35>>2] = $29;
  $36 = (($34) + 4)|0;
  $37 = $36;
  HEAP32[$37>>2] = $32;
  $38 = ((($3)) + 56|0);
  $39 = $38;
  $40 = $39;
  $41 = HEAP32[$40>>2]|0;
  $42 = (($39) + 4)|0;
  $43 = $42;
  $44 = HEAP32[$43>>2]|0;
  $45 = ((($op)) + 24|0);
  $46 = $45;
  $47 = $46;
  HEAP32[$47>>2] = $41;
  $48 = (($46) + 4)|0;
  $49 = $48;
  HEAP32[$49>>2] = $44;
 }
 HEAP32[$2>>2] = 0;
 $$0 = 1;
 return ($$0|0);
}
function _vorbis_block_init($v,$vb) {
 $v = $v|0;
 $vb = $vb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 dest=$vb; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($vb)) + 64|0);
 HEAP32[$0>>2] = $v;
 $1 = ((($vb)) + 76|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($vb)) + 68|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP32[$v>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  return 0;
 }
 $5 = (_calloc(1,72)|0);
 $6 = ((($vb)) + 104|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($5)) + 4|0);
 HEAPF32[$7>>2] = -9999.0;
 $8 = ((($vb)) + 4|0);
 $9 = ((($5)) + 12|0);
 $10 = ((($5)) + 40|0);
 $i$01 = 0;
 while(1) {
  $11 = ($i$01|0)==(7);
  if ($11) {
   HEAP32[$10>>2] = $8;
   _oggpack_writeinit($8);
   $i$01 = 8;
   continue;
  } else {
   $12 = (_calloc(1,20)|0);
   $13 = (($9) + ($i$01<<2)|0);
   HEAP32[$13>>2] = $12;
   _oggpack_writeinit($12);
   $14 = (($i$01) + 1)|0;
   $exitcond = ($14|0)==(15);
   if ($exitcond) {
    break;
   } else {
    $i$01 = $14;
    continue;
   }
  }
 }
 return 0;
}
function __vorbis_block_alloc($vb,$bytes) {
 $vb = $vb|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($bytes) + 7)|0;
 $1 = $0 & -8;
 $2 = ((($vb)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($1))|0;
 $5 = ((($vb)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)>($6|0);
 $8 = ((($vb)) + 68|0);
 $9 = HEAP32[$8>>2]|0;
 if (!($7)) {
  $21 = $9;$22 = $3;
  $20 = (($21) + ($22)|0);
  $23 = (($22) + ($1))|0;
  HEAP32[$2>>2] = $23;
  return ($20|0);
 }
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = $9;
  $12 = (_malloc(8)|0);
  $13 = ((($vb)) + 80|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($3))|0;
  HEAP32[$13>>2] = $15;
  $16 = ((($vb)) + 84|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($12)) + 4|0);
  HEAP32[$18>>2] = $17;
  HEAP32[$12>>2] = $11;
  HEAP32[$16>>2] = $12;
 }
 HEAP32[$5>>2] = $1;
 $19 = (_malloc($1)|0);
 HEAP32[$8>>2] = $19;
 HEAP32[$2>>2] = 0;
 $21 = $19;$22 = 0;
 $20 = (($21) + ($22)|0);
 $23 = (($22) + ($1))|0;
 HEAP32[$2>>2] = $23;
 return ($20|0);
}
function _vorbis_block_clear($vb) {
 $vb = $vb|0;
 var $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $reap$01$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($vb)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($vb)) + 84|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $reap$01$i = $3;
  while(1) {
   $5 = ((($reap$01$i)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = HEAP32[$reap$01$i>>2]|0;
   _free($7);
   _free($reap$01$i);
   $8 = ($6|0)==(0|0);
   if ($8) {
    break;
   } else {
    $reap$01$i = $6;
   }
  }
 }
 $9 = ((($vb)) + 80|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 $$phi$trans$insert = ((($vb)) + 68|0);
 $$pre = HEAP32[$$phi$trans$insert>>2]|0;
 if ($11) {
  $20 = $$pre;
 } else {
  $12 = ((($vb)) + 76|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($10))|0;
  $15 = (_realloc($$pre,$14)|0);
  HEAP32[$$phi$trans$insert>>2] = $15;
  $16 = HEAP32[$9>>2]|0;
  $17 = HEAP32[$12>>2]|0;
  $18 = (($17) + ($16))|0;
  HEAP32[$12>>2] = $18;
  HEAP32[$9>>2] = 0;
  $20 = $15;
 }
 $19 = ((($vb)) + 72|0);
 HEAP32[$19>>2] = 0;
 HEAP32[$2>>2] = 0;
 $21 = ($20|0)==(0|0);
 if (!($21)) {
  _free($20);
 }
 $22 = ($1|0)==(0|0);
 if ($22) {
  dest=$vb; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  return 0;
 } else {
  $i$01 = 0;
 }
 while(1) {
  $23 = (((($1)) + 12|0) + ($i$01<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  _oggpack_writeclear($24);
  $25 = ($i$01|0)==(7);
  if ($25) {
   $i$01 = 8;
   continue;
  }
  $26 = HEAP32[$23>>2]|0;
  _free($26);
  $27 = (($i$01) + 1)|0;
  $exitcond = ($27|0)==(15);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $27;
  }
 }
 _free($1);
 dest=$vb; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 return 0;
}
function _vorbis_analysis_init($v,$vi) {
 $v = $v|0;
 $vi = $vi|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__vds_shared_init($v,$vi,1)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = 1;
  return ($$0|0);
 }
 $2 = ((($v)) + 104|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__vp_global_look($vi)|0);
 $5 = ((($3)) + 60|0);
 HEAP32[$5>>2] = $4;
 $6 = (_calloc(1,180)|0);
 HEAP32[$3>>2] = $6;
 __ve_envelope_init($6,$vi);
 $7 = ((($3)) + 80|0);
 _vorbis_bitrate_init($vi,$7);
 $8 = ((($v)) + 64|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = 3;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = 0;
 $$0 = 0;
 return ($$0|0);
}
function _vorbis_dsp_clear($v) {
 $v = $v|0;
 var $$pre = 0, $$pre14$pre = 0, $$pre16 = 0, $$pre18$pre = 0, $$pre20 = 0, $$pre22$pre = 0, $$pre24 = 0, $$pre25 = 0, $$pre27$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $i$37 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ($v|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($v)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = ((($2)) + 28|0);
  $5 = HEAP32[$4>>2]|0;
  $29 = $5;
 } else {
  $29 = 0;
 }
 $6 = ((($v)) + 104|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = HEAP32[$7>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   __ve_envelope_clear($9);
   $11 = HEAP32[$7>>2]|0;
   _free($11);
  }
  $12 = ((($7)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0|0);
  if (!($14)) {
   $15 = HEAP32[$13>>2]|0;
   _mdct_clear($15);
   $16 = HEAP32[$12>>2]|0;
   $17 = HEAP32[$16>>2]|0;
   _free($17);
   $18 = HEAP32[$12>>2]|0;
   _free($18);
  }
  $19 = ((($7)) + 16|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0|0);
  if (!($21)) {
   $22 = HEAP32[$20>>2]|0;
   _mdct_clear($22);
   $23 = HEAP32[$19>>2]|0;
   $24 = HEAP32[$23>>2]|0;
   _free($24);
   $25 = HEAP32[$19>>2]|0;
   _free($25);
  }
  $26 = ((($7)) + 48|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0|0);
  if (!($28)) {
   $30 = ($29|0)==(0|0);
   if ($30) {
    $55 = $27;
   } else {
    $31 = ((($29)) + 16|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32|0)>(0);
    if ($33) {
     $34 = ((($29)) + 800|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = (25640 + ($35<<2)|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ((($37)) + 16|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = HEAP32[$27>>2]|0;
     FUNCTION_TABLE_vi[$39 & 7]($40);
     $41 = HEAP32[$31>>2]|0;
     $42 = ($41|0)>(1);
     if ($42) {
      $44 = 1;
      while(1) {
       $$pre = HEAP32[$26>>2]|0;
       $43 = (($34) + ($44<<2)|0);
       $45 = HEAP32[$43>>2]|0;
       $46 = (25640 + ($45<<2)|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = ((($47)) + 16|0);
       $49 = HEAP32[$48>>2]|0;
       $50 = (($$pre) + ($44<<2)|0);
       $51 = HEAP32[$50>>2]|0;
       FUNCTION_TABLE_vi[$49 & 7]($51);
       $52 = (($44) + 1)|0;
       $53 = HEAP32[$31>>2]|0;
       $54 = ($52|0)<($53|0);
       if ($54) {
        $44 = $52;
       } else {
        break;
       }
      }
     }
     $$pre14$pre = HEAP32[$26>>2]|0;
     $55 = $$pre14$pre;
    } else {
     $55 = $27;
    }
   }
   _free($55);
  }
  $56 = ((($7)) + 52|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($57|0)==(0|0);
  if (!($58)) {
   $59 = ($29|0)==(0|0);
   if ($59) {
    $84 = $57;
   } else {
    $60 = ((($29)) + 20|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ($61|0)>(0);
    if ($62) {
     $63 = ((($29)) + 1312|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = (25648 + ($64<<2)|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = ((($66)) + 16|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = HEAP32[$57>>2]|0;
     FUNCTION_TABLE_vi[$68 & 7]($69);
     $70 = HEAP32[$60>>2]|0;
     $71 = ($70|0)>(1);
     if ($71) {
      $73 = 1;
      while(1) {
       $$pre16 = HEAP32[$56>>2]|0;
       $72 = (($63) + ($73<<2)|0);
       $74 = HEAP32[$72>>2]|0;
       $75 = (25648 + ($74<<2)|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = ((($76)) + 16|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = (($$pre16) + ($73<<2)|0);
       $80 = HEAP32[$79>>2]|0;
       FUNCTION_TABLE_vi[$78 & 7]($80);
       $81 = (($73) + 1)|0;
       $82 = HEAP32[$60>>2]|0;
       $83 = ($81|0)<($82|0);
       if ($83) {
        $73 = $81;
       } else {
        break;
       }
      }
     }
     $$pre18$pre = HEAP32[$56>>2]|0;
     $84 = $$pre18$pre;
    } else {
     $84 = $57;
    }
   }
   _free($84);
  }
  $85 = ((($7)) + 56|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ($86|0)==(0|0);
  if (!($87)) {
   $88 = ($29|0)==(0|0);
   if ($88) {
    $99 = $86;
   } else {
    $89 = ((($29)) + 28|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = ($90|0)>(0);
    if ($91) {
     __vp_psy_clear($86);
     $92 = HEAP32[$89>>2]|0;
     $93 = ($92|0)>(1);
     if ($93) {
      $95 = 1;
      while(1) {
       $$pre20 = HEAP32[$85>>2]|0;
       $94 = (($$pre20) + (($95*52)|0)|0);
       __vp_psy_clear($94);
       $96 = (($95) + 1)|0;
       $97 = HEAP32[$89>>2]|0;
       $98 = ($96|0)<($97|0);
       if ($98) {
        $95 = $96;
       } else {
        break;
       }
      }
     }
     $$pre22$pre = HEAP32[$85>>2]|0;
     $99 = $$pre22$pre;
    } else {
     $99 = $86;
    }
   }
   _free($99);
  }
  $100 = ((($7)) + 60|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = ($101|0)==(0|0);
  if (!($102)) {
   __vp_global_free($101);
  }
  $103 = ((($7)) + 80|0);
  _vorbis_bitrate_clear($103);
  $104 = ((($7)) + 20|0);
  _drft_clear($104);
  $105 = ((($7)) + 32|0);
  _drft_clear($105);
 }
 $106 = ((($v)) + 8|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ($107|0)==(0|0);
 if (!($108)) {
  if ($3) {
   $109 = ((($2)) + 4|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = ($110|0)>(0);
   if ($111) {
    $113 = $107;$132 = $110;$i$37 = 0;
    while(1) {
     $112 = (($113) + ($i$37<<2)|0);
     $114 = HEAP32[$112>>2]|0;
     $115 = ($114|0)==(0|0);
     if ($115) {
      $118 = $132;
     } else {
      _free($114);
      $$pre25 = HEAP32[$109>>2]|0;
      $118 = $$pre25;
     }
     $116 = (($i$37) + 1)|0;
     $117 = ($116|0)<($118|0);
     if (!($117)) {
      break;
     }
     $$pre24 = HEAP32[$106>>2]|0;
     $113 = $$pre24;$132 = $118;$i$37 = $116;
    }
    $$pre27$pre = HEAP32[$106>>2]|0;
    $119 = $$pre27$pre;
   } else {
    $119 = $107;
   }
  } else {
   $119 = $107;
  }
  _free($119);
  $120 = ((($v)) + 12|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = ($121|0)==(0|0);
  if (!($122)) {
   _free($121);
  }
 }
 if ($8) {
  $123 = ((($7)) + 64|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = ($124|0)==(0|0);
  if (!($125)) {
   _free($124);
  }
  $126 = ((($7)) + 68|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = ($127|0)==(0|0);
  if (!($128)) {
   _free($127);
  }
  $129 = ((($7)) + 72|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = ($130|0)==(0|0);
  if (!($131)) {
   _free($130);
  }
  _free($7);
 }
 dest=$v; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 return;
}
function _vorbis_analysis_buffer($v,$vals) {
 $v = $v|0;
 $vals = $vals|0;
 var $$phi$trans$insert = 0, $$pre = 0, $$pre$phi8Z2D = 0, $$pre6 = 0, $$pre7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($v)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($v)) + 104|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  _free($5);
 }
 HEAP32[$4>>2] = 0;
 $7 = ((($3)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  _free($8);
 }
 HEAP32[$7>>2] = 0;
 $10 = ((($3)) + 72|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  _free($11);
 }
 HEAP32[$10>>2] = 0;
 $13 = ((($v)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + ($vals))|0;
 $16 = ((($v)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($15|0)<($17|0);
 if ($18) {
  $$phi$trans$insert = ((($1)) + 4|0);
  $$pre6 = HEAP32[$$phi$trans$insert>>2]|0;
  $32 = $$pre6;
  label = 11;
 } else {
  $19 = $vals << 1;
  $20 = (($14) + ($19))|0;
  HEAP32[$16>>2] = $20;
  $21 = ((($1)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)>(0);
  if ($23) {
   $24 = ((($v)) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[$25>>2]|0;
   $27 = $20 << 2;
   $28 = (_realloc($26,$27)|0);
   $29 = HEAP32[$24>>2]|0;
   HEAP32[$29>>2] = $28;
   $30 = HEAP32[$21>>2]|0;
   $31 = ($30|0)>(1);
   if ($31) {
    $39 = 1;
    while(1) {
     $$pre = HEAP32[$16>>2]|0;
     $37 = HEAP32[$24>>2]|0;
     $38 = (($37) + ($39<<2)|0);
     $40 = HEAP32[$38>>2]|0;
     $41 = $$pre << 2;
     $42 = (_realloc($40,$41)|0);
     $43 = HEAP32[$24>>2]|0;
     $44 = (($43) + ($39<<2)|0);
     HEAP32[$44>>2] = $42;
     $45 = (($39) + 1)|0;
     $46 = HEAP32[$21>>2]|0;
     $47 = ($45|0)<($46|0);
     if ($47) {
      $39 = $45;
     } else {
      $32 = $46;
      label = 11;
      break;
     }
    }
   } else {
    $32 = $30;
    label = 11;
   }
  }
 }
 if ((label|0) == 11) {
  $33 = ($32|0)>(0);
  if ($33) {
   $34 = ((($v)) + 8|0);
   $35 = HEAP32[$13>>2]|0;
   $36 = ((($v)) + 12|0);
   $i$11 = 0;
   while(1) {
    $48 = HEAP32[$34>>2]|0;
    $49 = (($48) + ($i$11<<2)|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (($50) + ($35<<2)|0);
    $52 = HEAP32[$36>>2]|0;
    $53 = (($52) + ($i$11<<2)|0);
    HEAP32[$53>>2] = $51;
    $54 = (($i$11) + 1)|0;
    $55 = ($54|0)<($32|0);
    if ($55) {
     $i$11 = $54;
    } else {
     $$pre$phi8Z2D = $36;
     break;
    }
   }
   $56 = HEAP32[$$pre$phi8Z2D>>2]|0;
   return ($56|0);
  }
 }
 $$pre7 = ((($v)) + 12|0);
 $$pre$phi8Z2D = $$pre7;
 $56 = HEAP32[$$pre$phi8Z2D>>2]|0;
 return ($56|0);
}
function _vorbis_analysis_wrote($v,$vals) {
 $v = $v|0;
 $vals = $vals|0;
 var $$ = 0, $$0 = 0, $$pre = 0, $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($v)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($vals|0)<(1);
 if (!($4)) {
  $48 = ((($v)) + 20|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + ($vals))|0;
  $51 = ((($v)) + 16|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($50|0)>($52|0);
  if ($53) {
   $$0 = -131;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$48>>2] = $50;
  $54 = ((($v)) + 28|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($55|0)==(0);
  if (!($56)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $57 = ((($v)) + 48|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($50) - ($58))|0;
  $60 = ((($3)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($59|0)>($61|0);
  if (!($62)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  __preextrapolate_helper($v);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = STACKTOP; STACKTOP = STACKTOP + 128|0;;
 $6 = ((($v)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  __preextrapolate_helper($v);
 }
 $9 = ((($3)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10*3)|0;
 (_vorbis_analysis_buffer($v,$11)|0);
 $12 = ((($v)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($v)) + 32|0);
 HEAP32[$14>>2] = $13;
 $15 = HEAP32[$9>>2]|0;
 $16 = ($15*3)|0;
 $17 = (($13) + ($16))|0;
 HEAP32[$12>>2] = $17;
 $18 = ((($1)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)>(0);
 if (!($20)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ((($v)) + 8|0);
 $22 = $13;$i$02 = 0;
 while(1) {
  $23 = ($22|0)>(64);
  if ($23) {
   $24 = HEAP32[$9>>2]|0;
   $25 = ($22|0)>($24|0);
   $$ = $25 ? $24 : $22;
   $26 = HEAP32[$21>>2]|0;
   $27 = (($26) + ($i$02<<2)|0);
   $28 = HEAP32[$27>>2]|0;
   $$sum = (($22) - ($$))|0;
   $29 = (($28) + ($$sum<<2)|0);
   (+_vorbis_lpc_from_data($29,$5,$$,32));
   $30 = HEAP32[$21>>2]|0;
   $31 = (($30) + ($i$02<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = HEAP32[$14>>2]|0;
   $34 = (($32) + ($33<<2)|0);
   $$sum1 = (($33) + -32)|0;
   $35 = (($32) + ($$sum1<<2)|0);
   $36 = HEAP32[$12>>2]|0;
   $37 = (($36) - ($33))|0;
   _vorbis_lpc_predict($5,$35,32,$34,$37);
  } else {
   $38 = HEAP32[$21>>2]|0;
   $39 = (($38) + ($i$02<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) + ($22<<2)|0);
   $42 = HEAP32[$12>>2]|0;
   $43 = (($42) - ($22))|0;
   $44 = $43 << 2;
   _memset(($41|0),0,($44|0))|0;
  }
  $45 = (($i$02) + 1)|0;
  $46 = HEAP32[$18>>2]|0;
  $47 = ($45|0)<($46|0);
  if (!($47)) {
   $$0 = 0;
   break;
  }
  $$pre = HEAP32[$14>>2]|0;
  $22 = $$pre;$i$02 = $45;
 }
 STACKTOP = sp;return ($$0|0);
}
function _vorbis_analysis_blockout($v,$vb) {
 $v = $v|0;
 $vb = $vb|0;
 var $$ = 0, $$0 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre10 = 0, $$pre11 = 0, $$pre12 = 0, $$pre13 = 0, $$pre15 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $i$07 = 0, $or$cond = 0, $reap$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($v)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($v)) + 104|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($v)) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($v)) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($3) + ($11<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13|0) / 2)&-1;
 $15 = (($9) - ($14))|0;
 $16 = ((($vb)) + 104|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($v)) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0);
 if ($20) {
  $$0 = 0;
  return ($$0|0);
 }
 $21 = ((($v)) + 32|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(-1);
 if ($23) {
  $$0 = 0;
  return ($$0|0);
 }
 $24 = (__ve_envelope_search($v)|0);
 $25 = ($24|0)==(-1);
 do {
  if ($25) {
   $26 = HEAP32[$21>>2]|0;
   $27 = ($26|0)==(0);
   if ($27) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $28 = ((($v)) + 44|0);
    HEAP32[$28>>2] = 0;
    $$pre$phiZ2D = $28;$41 = 0;
    break;
   }
  } else {
   $29 = HEAP32[$3>>2]|0;
   $30 = ((($3)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($29|0)==($31|0);
   $33 = ((($v)) + 44|0);
   if ($32) {
    HEAP32[$33>>2] = 0;
    $$pre$phiZ2D = $33;$41 = 0;
    break;
   } else {
    HEAP32[$33>>2] = $24;
    $$pre$phiZ2D = $33;$41 = $24;
    break;
   }
  }
 } while(0);
 $34 = HEAP32[$8>>2]|0;
 $35 = HEAP32[$10>>2]|0;
 $36 = (($3) + ($35<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($38) + ($34))|0;
 $40 = (($3) + ($41<<2)|0);
 $42 = HEAP32[$40>>2]|0;
 $43 = (($42|0) / 4)&-1;
 $44 = (($39) + ($43))|0;
 $45 = (($42|0) / 2)&-1;
 $46 = (($44) + ($45))|0;
 $47 = ((($v)) + 20|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)<($46|0);
 if ($49) {
  $$0 = 0;
  return ($$0|0);
 }
 $50 = ((($vb)) + 84|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)==(0|0);
 if (!($52)) {
  $reap$01$i = $51;
  while(1) {
   $53 = ((($reap$01$i)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = HEAP32[$reap$01$i>>2]|0;
   _free($55);
   _free($reap$01$i);
   $56 = ($54|0)==(0|0);
   if ($56) {
    break;
   } else {
    $reap$01$i = $54;
   }
  }
 }
 $57 = ((($vb)) + 80|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($58|0)==(0);
 if (!($59)) {
  $60 = ((($vb)) + 68|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($vb)) + 76|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($63) + ($58))|0;
  $65 = (_realloc($61,$64)|0);
  HEAP32[$60>>2] = $65;
  $66 = HEAP32[$57>>2]|0;
  $67 = HEAP32[$62>>2]|0;
  $68 = (($67) + ($66))|0;
  HEAP32[$62>>2] = $68;
  HEAP32[$57>>2] = 0;
 }
 $69 = ((($vb)) + 72|0);
 HEAP32[$69>>2] = 0;
 HEAP32[$50>>2] = 0;
 $70 = ((($v)) + 36|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ((($vb)) + 24|0);
 HEAP32[$72>>2] = $71;
 $73 = HEAP32[$10>>2]|0;
 $74 = ((($vb)) + 28|0);
 HEAP32[$74>>2] = $73;
 $75 = HEAP32[$$pre$phiZ2D>>2]|0;
 $76 = ((($vb)) + 32|0);
 HEAP32[$76>>2] = $75;
 $77 = ($73|0)==(0);
 do {
  if ($77) {
   $81 = (__ve_envelope_mark($v)|0);
   $82 = ($81|0)==(0);
   $83 = ((($17)) + 8|0);
   if ($82) {
    HEAP32[$83>>2] = 1;
    break;
   } else {
    HEAP32[$83>>2] = 0;
    break;
   }
  } else {
   $78 = ($71|0)==(0);
   $79 = ($75|0)==(0);
   $or$cond = $78 | $79;
   $80 = ((($17)) + 8|0);
   if ($or$cond) {
    HEAP32[$80>>2] = 0;
    break;
   } else {
    HEAP32[$80>>2] = 1;
    break;
   }
  }
 } while(0);
 $84 = ((($vb)) + 64|0);
 HEAP32[$84>>2] = $v;
 $85 = ((($v)) + 64|0);
 $86 = $85;
 $87 = $86;
 $88 = HEAP32[$87>>2]|0;
 $89 = (($86) + 4)|0;
 $90 = $89;
 $91 = HEAP32[$90>>2]|0;
 $92 = (_i64Add(($88|0),($91|0),1,0)|0);
 $93 = tempRet0;
 $94 = $85;
 $95 = $94;
 HEAP32[$95>>2] = $92;
 $96 = (($94) + 4)|0;
 $97 = $96;
 HEAP32[$97>>2] = $93;
 $98 = ((($vb)) + 56|0);
 $99 = $98;
 $100 = $99;
 HEAP32[$100>>2] = $88;
 $101 = (($99) + 4)|0;
 $102 = $101;
 HEAP32[$102>>2] = $91;
 $103 = ((($v)) + 56|0);
 $104 = $103;
 $105 = $104;
 $106 = HEAP32[$105>>2]|0;
 $107 = (($104) + 4)|0;
 $108 = $107;
 $109 = HEAP32[$108>>2]|0;
 $110 = ((($vb)) + 48|0);
 $111 = $110;
 $112 = $111;
 HEAP32[$112>>2] = $106;
 $113 = (($111) + 4)|0;
 $114 = $113;
 HEAP32[$114>>2] = $109;
 $115 = HEAP32[$10>>2]|0;
 $116 = (($3) + ($115<<2)|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = ((($vb)) + 36|0);
 HEAP32[$118>>2] = $117;
 $119 = ((($17)) + 4|0);
 $120 = +HEAPF32[$119>>2];
 $121 = +HEAPF32[$7>>2];
 $122 = $120 > $121;
 if ($122) {
  HEAPF32[$7>>2] = $120;
  $123 = $120;
 } else {
  $123 = $121;
 }
 $124 = (+__vp_ampmax_decay($123,$v));
 HEAPF32[$7>>2] = $124;
 HEAPF32[$119>>2] = $124;
 $125 = ((($1)) + 4|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = $126 << 2;
 $128 = (($127) + 7)|0;
 $129 = $128 & -8;
 $130 = HEAP32[$69>>2]|0;
 $131 = (($129) + ($130))|0;
 $132 = ((($vb)) + 76|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = ($131|0)>($133|0);
 $135 = ((($vb)) + 68|0);
 $136 = HEAP32[$135>>2]|0;
 if ($134) {
  $137 = ($136|0)==(0|0);
  if (!($137)) {
   $138 = $136;
   $139 = (_malloc(8)|0);
   $140 = HEAP32[$57>>2]|0;
   $141 = (($140) + ($130))|0;
   HEAP32[$57>>2] = $141;
   $142 = HEAP32[$50>>2]|0;
   $143 = ((($139)) + 4|0);
   HEAP32[$143>>2] = $142;
   HEAP32[$139>>2] = $138;
   HEAP32[$50>>2] = $139;
  }
  HEAP32[$132>>2] = $129;
  $144 = (_malloc($129)|0);
  HEAP32[$135>>2] = $144;
  HEAP32[$69>>2] = 0;
  $$pre = HEAP32[$125>>2]|0;
  $146 = $144;$147 = 0;$150 = $$pre;$155 = $129;
 } else {
  $146 = $136;$147 = $130;$150 = $126;$155 = $133;
 }
 $145 = (($146) + ($147)|0);
 $148 = (($147) + ($129))|0;
 HEAP32[$69>>2] = $148;
 HEAP32[$vb>>2] = $145;
 $149 = $150 << 2;
 $151 = (($149) + 7)|0;
 $152 = $151 & -8;
 $153 = (($152) + ($148))|0;
 $154 = ($153|0)>($155|0);
 if ($154) {
  $156 = ($146|0)==(0|0);
  if (!($156)) {
   $157 = $146;
   $158 = (_malloc(8)|0);
   $159 = HEAP32[$57>>2]|0;
   $160 = (($159) + ($148))|0;
   HEAP32[$57>>2] = $160;
   $161 = HEAP32[$50>>2]|0;
   $162 = ((($158)) + 4|0);
   HEAP32[$162>>2] = $161;
   HEAP32[$158>>2] = $157;
   HEAP32[$50>>2] = $158;
  }
  HEAP32[$132>>2] = $152;
  $163 = (_malloc($152)|0);
  HEAP32[$135>>2] = $163;
  HEAP32[$69>>2] = 0;
  $$pre10 = HEAP32[$125>>2]|0;
  $165 = $163;$166 = 0;$168 = $$pre10;$292 = $152;
 } else {
  $165 = $146;$166 = $148;$168 = $150;$292 = $155;
 }
 $164 = (($165) + ($166)|0);
 $167 = (($166) + ($152))|0;
 HEAP32[$69>>2] = $167;
 HEAP32[$17>>2] = $164;
 $169 = ($168|0)>(0);
 L52: do {
  if ($169) {
   $170 = ((($v)) + 8|0);
   $177 = $167;$179 = $292;$180 = $165;$i$07 = 0;
   while(1) {
    $171 = HEAP32[$118>>2]|0;
    $172 = (($171) + ($15))|0;
    $173 = $172 << 2;
    $174 = (($173) + 7)|0;
    $175 = $174 & -8;
    $176 = (($175) + ($177))|0;
    $178 = ($176|0)>($179|0);
    if ($178) {
     $181 = ($180|0)==(0|0);
     if (!($181)) {
      $182 = $180;
      $183 = (_malloc(8)|0);
      $184 = HEAP32[$57>>2]|0;
      $185 = (($184) + ($177))|0;
      HEAP32[$57>>2] = $185;
      $186 = HEAP32[$50>>2]|0;
      $187 = ((($183)) + 4|0);
      HEAP32[$187>>2] = $186;
      HEAP32[$183>>2] = $182;
      HEAP32[$50>>2] = $183;
     }
     HEAP32[$132>>2] = $175;
     $188 = (_malloc($175)|0);
     HEAP32[$135>>2] = $188;
     HEAP32[$69>>2] = 0;
     $190 = $188;$191 = 0;
    } else {
     $190 = $180;$191 = $177;
    }
    $189 = (($190) + ($191)|0);
    $192 = (($191) + ($175))|0;
    HEAP32[$69>>2] = $192;
    $193 = HEAP32[$17>>2]|0;
    $194 = (($193) + ($i$07<<2)|0);
    HEAP32[$194>>2] = $189;
    $195 = HEAP32[$17>>2]|0;
    $196 = (($195) + ($i$07<<2)|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = HEAP32[$170>>2]|0;
    $199 = (($198) + ($i$07<<2)|0);
    $200 = HEAP32[$199>>2]|0;
    _memcpy(($197|0),($200|0),($173|0))|0;
    $201 = HEAP32[$17>>2]|0;
    $202 = (($201) + ($i$07<<2)|0);
    $203 = HEAP32[$202>>2]|0;
    $204 = (($203) + ($15<<2)|0);
    $205 = HEAP32[$vb>>2]|0;
    $206 = (($205) + ($i$07<<2)|0);
    HEAP32[$206>>2] = $204;
    $207 = (($i$07) + 1)|0;
    $208 = HEAP32[$125>>2]|0;
    $209 = ($207|0)<($208|0);
    if (!($209)) {
     break L52;
    }
    $$pre11 = HEAP32[$69>>2]|0;
    $$pre12 = HEAP32[$132>>2]|0;
    $$pre13 = HEAP32[$135>>2]|0;
    $177 = $$pre11;$179 = $$pre12;$180 = $$pre13;$i$07 = $207;
   }
  }
 } while(0);
 $210 = HEAP32[$21>>2]|0;
 $211 = ($210|0)==(0);
 if (!($211)) {
  $212 = HEAP32[$8>>2]|0;
  $213 = ($212|0)<($210|0);
  if (!($213)) {
   HEAP32[$21>>2] = -1;
   $214 = ((($vb)) + 44|0);
   HEAP32[$214>>2] = 1;
   $$0 = 1;
   return ($$0|0);
  }
 }
 $215 = ((($3)) + 4|0);
 $216 = HEAP32[$215>>2]|0;
 $217 = (($216|0) / 2)&-1;
 $218 = (($44) - ($217))|0;
 $219 = ($218|0)>(0);
 if (!($219)) {
  $$0 = 1;
  return ($$0|0);
 }
 $220 = HEAP32[$5>>2]|0;
 __ve_envelope_shift($220,$218);
 $221 = HEAP32[$47>>2]|0;
 $222 = (($221) - ($218))|0;
 HEAP32[$47>>2] = $222;
 $223 = HEAP32[$125>>2]|0;
 $224 = ($223|0)>(0);
 if ($224) {
  $225 = ((($v)) + 8|0);
  $226 = HEAP32[$225>>2]|0;
  $227 = HEAP32[$226>>2]|0;
  $228 = (($227) + ($218<<2)|0);
  $229 = $222 << 2;
  _memmove(($227|0),($228|0),($229|0))|0;
  $230 = HEAP32[$125>>2]|0;
  $231 = ($230|0)>(1);
  if ($231) {
   $234 = 1;
   while(1) {
    $$pre15 = HEAP32[$47>>2]|0;
    $232 = HEAP32[$225>>2]|0;
    $233 = (($232) + ($234<<2)|0);
    $235 = HEAP32[$233>>2]|0;
    $236 = (($235) + ($218<<2)|0);
    $237 = $$pre15 << 2;
    _memmove(($235|0),($236|0),($237|0))|0;
    $238 = (($234) + 1)|0;
    $239 = HEAP32[$125>>2]|0;
    $240 = ($238|0)<($239|0);
    if ($240) {
     $234 = $238;
    } else {
     break;
    }
   }
  }
 }
 $241 = HEAP32[$10>>2]|0;
 HEAP32[$70>>2] = $241;
 $242 = HEAP32[$$pre$phiZ2D>>2]|0;
 HEAP32[$10>>2] = $242;
 HEAP32[$8>>2] = $217;
 $243 = HEAP32[$21>>2]|0;
 $244 = ($243|0)==(0);
 if ($244) {
  $278 = ($218|0)<(0);
  $279 = $278 << 31 >> 31;
  $280 = $103;
  $281 = $280;
  $282 = HEAP32[$281>>2]|0;
  $283 = (($280) + 4)|0;
  $284 = $283;
  $285 = HEAP32[$284>>2]|0;
  $286 = (_i64Add(($282|0),($285|0),($218|0),($279|0))|0);
  $287 = tempRet0;
  $288 = $103;
  $289 = $288;
  HEAP32[$289>>2] = $286;
  $290 = (($288) + 4)|0;
  $291 = $290;
  HEAP32[$291>>2] = $287;
  $$0 = 1;
  return ($$0|0);
 }
 $245 = (($243) - ($218))|0;
 $246 = ($245|0)<(1);
 $$ = $246 ? -1 : $245;
 HEAP32[$21>>2] = $$;
 $247 = ($$|0)>($217|0);
 if ($247) {
  $264 = ($218|0)<(0);
  $265 = $264 << 31 >> 31;
  $266 = $103;
  $267 = $266;
  $268 = HEAP32[$267>>2]|0;
  $269 = (($266) + 4)|0;
  $270 = $269;
  $271 = HEAP32[$270>>2]|0;
  $272 = (_i64Add(($268|0),($271|0),($218|0),($265|0))|0);
  $273 = tempRet0;
  $274 = $103;
  $275 = $274;
  HEAP32[$275>>2] = $272;
  $276 = (($274) + 4)|0;
  $277 = $276;
  HEAP32[$277>>2] = $273;
  $$0 = 1;
  return ($$0|0);
 } else {
  $248 = (($$) + ($218))|0;
  $249 = (($248) - ($217))|0;
  $250 = ($249|0)<(0);
  $251 = $250 << 31 >> 31;
  $252 = $103;
  $253 = $252;
  $254 = HEAP32[$253>>2]|0;
  $255 = (($252) + 4)|0;
  $256 = $255;
  $257 = HEAP32[$256>>2]|0;
  $258 = (_i64Add(($254|0),($257|0),($249|0),($251|0))|0);
  $259 = tempRet0;
  $260 = $103;
  $261 = $260;
  HEAP32[$261>>2] = $258;
  $262 = (($260) + 4)|0;
  $263 = $262;
  HEAP32[$263>>2] = $259;
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function __vds_shared_init($v,$vi,$encp) {
 $v = $v|0;
 $vi = $vi|0;
 $encp = $encp|0;
 var $$0 = 0, $$pre = 0, $$pre26 = 0, $$pre28 = 0, $$pre29 = 0, $$pre30 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $i$117 = 0, $i$214 = 0, $i$37 = 0, $i$45 = 0, $i$54 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($vi)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 1;
  return ($$0|0);
 }
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(1);
 if ($5) {
  $$0 = 1;
  return ($$0|0);
 }
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)<(64);
 if ($7) {
  $$0 = 1;
  return ($$0|0);
 }
 $8 = ((($1)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)<($6|0);
 if ($10) {
  $$0 = 1;
  return ($$0|0);
 }
 $11 = ((($1)) + 3656|0);
 $12 = HEAP32[$11>>2]|0;
 dest=$v; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $13 = (_calloc(1,136)|0);
 $14 = ((($v)) + 104|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($v)) + 4|0);
 HEAP32[$15>>2] = $vi;
 $16 = HEAP32[$3>>2]|0;
 $17 = (($16) + -1)|0;
 $18 = (_ov_ilog($17)|0);
 $19 = ((($13)) + 44|0);
 HEAP32[$19>>2] = $18;
 $20 = (_calloc(1,4)|0);
 $21 = ((($13)) + 12|0);
 HEAP32[$21>>2] = $20;
 $22 = (_calloc(1,4)|0);
 $23 = ((($13)) + 16|0);
 HEAP32[$23>>2] = $22;
 $24 = (_calloc(1,20)|0);
 HEAP32[$20>>2] = $24;
 $25 = (_calloc(1,20)|0);
 HEAP32[$22>>2] = $25;
 $26 = HEAP32[$1>>2]|0;
 $27 = $26 >> $12;
 _mdct_init($24,$27);
 $28 = HEAP32[$23>>2]|0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$8>>2]|0;
 $31 = $30 >> $12;
 _mdct_init($29,$31);
 $32 = HEAP32[$1>>2]|0;
 $33 = (_ov_ilog($32)|0);
 $34 = (($33) + -7)|0;
 $35 = ((($13)) + 4|0);
 HEAP32[$35>>2] = $34;
 $36 = HEAP32[$8>>2]|0;
 $37 = (_ov_ilog($36)|0);
 $38 = (($37) + -7)|0;
 $39 = ((($13)) + 8|0);
 HEAP32[$39>>2] = $38;
 $40 = ($encp|0)==(0);
 L13: do {
  if ($40) {
   $84 = ((($1)) + 2848|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ($85|0)==(0|0);
   if ($86) {
    $87 = ((($1)) + 24|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = (_calloc($88,56)|0);
    HEAP32[$84>>2] = $89;
    $90 = HEAP32[$87>>2]|0;
    $91 = ($90|0)>(0);
    if ($91) {
     $174 = $90;$i$214 = 0;
     while(1) {
      $92 = (((($1)) + 1824|0) + ($i$214<<2)|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = ($93|0)==(0|0);
      if ($94) {
       $95 = $174;
       break;
      }
      $97 = HEAP32[$84>>2]|0;
      $98 = (($97) + (($i$214*56)|0)|0);
      $99 = (_vorbis_book_init_decode($98,$93)|0);
      $100 = ($99|0)==(0);
      if (!($100)) {
       label = 20;
       break;
      }
      $101 = HEAP32[$92>>2]|0;
      _vorbis_staticbook_destroy($101);
      HEAP32[$92>>2] = 0;
      $102 = (($i$214) + 1)|0;
      $103 = HEAP32[$87>>2]|0;
      $104 = ($102|0)<($103|0);
      if ($104) {
       $174 = $103;$i$214 = $102;
      } else {
       break L13;
      }
     }
     if ((label|0) == 20) {
      $$pre29 = HEAP32[$87>>2]|0;
      $95 = $$pre29;
     }
     $96 = ($95|0)>(0);
     if ($96) {
      $175 = $95;$i$54 = 0;
      while(1) {
       $168 = (((($1)) + 1824|0) + ($i$54<<2)|0);
       $169 = HEAP32[$168>>2]|0;
       $170 = ($169|0)==(0|0);
       if ($170) {
        $173 = $175;
       } else {
        _vorbis_staticbook_destroy($169);
        HEAP32[$168>>2] = 0;
        $$pre30 = HEAP32[$87>>2]|0;
        $173 = $$pre30;
       }
       $171 = (($i$54) + 1)|0;
       $172 = ($171|0)<($173|0);
       if ($172) {
        $175 = $173;$i$54 = $171;
       } else {
        break;
       }
      }
     }
     _vorbis_dsp_clear($v);
     $$0 = -1;
     return ($$0|0);
    }
   }
  } else {
   $41 = ((($13)) + 20|0);
   $42 = HEAP32[$1>>2]|0;
   _drft_init($41,$42);
   $43 = ((($13)) + 32|0);
   $44 = HEAP32[$8>>2]|0;
   _drft_init($43,$44);
   $45 = ((($1)) + 2848|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==(0|0);
   if ($47) {
    $48 = ((($1)) + 24|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = (_calloc($49,56)|0);
    HEAP32[$45>>2] = $50;
    $51 = HEAP32[$48>>2]|0;
    $52 = ($51|0)>(0);
    if ($52) {
     $53 = ((($1)) + 1824|0);
     $54 = HEAP32[$53>>2]|0;
     (_vorbis_book_init_encode($50,$54)|0);
     $55 = HEAP32[$48>>2]|0;
     $56 = ($55|0)>(1);
     if ($56) {
      $58 = 1;
      while(1) {
       $$pre = HEAP32[$45>>2]|0;
       $57 = (($$pre) + (($58*56)|0)|0);
       $59 = (((($1)) + 1824|0) + ($58<<2)|0);
       $60 = HEAP32[$59>>2]|0;
       (_vorbis_book_init_encode($57,$60)|0);
       $61 = (($58) + 1)|0;
       $62 = HEAP32[$48>>2]|0;
       $63 = ($61|0)<($62|0);
       if ($63) {
        $58 = $61;
       } else {
        break;
       }
      }
     }
    }
   }
   $64 = ((($1)) + 28|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (_calloc($65,52)|0);
   $67 = ((($13)) + 56|0);
   HEAP32[$67>>2] = $66;
   $68 = HEAP32[$64>>2]|0;
   $69 = ($68|0)>(0);
   L38: do {
    if ($69) {
     $70 = ((($1)) + 2868|0);
     $71 = ((($vi)) + 8|0);
     $73 = $66;$i$117 = 0;
     while(1) {
      $72 = (($73) + (($i$117*52)|0)|0);
      $74 = (((($1)) + 2852|0) + ($i$117<<2)|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = HEAP32[$75>>2]|0;
      $77 = (($1) + ($76<<2)|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = (($78|0) / 2)&-1;
      $80 = HEAP32[$71>>2]|0;
      __vp_psy_init($72,$75,$70,$79,$80);
      $81 = (($i$117) + 1)|0;
      $82 = HEAP32[$64>>2]|0;
      $83 = ($81|0)<($82|0);
      if (!($83)) {
       break L38;
      }
      $$pre26 = HEAP32[$67>>2]|0;
      $73 = $$pre26;$i$117 = $81;
     }
    }
   } while(0);
   HEAP32[$v>>2] = 1;
  }
 } while(0);
 $105 = HEAP32[$8>>2]|0;
 $106 = ((($v)) + 16|0);
 HEAP32[$106>>2] = $105;
 $107 = ((($vi)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = $108 << 2;
 $110 = (_malloc($109)|0);
 $111 = ((($v)) + 8|0);
 HEAP32[$111>>2] = $110;
 $112 = (_malloc($109)|0);
 $113 = ((($v)) + 12|0);
 HEAP32[$113>>2] = $112;
 $114 = ($108|0)>(0);
 if ($114) {
  $115 = (_calloc($105,4)|0);
  HEAP32[$110>>2] = $115;
  $116 = ($108|0)>(1);
  if ($116) {
   $119 = 1;
   while(1) {
    $$pre28 = HEAP32[$111>>2]|0;
    $117 = (_calloc($105,4)|0);
    $118 = (($$pre28) + ($119<<2)|0);
    HEAP32[$118>>2] = $117;
    $120 = (($119) + 1)|0;
    $121 = ($120|0)<($108|0);
    if ($121) {
     $119 = $120;
    } else {
     break;
    }
   }
  }
 }
 $122 = ((($v)) + 36|0);
 HEAP32[$122>>2] = 0;
 $123 = ((($v)) + 40|0);
 HEAP32[$123>>2] = 0;
 $124 = HEAP32[$8>>2]|0;
 $125 = (($124|0) / 2)&-1;
 $126 = ((($v)) + 48|0);
 HEAP32[$126>>2] = $125;
 $127 = ((($v)) + 20|0);
 HEAP32[$127>>2] = $125;
 $128 = ((($1)) + 16|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = (_calloc($129,4)|0);
 $131 = ((($13)) + 48|0);
 HEAP32[$131>>2] = $130;
 $132 = ((($1)) + 20|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = (_calloc($133,4)|0);
 $135 = ((($13)) + 52|0);
 HEAP32[$135>>2] = $134;
 $136 = HEAP32[$128>>2]|0;
 $137 = ($136|0)>(0);
 if ($137) {
  $i$37 = 0;
  while(1) {
   $140 = (((($1)) + 800|0) + ($i$37<<2)|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = (25640 + ($141<<2)|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = ((($143)) + 8|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = (((($1)) + 1056|0) + ($i$37<<2)|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = (FUNCTION_TABLE_iii[$145 & 15]($v,$147)|0);
   $149 = HEAP32[$131>>2]|0;
   $150 = (($149) + ($i$37<<2)|0);
   HEAP32[$150>>2] = $148;
   $151 = (($i$37) + 1)|0;
   $152 = HEAP32[$128>>2]|0;
   $153 = ($151|0)<($152|0);
   if ($153) {
    $i$37 = $151;
   } else {
    break;
   }
  }
 }
 $138 = HEAP32[$132>>2]|0;
 $139 = ($138|0)>(0);
 if ($139) {
  $i$45 = 0;
 } else {
  $$0 = 0;
  return ($$0|0);
 }
 while(1) {
  $154 = (((($1)) + 1312|0) + ($i$45<<2)|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = (25648 + ($155<<2)|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = ((($157)) + 8|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = (((($1)) + 1568|0) + ($i$45<<2)|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = (FUNCTION_TABLE_iii[$159 & 15]($v,$161)|0);
  $163 = HEAP32[$135>>2]|0;
  $164 = (($163) + ($i$45<<2)|0);
  HEAP32[$164>>2] = $162;
  $165 = (($i$45) + 1)|0;
  $166 = HEAP32[$132>>2]|0;
  $167 = ($165|0)<($166|0);
  if ($167) {
   $i$45 = $165;
  } else {
   $$0 = 0;
   break;
  }
 }
 return ($$0|0);
}
function __preextrapolate_helper($v) {
 $v = $v|0;
 var $$alloca_mul = 0, $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$08 = 0, $j$03 = 0, $j$14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp;
 $1 = ((($v)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 << 2;
 $$alloca_mul = $3;
 $4 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
 $5 = ((($v)) + 28|0);
 HEAP32[$5>>2] = 1;
 $6 = ((($v)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($2) - ($7))|0;
 $9 = ($8|0)>(32);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = ((($v)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)>(0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = ((($v)) + 8|0);
 $16 = $2;$i$08 = 0;
 while(1) {
  $17 = ($16|0)>(0);
  if ($17) {
   $18 = HEAP32[$15>>2]|0;
   $19 = (($18) + ($i$08<<2)|0);
   $20 = HEAP32[$19>>2]|0;
   $j$03 = 0;
   while(1) {
    $21 = $j$03 ^ -1;
    $22 = (($16) + ($21))|0;
    $23 = (($20) + ($22<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (($4) + ($j$03<<2)|0);
    HEAP32[$25>>2] = $24;
    $26 = (($j$03) + 1)|0;
    $27 = ($16|0)>($26|0);
    if ($27) {
     $j$03 = $26;
    } else {
     break;
    }
   }
  }
  $28 = HEAP32[$6>>2]|0;
  $29 = (($16) - ($28))|0;
  (+_vorbis_lpc_from_data($4,$0,$29,16));
  $30 = HEAP32[$1>>2]|0;
  $31 = HEAP32[$6>>2]|0;
  $$sum = (($30) - ($31))|0;
  $32 = (($4) + ($$sum<<2)|0);
  $$sum1 = (($$sum) + -16)|0;
  $33 = (($4) + ($$sum1<<2)|0);
  _vorbis_lpc_predict($0,$33,16,$32,$31);
  $34 = HEAP32[$1>>2]|0;
  $35 = ($34|0)>(0);
  if ($35) {
   $36 = HEAP32[$15>>2]|0;
   $37 = (($36) + ($i$08<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $j$14 = 0;
   while(1) {
    $39 = (($4) + ($j$14<<2)|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = $j$14 ^ -1;
    $42 = (($34) + ($41))|0;
    $43 = (($38) + ($42<<2)|0);
    HEAP32[$43>>2] = $40;
    $44 = (($j$14) + 1)|0;
    $45 = ($34|0)>($44|0);
    if ($45) {
     $j$14 = $44;
    } else {
     break;
    }
   }
  }
  $46 = (($i$08) + 1)|0;
  $47 = HEAP32[$10>>2]|0;
  $48 = ((($47)) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($46|0)<($49|0);
  if ($50) {
   $16 = $34;$i$08 = $46;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _vorbis_staticbook_pack($c,$opb) {
 $c = $c|0;
 $opb = $opb|0;
 var $$0 = 0, $$lcssa = 0, $$pre = 0, $$pre49$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count$0$lcssa = 0, $count$08 = 0, $count$16 = 0, $count$2 = 0, $exitcond = 0, $exitcond45 = 0, $i$0$lcssa = 0, $i$029 = 0, $i$1$lcssa = 0, $i$19 = 0;
 var $i$2$lcssa = 0, $i$222 = 0, $i$316 = 0, $i$419 = 0, $i$54 = 0, $ispos = 0, $j$05 = 0, $neg = 0, $quantvals$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _oggpack_write($opb,5653314,24);
 $0 = HEAP32[$c>>2]|0;
 _oggpack_write($opb,$0,16);
 $1 = ((($c)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 _oggpack_write($opb,$2,24);
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)>(1);
 L1: do {
  if ($4) {
   $5 = ((($c)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $$pre = HEAP8[$6>>0]|0;
   $7 = $$pre;$i$029 = 1;
   while(1) {
    $8 = ($7<<24>>24)==(0);
    if ($8) {
     $i$0$lcssa = $i$029;
     break L1;
    }
    $9 = (($6) + ($i$029)|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)<($7<<24>>24);
    if ($11) {
     $i$0$lcssa = $i$029;
     break L1;
    }
    $12 = (($i$029) + 1)|0;
    $13 = ($12|0)<($3|0);
    if ($13) {
     $7 = $10;$i$029 = $12;
    } else {
     $i$0$lcssa = $12;
     break;
    }
   }
  } else {
   $i$0$lcssa = 1;
  }
 } while(0);
 $14 = ($i$0$lcssa|0)==($3|0);
 L8: do {
  if ($14) {
   _oggpack_write($opb,1,1);
   $15 = ((($c)) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = HEAP8[$16>>0]|0;
   $18 = $17 << 24 >> 24;
   $19 = (($18) + -1)|0;
   _oggpack_write($opb,$19,5);
   $20 = HEAP32[$1>>2]|0;
   $21 = ($20|0)>(1);
   if ($21) {
    $105 = $20;$count$08 = 0;$i$19 = 1;
    while(1) {
     $22 = HEAP32[$15>>2]|0;
     $23 = (($22) + ($i$19)|0);
     $24 = HEAP8[$23>>0]|0;
     $25 = (($i$19) + -1)|0;
     $26 = (($22) + ($25)|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = ($24<<24>>24)>($27<<24>>24);
     if ($28) {
      $29 = $27 << 24 >> 24;
      $30 = $24 << 24 >> 24;
      $33 = $105;$count$16 = $count$08;$j$05 = $29;
      while(1) {
       $31 = (($i$19) - ($count$16))|0;
       $32 = (($33) - ($count$16))|0;
       $34 = (_ov_ilog($32)|0);
       _oggpack_write($opb,$31,$34);
       $35 = (($j$05) + 1)|0;
       $exitcond45 = ($35|0)==($30|0);
       $$pre49$pre = HEAP32[$1>>2]|0;
       if ($exitcond45) {
        $38 = $$pre49$pre;$count$2 = $i$19;
        break;
       } else {
        $33 = $$pre49$pre;$count$16 = $i$19;$j$05 = $35;
       }
      }
     } else {
      $38 = $105;$count$2 = $count$08;
     }
     $36 = (($i$19) + 1)|0;
     $37 = ($36|0)<($38|0);
     if ($37) {
      $105 = $38;$count$08 = $count$2;$i$19 = $36;
     } else {
      $$lcssa = $38;$count$0$lcssa = $count$2;$i$1$lcssa = $36;
      break;
     }
    }
   } else {
    $$lcssa = $20;$count$0$lcssa = 0;$i$1$lcssa = 1;
   }
   $39 = (($i$1$lcssa) - ($count$0$lcssa))|0;
   $40 = (($$lcssa) - ($count$0$lcssa))|0;
   $41 = (_ov_ilog($40)|0);
   _oggpack_write($opb,$39,$41);
  } else {
   _oggpack_write($opb,0,1);
   $42 = HEAP32[$1>>2]|0;
   $43 = ($42|0)>(0);
   L20: do {
    if ($43) {
     $44 = ((($c)) + 8|0);
     $45 = HEAP32[$44>>2]|0;
     $i$222 = 0;
     while(1) {
      $46 = (($45) + ($i$222)|0);
      $47 = HEAP8[$46>>0]|0;
      $48 = ($47<<24>>24)==(0);
      if ($48) {
       $i$2$lcssa = $i$222;
       break L20;
      }
      $49 = (($i$222) + 1)|0;
      $50 = ($49|0)<($42|0);
      if ($50) {
       $i$222 = $49;
      } else {
       $i$2$lcssa = $49;
       break;
      }
     }
    } else {
     $i$2$lcssa = 0;
    }
   } while(0);
   $51 = ($i$2$lcssa|0)==($42|0);
   if ($51) {
    _oggpack_write($opb,0,1);
    $52 = HEAP32[$1>>2]|0;
    $53 = ($52|0)>(0);
    if (!($53)) {
     break;
    }
    $54 = ((($c)) + 8|0);
    $i$316 = 0;
    while(1) {
     $55 = HEAP32[$54>>2]|0;
     $56 = (($55) + ($i$316)|0);
     $57 = HEAP8[$56>>0]|0;
     $58 = $57 << 24 >> 24;
     $59 = (($58) + -1)|0;
     _oggpack_write($opb,$59,5);
     $60 = (($i$316) + 1)|0;
     $61 = HEAP32[$1>>2]|0;
     $62 = ($60|0)<($61|0);
     if ($62) {
      $i$316 = $60;
     } else {
      break L8;
     }
    }
   }
   _oggpack_write($opb,1,1);
   $63 = HEAP32[$1>>2]|0;
   $64 = ($63|0)>(0);
   if ($64) {
    $65 = ((($c)) + 8|0);
    $i$419 = 0;
    while(1) {
     $66 = HEAP32[$65>>2]|0;
     $67 = (($66) + ($i$419)|0);
     $68 = HEAP8[$67>>0]|0;
     $69 = ($68<<24>>24)==(0);
     if ($69) {
      _oggpack_write($opb,0,1);
     } else {
      _oggpack_write($opb,1,1);
      $70 = HEAP32[$65>>2]|0;
      $71 = (($70) + ($i$419)|0);
      $72 = HEAP8[$71>>0]|0;
      $73 = $72 << 24 >> 24;
      $74 = (($73) + -1)|0;
      _oggpack_write($opb,$74,5);
     }
     $75 = (($i$419) + 1)|0;
     $76 = HEAP32[$1>>2]|0;
     $77 = ($75|0)<($76|0);
     if ($77) {
      $i$419 = $75;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 $78 = ((($c)) + 12|0);
 $79 = HEAP32[$78>>2]|0;
 _oggpack_write($opb,$79,4);
 $80 = HEAP32[$78>>2]|0;
 if ((($80|0) == 2) | (($80|0) == 1)) {
  label = 28;
 } else if (!((($80|0) == 0))) {
  $$0 = -1;
  return ($$0|0);
 }
 do {
  if ((label|0) == 28) {
   $81 = ((($c)) + 32|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ($82|0)==(0|0);
   if ($83) {
    $$0 = -1;
    return ($$0|0);
   }
   $84 = ((($c)) + 16|0);
   $85 = HEAP32[$84>>2]|0;
   _oggpack_write($opb,$85,32);
   $86 = ((($c)) + 20|0);
   $87 = HEAP32[$86>>2]|0;
   _oggpack_write($opb,$87,32);
   $88 = ((($c)) + 24|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = (($89) + -1)|0;
   _oggpack_write($opb,$90,4);
   $91 = ((($c)) + 28|0);
   $92 = HEAP32[$91>>2]|0;
   _oggpack_write($opb,$92,1);
   $93 = HEAP32[$78>>2]|0;
   if ((($93|0) == 1)) {
    $94 = (__book_maptype1_quantvals($c)|0);
    $quantvals$0 = $94;
   } else if ((($93|0) == 2)) {
    $95 = HEAP32[$1>>2]|0;
    $96 = HEAP32[$c>>2]|0;
    $97 = Math_imul($96, $95)|0;
    $quantvals$0 = $97;
   } else {
    break;
   }
   $98 = ($quantvals$0|0)>(0);
   if ($98) {
    $i$54 = 0;
    while(1) {
     $99 = HEAP32[$81>>2]|0;
     $100 = (($99) + ($i$54<<2)|0);
     $101 = HEAP32[$100>>2]|0;
     $ispos = ($101|0)>(-1);
     $neg = (0 - ($101))|0;
     $102 = $ispos ? $101 : $neg;
     $103 = HEAP32[$88>>2]|0;
     _oggpack_write($opb,$102,$103);
     $104 = (($i$54) + 1)|0;
     $exitcond = ($104|0)==($quantvals$0|0);
     if ($exitcond) {
      break;
     } else {
      $i$54 = $104;
     }
    }
   }
  }
 } while(0);
 $$0 = 0;
 return ($$0|0);
}
function _vorbis_book_encode($book,$a,$b) {
 $book = $book|0;
 $a = $a|0;
 $b = $b|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($a|0)<(0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($book)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>($a|0);
 if (!($5)) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ((($book)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($a<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($2)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($a)|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13 << 24 >> 24;
 _oggpack_write($b,$9,$14);
 $15 = HEAP32[$1>>2]|0;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + ($a)|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19 << 24 >> 24;
 $$0 = $20;
 return ($$0|0);
}
function _vorbis_book_decode($book,$b) {
 $book = $book|0;
 $b = $b|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($book)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  $$0 = -1;
  return ($$0|0);
 }
 $3 = (_decode_packed_entry_number($book,$b)|0);
 $4 = ($3|0)>(-1);
 if (!($4)) {
  $$0 = -1;
  return ($$0|0);
 }
 $5 = ((($book)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($3<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $$0 = $8;
 return ($$0|0);
}
function _vorbis_book_decodevs_add($book,$a,$b,$n) {
 $book = $book|0;
 $a = $a|0;
 $b = $b|0;
 $n = $n|0;
 var $$0 = 0, $$alloca_mul = 0, $$not = 0, $$not10 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $brmerge = 0, $exitcond = 0, $i$06 = 0, $i$14$us = 0, $j$03$us = 0;
 var $o$05$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($book)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP32[$book>>2]|0;
 $4 = (($n|0) / ($3|0))&-1;
 $5 = $4 << 2;
 $$alloca_mul = $5;
 $6 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
 $7 = ($4|0)>(0);
 L4: do {
  if ($7) {
   $8 = ((($book)) + 16|0);
   $i$06 = 0;
   while(1) {
    $22 = (_decode_packed_entry_number($book,$b)|0);
    $23 = ($22|0)==(-1);
    if ($23) {
     $$0 = -1;
     break;
    }
    $24 = HEAP32[$8>>2]|0;
    $25 = HEAP32[$book>>2]|0;
    $26 = Math_imul($25, $22)|0;
    $27 = (($24) + ($26<<2)|0);
    $28 = (($6) + ($i$06<<2)|0);
    HEAP32[$28>>2] = $27;
    $29 = (($i$06) + 1)|0;
    $30 = ($29|0)<($4|0);
    if ($30) {
     $i$06 = $29;
    } else {
     $9 = $25;
     break L4;
    }
   }
   STACKTOP = sp;return ($$0|0);
  } else {
   $9 = $3;
  }
 } while(0);
 $$not = ($9|0)<(1);
 $$not10 = $7 ^ 1;
 $brmerge = $$not | $$not10;
 if ($brmerge) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $i$14$us = 0;$o$05$us = 0;
 }
 while(1) {
  $j$03$us = 0;
  while(1) {
   $13 = (($6) + ($j$03$us<<2)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + ($i$14$us<<2)|0);
   $16 = +HEAPF32[$15>>2];
   $17 = (($j$03$us) + ($o$05$us))|0;
   $18 = (($a) + ($17<<2)|0);
   $19 = +HEAPF32[$18>>2];
   $20 = $19 + $16;
   HEAPF32[$18>>2] = $20;
   $21 = (($j$03$us) + 1)|0;
   $exitcond = ($21|0)==($4|0);
   if ($exitcond) {
    break;
   } else {
    $j$03$us = $21;
   }
  }
  $10 = (($i$14$us) + 1)|0;
  $11 = (($o$05$us) + ($4))|0;
  $12 = ($10|0)<($9|0);
  if ($12) {
   $i$14$us = $10;$o$05$us = $11;
  } else {
   $$0 = 0;
   break;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vorbis_book_decodev_add($book,$a,$b,$n) {
 $book = $book|0;
 $a = $a|0;
 $b = $b|0;
 $n = $n|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa134 = 0, $$lcssa135 = 0, $$lcssa136 = 0, $$lcssa137 = 0, $$lcssa138 = 0, $$lcssa139 = 0, $$lcssa140 = 0, $$lcssa142 = 0, $$lcssa143 = 0, $$lcssa144 = 0, $$lcssa145 = 0, $$lcssa146 = 0, $$lcssa147 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0;
 var $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, $i$036 = 0, $i$1$lcssa = 0, $i$134 = 0, $i$2$ph116 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $i$7 = 0, $i$8 = 0, $i$9 = 0;
 var $j$035 = 0, $j$1 = 0, $j$2 = 0, $j$3 = 0, $j$4 = 0, $j$5 = 0, $j$6 = 0, $j$7 = 0, $smax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($book)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = HEAP32[$book>>2]|0;
 $4 = ($3|0)>(8);
 if ($4) {
  $7 = ($n|0)>(0);
  if (!($7)) {
   $$0 = 0;
   return ($$0|0);
  }
  $8 = ((($book)) + 16|0);
  $i$036 = 0;
  while(1) {
   $11 = (_decode_packed_entry_number($book,$b)|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    $$0 = -1;
    label = 29;
    break;
   }
   $13 = HEAP32[$8>>2]|0;
   $14 = HEAP32[$book>>2]|0;
   $15 = Math_imul($14, $11)|0;
   $16 = ($14|0)>(0);
   if ($16) {
    $17 = ($14|0)>(1);
    $smax = $17 ? $14 : 1;
    $i$134 = $i$036;$j$035 = 0;
    while(1) {
     $18 = (($j$035) + 1)|0;
     $$sum7 = (($j$035) + ($15))|0;
     $19 = (($13) + ($$sum7<<2)|0);
     $20 = +HEAPF32[$19>>2];
     $21 = (($i$134) + 1)|0;
     $22 = (($a) + ($i$134<<2)|0);
     $23 = +HEAPF32[$22>>2];
     $24 = $23 + $20;
     HEAPF32[$22>>2] = $24;
     $25 = ($18|0)<($14|0);
     if ($25) {
      $i$134 = $21;$j$035 = $18;
     } else {
      break;
     }
    }
    $9 = (($i$036) + ($smax))|0;
    $i$1$lcssa = $9;
   } else {
    $i$1$lcssa = $i$036;
   }
   $10 = ($i$1$lcssa|0)<($n|0);
   if ($10) {
    $i$036 = $i$1$lcssa;
   } else {
    $$0 = 0;
    label = 29;
    break;
   }
  }
  if ((label|0) == 29) {
   return ($$0|0);
  }
 }
 $5 = ((($book)) + 16|0);
 $6 = ($n|0)>(0);
 if ($6) {
  $i$2$ph116 = 0;
 } else {
  $$0 = 0;
  return ($$0|0);
 }
 L24: while(1) {
  L26: while(1) {
   $102 = (_decode_packed_entry_number($book,$b)|0);
   $103 = ($102|0)==(-1);
   if ($103) {
    $$0 = -1;
    label = 29;
    break L24;
   }
   $104 = HEAP32[$5>>2]|0;
   $105 = HEAP32[$book>>2]|0;
   switch ($105|0) {
   case 4:  {
    $$lcssa138 = $102;$$lcssa145 = $104;
    label = 19;
    break L26;
    break;
   }
   case 3:  {
    $$lcssa139 = $102;$$lcssa146 = $104;
    label = 21;
    break L26;
    break;
   }
   case 7:  {
    $$lcssa135 = $102;$$lcssa142 = $104;
    label = 13;
    break L26;
    break;
   }
   case 6:  {
    $$lcssa136 = $102;$$lcssa143 = $104;
    label = 15;
    break L26;
    break;
   }
   case 8:  {
    $$lcssa = $104;$$lcssa134 = $102;
    label = 12;
    break L26;
    break;
   }
   case 5:  {
    $$lcssa137 = $102;$$lcssa144 = $104;
    label = 17;
    break L26;
    break;
   }
   case 1:  {
    $93 = $102;$95 = $104;$i$9 = $i$2$ph116;$j$7 = 0;
    break L26;
    break;
   }
   case 2:  {
    $$lcssa140 = $102;$$lcssa147 = $104;
    label = 23;
    break L26;
    break;
   }
   default: {
   }
   }
  }
  if ((label|0) == 12) {
   label = 0;
   $26 = $$lcssa134 << 3;
   $27 = (($$lcssa) + ($26<<2)|0);
   $28 = +HEAPF32[$27>>2];
   $29 = (($i$2$ph116) + 1)|0;
   $30 = (($a) + ($i$2$ph116<<2)|0);
   $31 = +HEAPF32[$30>>2];
   $32 = $31 + $28;
   HEAPF32[$30>>2] = $32;
   $35 = $26;$37 = $$lcssa;$i$3 = $29;$j$1 = 1;
   label = 14;
  }
  else if ((label|0) == 13) {
   label = 0;
   $33 = ($$lcssa135*7)|0;
   $35 = $33;$37 = $$lcssa142;$i$3 = $i$2$ph116;$j$1 = 0;
   label = 14;
  }
  else if ((label|0) == 15) {
   label = 0;
   $43 = ($$lcssa136*6)|0;
   $45 = $43;$47 = $$lcssa143;$i$4 = $i$2$ph116;$j$2 = 0;
   label = 16;
  }
  else if ((label|0) == 17) {
   label = 0;
   $53 = ($$lcssa137*5)|0;
   $55 = $53;$57 = $$lcssa144;$i$5 = $i$2$ph116;$j$3 = 0;
   label = 18;
  }
  else if ((label|0) == 19) {
   label = 0;
   $63 = $$lcssa138 << 2;
   $65 = $63;$67 = $$lcssa145;$i$6 = $i$2$ph116;$j$4 = 0;
   label = 20;
  }
  else if ((label|0) == 21) {
   label = 0;
   $73 = ($$lcssa139*3)|0;
   $75 = $73;$77 = $$lcssa146;$i$7 = $i$2$ph116;$j$5 = 0;
   label = 22;
  }
  else if ((label|0) == 23) {
   label = 0;
   $83 = $$lcssa140 << 1;
   $85 = $83;$87 = $$lcssa147;$i$8 = $i$2$ph116;$j$6 = 0;
   label = 24;
  }
  if ((label|0) == 14) {
   label = 0;
   $34 = (($j$1) + 1)|0;
   $$sum6 = (($j$1) + ($35))|0;
   $36 = (($37) + ($$sum6<<2)|0);
   $38 = +HEAPF32[$36>>2];
   $39 = (($i$3) + 1)|0;
   $40 = (($a) + ($i$3<<2)|0);
   $41 = +HEAPF32[$40>>2];
   $42 = $41 + $38;
   HEAPF32[$40>>2] = $42;
   $45 = $35;$47 = $37;$i$4 = $39;$j$2 = $34;
   label = 16;
  }
  if ((label|0) == 16) {
   label = 0;
   $44 = (($j$2) + 1)|0;
   $$sum5 = (($j$2) + ($45))|0;
   $46 = (($47) + ($$sum5<<2)|0);
   $48 = +HEAPF32[$46>>2];
   $49 = (($i$4) + 1)|0;
   $50 = (($a) + ($i$4<<2)|0);
   $51 = +HEAPF32[$50>>2];
   $52 = $51 + $48;
   HEAPF32[$50>>2] = $52;
   $55 = $45;$57 = $47;$i$5 = $49;$j$3 = $44;
   label = 18;
  }
  if ((label|0) == 18) {
   label = 0;
   $54 = (($j$3) + 1)|0;
   $$sum4 = (($j$3) + ($55))|0;
   $56 = (($57) + ($$sum4<<2)|0);
   $58 = +HEAPF32[$56>>2];
   $59 = (($i$5) + 1)|0;
   $60 = (($a) + ($i$5<<2)|0);
   $61 = +HEAPF32[$60>>2];
   $62 = $61 + $58;
   HEAPF32[$60>>2] = $62;
   $65 = $55;$67 = $57;$i$6 = $59;$j$4 = $54;
   label = 20;
  }
  if ((label|0) == 20) {
   label = 0;
   $64 = (($j$4) + 1)|0;
   $$sum3 = (($j$4) + ($65))|0;
   $66 = (($67) + ($$sum3<<2)|0);
   $68 = +HEAPF32[$66>>2];
   $69 = (($i$6) + 1)|0;
   $70 = (($a) + ($i$6<<2)|0);
   $71 = +HEAPF32[$70>>2];
   $72 = $71 + $68;
   HEAPF32[$70>>2] = $72;
   $75 = $65;$77 = $67;$i$7 = $69;$j$5 = $64;
   label = 22;
  }
  if ((label|0) == 22) {
   label = 0;
   $74 = (($j$5) + 1)|0;
   $$sum2 = (($j$5) + ($75))|0;
   $76 = (($77) + ($$sum2<<2)|0);
   $78 = +HEAPF32[$76>>2];
   $79 = (($i$7) + 1)|0;
   $80 = (($a) + ($i$7<<2)|0);
   $81 = +HEAPF32[$80>>2];
   $82 = $81 + $78;
   HEAPF32[$80>>2] = $82;
   $85 = $75;$87 = $77;$i$8 = $79;$j$6 = $74;
   label = 24;
  }
  if ((label|0) == 24) {
   label = 0;
   $84 = (($j$6) + 1)|0;
   $$sum1 = (($j$6) + ($85))|0;
   $86 = (($87) + ($$sum1<<2)|0);
   $88 = +HEAPF32[$86>>2];
   $89 = (($i$8) + 1)|0;
   $90 = (($a) + ($i$8<<2)|0);
   $91 = +HEAPF32[$90>>2];
   $92 = $91 + $88;
   HEAPF32[$90>>2] = $92;
   $93 = $85;$95 = $87;$i$9 = $89;$j$7 = $84;
  }
  $$sum = (($j$7) + ($93))|0;
  $94 = (($95) + ($$sum<<2)|0);
  $96 = +HEAPF32[$94>>2];
  $97 = (($i$9) + 1)|0;
  $98 = (($a) + ($i$9<<2)|0);
  $99 = +HEAPF32[$98>>2];
  $100 = $99 + $96;
  HEAPF32[$98>>2] = $100;
  $101 = ($97|0)<($n|0);
  if ($101) {
   $i$2$ph116 = $97;
  } else {
   $$0 = 0;
   label = 29;
   break;
  }
 }
 if ((label|0) == 29) {
  return ($$0|0);
 }
 return (0)|0;
}
function _vorbis_book_decodevv_add($book,$a,$offset,$ch,$b,$n) {
 $book = $book|0;
 $a = $a|0;
 $offset = $offset|0;
 $ch = $ch|0;
 $b = $b|0;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$i$1 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chptr$07 = 0, $chptr$1$lcssa = 0, $chptr$14 = 0, $i$06 = 0, $i$1$lcssa = 0, $i$13 = 0, $j$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($book)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = (($offset|0) / ($ch|0))&-1;
 $4 = (($n) + ($offset))|0;
 $5 = (($4|0) / ($ch|0))&-1;
 $6 = ($3|0)<($5|0);
 if (!($6)) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ((($book)) + 16|0);
 $chptr$07 = 0;$i$06 = $3;
 while(1) {
  $9 = (_decode_packed_entry_number($book,$b)|0);
  $10 = ($9|0)==(-1);
  if ($10) {
   $$0 = -1;
   label = 8;
   break;
  }
  $11 = HEAP32[$7>>2]|0;
  $12 = HEAP32[$book>>2]|0;
  $13 = Math_imul($12, $9)|0;
  $14 = ($12|0)>(0);
  if ($14) {
   $chptr$14 = $chptr$07;$i$13 = $i$06;$j$02 = 0;
   while(1) {
    $$sum = (($j$02) + ($13))|0;
    $15 = (($11) + ($$sum<<2)|0);
    $16 = +HEAPF32[$15>>2];
    $17 = (($chptr$14) + 1)|0;
    $18 = (($a) + ($chptr$14<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($19) + ($i$13<<2)|0);
    $21 = +HEAPF32[$20>>2];
    $22 = $21 + $16;
    HEAPF32[$20>>2] = $22;
    $23 = ($17|0)==($ch|0);
    $24 = $23&1;
    $$i$1 = (($24) + ($i$13))|0;
    $$ = $23 ? 0 : $17;
    $25 = (($j$02) + 1)|0;
    $26 = ($25|0)<($12|0);
    if ($26) {
     $chptr$14 = $$;$i$13 = $$i$1;$j$02 = $25;
    } else {
     $chptr$1$lcssa = $$;$i$1$lcssa = $$i$1;
     break;
    }
   }
  } else {
   $chptr$1$lcssa = $chptr$07;$i$1$lcssa = $i$06;
  }
  $8 = ($i$1$lcssa|0)<($5|0);
  if ($8) {
   $chptr$07 = $chptr$1$lcssa;$i$06 = $i$1$lcssa;
  } else {
   $$0 = 0;
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  return ($$0|0);
 }
 return (0)|0;
}
function _decode_packed_entry_number($book,$b) {
 $book = $book|0;
 $b = $b|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0;
 var $9 = 0, $hi$0 = 0, $hi$11 = 0, $lo$0 = 0, $lo$1$lcssa = 0, $lo$12 = 0, $lok$0$lcssa = 0, $read$0$lcssa = 0, $read$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($book)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($book)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_oggpack_look($b,$3)|0);
 $5 = ($4|0)>(-1);
 do {
  if ($5) {
   $6 = ((($book)) + 32|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($7) + ($4<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)<(0);
   if ($10) {
    $11 = $9 >>> 15;
    $12 = $11 & 32767;
    $13 = ((($book)) + 8|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $9 & 32767;
    $16 = (($14) - ($15))|0;
    $hi$0 = $16;$lo$0 = $12;
    break;
   }
   $17 = (($9) + -1)|0;
   $18 = ((($book)) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + ($17)|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   _oggpack_adv($b,$22);
   $$0 = $17;
   return ($$0|0);
  } else {
   $23 = ((($book)) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $hi$0 = $24;$lo$0 = 0;
  }
 } while(0);
 $25 = (_oggpack_look($b,$1)|0);
 $26 = ($25|0)<(0);
 $27 = ($1|0)>(1);
 $28 = $26 & $27;
 if ($28) {
  $read$03 = $1;
  while(1) {
   $29 = (($read$03) + -1)|0;
   $30 = (_oggpack_look($b,$29)|0);
   $31 = ($30|0)<(0);
   $32 = ($29|0)>(1);
   $33 = $31 & $32;
   if ($33) {
    $read$03 = $29;
   } else {
    $$lcssa = $31;$lok$0$lcssa = $30;$read$0$lcssa = $29;
    break;
   }
  }
 } else {
  $$lcssa = $26;$lok$0$lcssa = $25;$read$0$lcssa = $1;
 }
 if ($$lcssa) {
  $$0 = -1;
  return ($$0|0);
 }
 $34 = $lok$0$lcssa >>> 16;
 $35 = $lok$0$lcssa << 16;
 $36 = $34 | $35;
 $37 = $36 >>> 8;
 $38 = $37 & 16711935;
 $39 = $36 << 8;
 $40 = $39 & -16711936;
 $41 = $38 | $40;
 $42 = $41 >>> 4;
 $43 = $42 & 252645135;
 $44 = $41 << 4;
 $45 = $44 & -252645136;
 $46 = $43 | $45;
 $47 = $46 >>> 2;
 $48 = $47 & 858993459;
 $49 = $46 << 2;
 $50 = $49 & -858993460;
 $51 = $48 | $50;
 $52 = $51 >>> 1;
 $53 = $52 & 1431655765;
 $54 = $51 << 1;
 $55 = $54 & -1431655766;
 $56 = $53 | $55;
 $57 = (($hi$0) - ($lo$0))|0;
 $58 = ($57|0)>(1);
 if ($58) {
  $59 = ((($book)) + 20|0);
  $60 = HEAP32[$59>>2]|0;
  $62 = $57;$hi$11 = $hi$0;$lo$12 = $lo$0;
  while(1) {
   $61 = $62 >> 1;
   $63 = (($61) + ($lo$12))|0;
   $64 = (($60) + ($63<<2)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ($65>>>0)>($56>>>0);
   $67 = $66 ? 0 : $61;
   $68 = (($67) + ($lo$12))|0;
   $69 = $66 ? $61 : 0;
   $70 = (($hi$11) - ($69))|0;
   $71 = (($70) - ($68))|0;
   $72 = ($71|0)>(1);
   if ($72) {
    $62 = $71;$hi$11 = $70;$lo$12 = $68;
   } else {
    $lo$1$lcssa = $68;
    break;
   }
  }
 } else {
  $lo$1$lcssa = $lo$0;
 }
 $73 = ((($book)) + 28|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($74) + ($lo$1$lcssa)|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = $76 << 24 >> 24;
 $78 = ($77|0)>($read$0$lcssa|0);
 if ($78) {
  _oggpack_adv($b,$read$0$lcssa);
  $$0 = -1;
  return ($$0|0);
 } else {
  _oggpack_adv($b,$77);
  $$0 = $lo$1$lcssa;
  return ($$0|0);
 }
 return (0)|0;
}
function __ve_envelope_init($e,$vi) {
 $e = $e|0;
 $vi = $vi|0;
 var $$lcssa = 0.0, $$phi$trans$insert = 0, $$phi$trans$insert8 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre9 = 0.0, $$promoted = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0;
 var $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0;
 var $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond4 = 0, $exitcond5 = 0, $i$03 = 0, $i$11 = 0, $j$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vi)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($vi)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($e)) + 4|0);
 HEAP32[$4>>2] = 128;
 $5 = ((($e)) + 8|0);
 HEAP32[$5>>2] = 64;
 $6 = ((($1)) + 2932|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($e)) + 12|0);
 HEAP32[$8>>2] = $7;
 HEAP32[$e>>2] = $3;
 $9 = ((($e)) + 164|0);
 HEAP32[$9>>2] = 128;
 $10 = ((($1)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11|0) / 2)&-1;
 $13 = ((($e)) + 176|0);
 HEAP32[$13>>2] = $12;
 $14 = (_calloc(128,4)|0);
 $15 = ((($e)) + 36|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($e)) + 16|0);
 _mdct_init($16,128);
 $17 = HEAP32[$15>>2]|0;
 $i$03 = 0;
 while(1) {
  $18 = (+($i$03|0));
  $19 = $18 * 0.024736950028266088;
  $20 = (+Math_sin((+$19)));
  $21 = $20;
  $22 = (($17) + ($i$03<<2)|0);
  $23 = $21 * $21;
  HEAPF32[$22>>2] = $23;
  $24 = (($i$03) + 1)|0;
  $exitcond5 = ($24|0)==(128);
  if ($exitcond5) {
   break;
  } else {
   $i$03 = $24;
  }
 }
 $25 = ((($e)) + 40|0);
 HEAP32[$25>>2] = 2;
 $26 = ((($e)) + 44|0);
 HEAP32[$26>>2] = 4;
 $27 = ((($e)) + 56|0);
 HEAP32[$27>>2] = 4;
 $28 = ((($e)) + 60|0);
 HEAP32[$28>>2] = 5;
 $29 = ((($e)) + 72|0);
 HEAP32[$29>>2] = 6;
 $30 = ((($e)) + 76|0);
 HEAP32[$30>>2] = 6;
 $31 = ((($e)) + 88|0);
 HEAP32[$31>>2] = 9;
 $32 = ((($e)) + 92|0);
 HEAP32[$32>>2] = 8;
 $33 = ((($e)) + 104|0);
 HEAP32[$33>>2] = 13;
 $34 = ((($e)) + 108|0);
 HEAP32[$34>>2] = 8;
 $35 = ((($e)) + 120|0);
 HEAP32[$35>>2] = 17;
 $36 = ((($e)) + 124|0);
 HEAP32[$36>>2] = 8;
 $37 = ((($e)) + 136|0);
 HEAP32[$37>>2] = 22;
 $38 = ((($e)) + 140|0);
 HEAP32[$38>>2] = 8;
 $40 = 4;$j$02 = 0;
 while(1) {
  $39 = $40 << 2;
  $41 = (_malloc($39)|0);
  $42 = (((((($e)) + 40|0) + ($j$02<<4)|0)) + 8|0);
  HEAP32[$42>>2] = $41;
  $43 = ($40|0)>(0);
  if ($43) {
   $44 = (+($40|0));
   $45 = (((((($e)) + 40|0) + ($j$02<<4)|0)) + 12|0);
   $$promoted = +HEAPF32[$45>>2];
   $54 = $$promoted;$i$11 = 0;
   while(1) {
    $46 = (+($i$11|0));
    $47 = $46 + 0.5;
    $48 = $47 / $44;
    $49 = $48 * 3.1415926535897931;
    $50 = (+Math_sin((+$49)));
    $51 = $50;
    $52 = (($41) + ($i$11<<2)|0);
    HEAPF32[$52>>2] = $51;
    $53 = $54 + $51;
    $55 = (($i$11) + 1)|0;
    $exitcond = ($55|0)==($40|0);
    if ($exitcond) {
     $$lcssa = $53;
     break;
    } else {
     $54 = $53;$i$11 = $55;
    }
   }
   HEAPF32[$45>>2] = $$lcssa;
   $$pre$phiZ2D = $45;$57 = $$lcssa;
  } else {
   $$phi$trans$insert8 = (((((($e)) + 40|0) + ($j$02<<4)|0)) + 12|0);
   $$pre9 = +HEAPF32[$$phi$trans$insert8>>2];
   $$pre$phiZ2D = $$phi$trans$insert8;$57 = $$pre9;
  }
  $56 = 1.0 / $57;
  HEAPF32[$$pre$phiZ2D>>2] = $56;
  $58 = (($j$02) + 1)|0;
  $exitcond4 = ($58|0)==(7);
  if ($exitcond4) {
   break;
  }
  $$phi$trans$insert = (((((($e)) + 40|0) + ($58<<4)|0)) + 4|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $40 = $$pre;$j$02 = $58;
 }
 $59 = ($3*7)|0;
 $60 = (_calloc($59,144)|0);
 $61 = ((($e)) + 152|0);
 HEAP32[$61>>2] = $60;
 $62 = HEAP32[$9>>2]|0;
 $63 = (_calloc($62,4)|0);
 $64 = ((($e)) + 160|0);
 HEAP32[$64>>2] = $63;
 return;
}
function __ve_envelope_clear($e) {
 $e = $e|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($e)) + 16|0);
 _mdct_clear($0);
 $1 = ((($e)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 _free($2);
 $3 = ((($e)) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 $5 = ((($e)) + 80|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = ((($e)) + 96|0);
 $8 = HEAP32[$7>>2]|0;
 _free($8);
 $9 = ((($e)) + 112|0);
 $10 = HEAP32[$9>>2]|0;
 _free($10);
 $11 = ((($e)) + 128|0);
 $12 = HEAP32[$11>>2]|0;
 _free($12);
 $13 = ((($e)) + 144|0);
 $14 = HEAP32[$13>>2]|0;
 _free($14);
 $15 = ((($e)) + 36|0);
 $16 = HEAP32[$15>>2]|0;
 _free($16);
 $17 = ((($e)) + 152|0);
 $18 = HEAP32[$17>>2]|0;
 _free($18);
 $19 = ((($e)) + 160|0);
 $20 = HEAP32[$19>>2]|0;
 _free($20);
 _memset(($e|0),0,180)|0;
 return;
}
function __ve_envelope_search($v) {
 $v = $v|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $i$08 = 0, $j$011 = 0, $j$14 = 0, $j$14$lcssa23 = 0, $or$cond = 0, $ret$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($v)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 2868|0);
 $5 = ((($v)) + 104|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 168|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($7)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9|0) / ($11|0))&-1;
 $13 = ((($v)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14|0) / ($11|0))&-1;
 $16 = (($15) + -4)|0;
 $17 = ($12|0)<(0);
 $$ = $17 ? 0 : $12;
 $18 = (($15) + 2)|0;
 $19 = ((($7)) + 164|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($18|0)>($20|0);
 if ($21) {
  HEAP32[$19>>2] = $18;
  $22 = ((($7)) + 160|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $18 << 2;
  $25 = (_realloc($23,$24)|0);
  HEAP32[$22>>2] = $25;
 }
 $26 = ($$|0)<($16|0);
 if ($26) {
  $27 = ((($7)) + 156|0);
  $28 = ((($7)) + 160|0);
  $29 = ((($v)) + 8|0);
  $30 = ((($7)) + 40|0);
  $31 = ((($7)) + 152|0);
  $j$011 = $$;
  while(1) {
   $32 = HEAP32[$27>>2]|0;
   $33 = (($32) + 1)|0;
   $34 = ($32|0)>(23);
   $$1 = $34 ? 24 : $33;
   HEAP32[$27>>2] = $$1;
   $35 = HEAP32[$7>>2]|0;
   $36 = ($35|0)>(0);
   if ($36) {
    $i$08 = 0;$ret$07 = 0;
    while(1) {
     $40 = HEAP32[$29>>2]|0;
     $41 = (($40) + ($i$08<<2)|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = HEAP32[$10>>2]|0;
     $44 = Math_imul($43, $j$011)|0;
     $45 = (($42) + ($44<<2)|0);
     $46 = HEAP32[$31>>2]|0;
     $47 = ($i$08*7)|0;
     $48 = (($46) + (($47*144)|0)|0);
     $49 = (__ve_amp($7,$4,$45,$30,$48)|0);
     $50 = $49 | $ret$07;
     $51 = (($i$08) + 1)|0;
     $52 = HEAP32[$7>>2]|0;
     $53 = ($51|0)<($52|0);
     if ($53) {
      $i$08 = $51;$ret$07 = $50;
     } else {
      $$lcssa = $50;
      break;
     }
    }
    $54 = (($j$011) + 2)|0;
    $55 = HEAP32[$28>>2]|0;
    $56 = (($55) + ($54<<2)|0);
    HEAP32[$56>>2] = 0;
    $57 = $$lcssa & 1;
    $58 = ($57|0)==(0);
    if (!($58)) {
     $59 = (($55) + ($j$011<<2)|0);
     HEAP32[$59>>2] = 1;
     $60 = (($j$011) + 1)|0;
     $61 = (($55) + ($60<<2)|0);
     HEAP32[$61>>2] = 1;
    }
    $62 = $$lcssa & 2;
    $63 = ($62|0)==(0);
    if (!($63)) {
     $64 = (($55) + ($j$011<<2)|0);
     HEAP32[$64>>2] = 1;
     $65 = ($j$011|0)>(0);
     if ($65) {
      $66 = (($j$011) + -1)|0;
      $67 = (($55) + ($66<<2)|0);
      HEAP32[$67>>2] = 1;
     }
    }
    $68 = $$lcssa & 4;
    $69 = ($68|0)==(0);
    if (!($69)) {
     HEAP32[$27>>2] = -1;
    }
   } else {
    $37 = (($j$011) + 2)|0;
    $38 = HEAP32[$28>>2]|0;
    $39 = (($38) + ($37<<2)|0);
    HEAP32[$39>>2] = 0;
   }
   $70 = (($j$011) + 1)|0;
   $exitcond = ($70|0)==($16|0);
   if ($exitcond) {
    break;
   } else {
    $j$011 = $70;
   }
  }
 }
 $71 = HEAP32[$10>>2]|0;
 $72 = Math_imul($71, $16)|0;
 HEAP32[$8>>2] = $72;
 $73 = ((($v)) + 48|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ((($v)) + 40|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = (($3) + ($76<<2)|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = (($78|0) / 4)&-1;
 $80 = (($79) + ($74))|0;
 $81 = ((($3)) + 4|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = (($82|0) / 2)&-1;
 $84 = (($80) + ($83))|0;
 $85 = HEAP32[$3>>2]|0;
 $86 = (($85|0) / 4)&-1;
 $87 = (($84) + ($86))|0;
 $88 = ((($7)) + 176|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = (($72) - ($71))|0;
 $91 = ($89|0)<($90|0);
 if (!($91)) {
  $$0 = -1;
  return ($$0|0);
 }
 $92 = ((($7)) + 160|0);
 $j$14 = $89;
 while(1) {
  $95 = ($j$14|0)<($87|0);
  if (!($95)) {
   $$0 = 1;
   label = 22;
   break;
  }
  HEAP32[$88>>2] = $j$14;
  $96 = (($j$14|0) / ($71|0))&-1;
  $97 = HEAP32[$92>>2]|0;
  $98 = (($97) + ($96<<2)|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = ($99|0)!=(0);
  $101 = ($j$14|0)>($74|0);
  $or$cond = $101 & $100;
  $93 = (($71) + ($j$14))|0;
  if ($or$cond) {
   $j$14$lcssa23 = $j$14;
   label = 21;
   break;
  }
  $94 = ($93|0)<($90|0);
  if ($94) {
   $j$14 = $93;
  } else {
   $$0 = -1;
   label = 22;
   break;
  }
 }
 if ((label|0) == 21) {
  $102 = ((($7)) + 172|0);
  HEAP32[$102>>2] = $j$14$lcssa23;
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 22) {
  return ($$0|0);
 }
 return (0)|0;
}
function __ve_envelope_mark($v) {
 $v = $v|0;
 var $$0 = 0, $$pn = 0, $$pn1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $beginW$0 = 0, $endW$0 = 0, $i$02 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($v)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($v)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($v)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($v)) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($6) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12|0) / 4)&-1;
 $14 = (($8) - ($13))|0;
 $15 = (($13) + ($8))|0;
 $16 = ($10|0)==(0);
 if ($16) {
  $27 = HEAP32[$6>>2]|0;
  $28 = (($27|0) / 4)&-1;
  $$pn = $28;$$pn1 = $28;
 } else {
  $17 = ((($v)) + 36|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($6) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20|0) / 4)&-1;
  $22 = ((($v)) + 44|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($6) + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25|0) / 4)&-1;
  $$pn = $26;$$pn1 = $21;
 }
 $beginW$0 = (($14) - ($$pn1))|0;
 $endW$0 = (($15) + ($$pn))|0;
 $29 = ((($2)) + 172|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)>=($beginW$0|0);
 $32 = ($30|0)<($endW$0|0);
 $or$cond = $31 & $32;
 if ($or$cond) {
  $$0 = 1;
  return ($$0|0);
 }
 $33 = ((($2)) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($beginW$0|0) / ($34|0))&-1;
 $36 = (($endW$0|0) / ($34|0))&-1;
 $37 = ($35|0)<($36|0);
 if (!($37)) {
  $$0 = 0;
  return ($$0|0);
 }
 $38 = ((($2)) + 160|0);
 $39 = HEAP32[$38>>2]|0;
 $i$02 = $35;
 while(1) {
  $42 = (($39) + ($i$02<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)==(0);
  $40 = (($i$02) + 1)|0;
  if (!($44)) {
   $$0 = 1;
   label = 9;
   break;
  }
  $41 = ($40|0)<($36|0);
  if ($41) {
   $i$02 = $40;
  } else {
   $$0 = 0;
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  return ($$0|0);
 }
 return (0)|0;
}
function __ve_envelope_shift($e,$shift) {
 $e = $e|0;
 $shift = $shift|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($e)) + 168|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($e)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1|0) / ($3|0))&-1;
 $5 = (($4) + 2)|0;
 $6 = (($shift|0) / ($3|0))&-1;
 $7 = ((($e)) + 160|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($6<<2)|0);
 $10 = (($5) - ($6))|0;
 $11 = $10 << 2;
 _memmove(($8|0),($9|0),($11|0))|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($12) - ($shift))|0;
 HEAP32[$0>>2] = $13;
 $14 = ((($e)) + 172|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)>(-1);
 if (!($16)) {
  $18 = ((($e)) + 176|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) - ($shift))|0;
  HEAP32[$18>>2] = $20;
  return;
 }
 $17 = (($15) - ($shift))|0;
 HEAP32[$14>>2] = $17;
 $18 = ((($e)) + 176|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) - ($shift))|0;
 HEAP32[$18>>2] = $20;
 return;
}
function __ve_amp($ve,$gi,$data,$bands,$filters) {
 $ve = $ve|0;
 $gi = $gi|0;
 $data = $data|0;
 $bands = $bands|0;
 $filters = $filters|0;
 var $$ = 0, $$2 = 0, $$3 = 0, $$3$us = 0, $$3$v = 0, $$3$v$us = 0, $$4 = 0.0, $$4$us = 0.0, $$5$us = 0, $$5$v$us = 0, $$6 = 0, $$6$us = 0, $$alloca_mul = 0, $$in724 = 0.0, $$lcssa48 = 0.0, $$phi$trans$insert = 0, $$pre = 0.0, $$pre$phiZ2D = 0, $$premin$0$us = 0.0, $$premin$0$us$lcssa = 0.0;
 var $$v = 0.0, $$v8 = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0;
 var $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0, $131 = 0;
 var $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0.0, $171 = 0, $172 = 0.0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0;
 var $187 = 0.0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0;
 var $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0;
 var $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $acc$0$lcssa = 0.0, $acc$0$lcssa$us = 0.0, $acc$010 = 0.0, $acc$010$us = 0.0, $exitcond = 0, $exitcond34 = 0, $exitcond35 = 0;
 var $exitcond36 = 0, $i$028 = 0, $i$125 = 0, $i$211 = 0, $i$211$us = 0, $i$313$us = 0, $j$021 = 0, $j$021$us = 0, $p$112$us = 0, $penalty$0 = 0.0, $penalty$1 = 0.0, $premax$014$us = 0.0, $premin$015$us = 0.0, $ret$0$lcssa = 0, $ret$023 = 0, $ret$023$us = 0, $ret$1 = 0, $ret$1$us = 0, $ret$2 = 0, $ret$2$us = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ve)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($ve)) + 12|0);
 $3 = +HEAPF32[$2>>2];
 $4 = $1 << 2;
 $$alloca_mul = $4;
 $5 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
 $6 = ((($ve)) + 156|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(5);
 $9 = (($7|0) / 2)&-1;
 $$ = $8 ? $9 : 2;
 $10 = ((($gi)) + 60|0);
 $11 = +HEAPF32[$10>>2];
 $12 = (($9) + -2)|0;
 $13 = (+($12|0));
 $14 = $11 - $13;
 $15 = $14 < 0.0;
 $penalty$0 = $15 ? 0.0 : $14;
 $16 = $penalty$0 > $11;
 $penalty$1 = $16 ? $11 : $penalty$0;
 $17 = ($1|0)>(0);
 if ($17) {
  $18 = ((($ve)) + 36|0);
  $19 = HEAP32[$18>>2]|0;
  $i$028 = 0;
  while(1) {
   $20 = (($data) + ($i$028<<2)|0);
   $21 = +HEAPF32[$20>>2];
   $22 = (($19) + ($i$028<<2)|0);
   $23 = +HEAPF32[$22>>2];
   $24 = $23 * $21;
   $25 = (($5) + ($i$028<<2)|0);
   HEAPF32[$25>>2] = $24;
   $26 = (($i$028) + 1)|0;
   $exitcond34 = ($26|0)==($1|0);
   if ($exitcond34) {
    break;
   } else {
    $i$028 = $26;
   }
  }
 }
 $27 = ((($ve)) + 16|0);
 _mdct_forward($27,$5,$5);
 $28 = +HEAPF32[$5>>2];
 $29 = $28 * $28;
 $30 = $29;
 $31 = ((($5)) + 4|0);
 $32 = +HEAPF32[$31>>2];
 $33 = $32;
 $34 = $33 * $33;
 $35 = $34 * 0.69999999999999996;
 $36 = $35 + $30;
 $37 = ((($5)) + 8|0);
 $38 = +HEAPF32[$37>>2];
 $39 = $38;
 $40 = $39 * $39;
 $41 = $40 * 0.20000000000000001;
 $42 = $36 + $41;
 $43 = $42;
 $44 = ((($filters)) + 140|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(0);
 if ($46) {
  $47 = ((($filters)) + 136|0);
  $48 = +HEAPF32[$47>>2];
  $49 = $48 + $43;
  $50 = ((($filters)) + 132|0);
  HEAPF32[$50>>2] = $49;
  HEAPF32[$47>>2] = $43;
  $$pre$phiZ2D = $50;$60 = $49;
 } else {
  $51 = ((($filters)) + 132|0);
  $52 = +HEAPF32[$51>>2];
  $53 = $52 + $43;
  HEAPF32[$51>>2] = $53;
  $54 = ((($filters)) + 136|0);
  $55 = +HEAPF32[$54>>2];
  $56 = $55 + $43;
  HEAPF32[$54>>2] = $56;
  $$pre$phiZ2D = $51;$60 = $53;
 }
 $57 = (((($filters)) + 72|0) + ($45<<2)|0);
 $58 = +HEAPF32[$57>>2];
 $59 = $60 - $58;
 HEAPF32[$$pre$phiZ2D>>2] = $59;
 HEAPF32[$57>>2] = $43;
 $61 = HEAP32[$44>>2]|0;
 $62 = (($61) + 1)|0;
 $63 = ($61|0)>(13);
 $$2 = $63 ? 0 : $62;
 HEAP32[$44>>2] = $$2;
 $64 = (($1|0) / 2)&-1;
 $65 = ($1|0)>(1);
 L10: do {
  if ($65) {
   $66 = $60 * 0.0625;
   $67 = (HEAPF32[tempDoublePtr>>2]=$66,HEAP32[tempDoublePtr>>2]|0);
   $68 = $67 & 2147483647;
   $69 = (+($68>>>0));
   $70 = $69 * 7.1771142984289327E-7;
   $71 = $70 + -764.6162109375;
   $72 = $71;
   $73 = $72 * 0.5;
   $74 = $73 + -15.0;
   $75 = $74;
   $$in724 = $75;$129 = $28;$i$125 = 0;
   while(1) {
    $128 = $129 * $129;
    $130 = $i$125 | 1;
    $131 = (($5) + ($130<<2)|0);
    $132 = +HEAPF32[$131>>2];
    $133 = $132 * $132;
    $134 = $133 + $128;
    $135 = (HEAPF32[tempDoublePtr>>2]=$134,HEAP32[tempDoublePtr>>2]|0);
    $136 = $135 & 2147483647;
    $137 = (+($136>>>0));
    $138 = $137 * 3.5885571492144663E-7;
    $139 = $138 + -382.30810546875;
    $140 = $139 < $$in724;
    $$v = $140 ? $$in724 : $139;
    $141 = $$v < $3;
    $$v8 = $141 ? $3 : $$v;
    $142 = $i$125 >> 1;
    $143 = (($5) + ($142<<2)|0);
    HEAPF32[$143>>2] = $$v8;
    $144 = (($i$125) + 2)|0;
    $145 = ($144|0)<($64|0);
    if (!($145)) {
     break L10;
    }
    $146 = $$in724 + -8.0;
    $$phi$trans$insert = (($5) + ($144<<2)|0);
    $$pre = +HEAPF32[$$phi$trans$insert>>2];
    $$in724 = $146;$129 = $$pre;$i$125 = $144;
   }
  }
 } while(0);
 $76 = ($$|0)>(0);
 if ($76) {
  $j$021$us = 0;$ret$023$us = 0;
 } else {
  $j$021 = 0;$ret$023 = 0;
  while(1) {
   $147 = (((($bands) + ($j$021<<4)|0)) + 4|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = ($148|0)>(0);
   if ($149) {
    $150 = (($bands) + ($j$021<<4)|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = (((($bands) + ($j$021<<4)|0)) + 8|0);
    $153 = HEAP32[$152>>2]|0;
    $acc$010 = 0.0;$i$211 = 0;
    while(1) {
     $154 = (($151) + ($i$211))|0;
     $155 = (($5) + ($154<<2)|0);
     $156 = +HEAPF32[$155>>2];
     $157 = (($153) + ($i$211<<2)|0);
     $158 = +HEAPF32[$157>>2];
     $159 = $158 * $156;
     $160 = $159 + $acc$010;
     $161 = (($i$211) + 1)|0;
     $162 = ($161|0)<($148|0);
     if ($162) {
      $acc$010 = $160;$i$211 = $161;
     } else {
      $acc$0$lcssa = $160;
      break;
     }
    }
   } else {
    $acc$0$lcssa = 0.0;
   }
   $163 = (((($bands) + ($j$021<<4)|0)) + 12|0);
   $164 = +HEAPF32[$163>>2];
   $165 = $164 * $acc$0$lcssa;
   $166 = (((($filters) + (($j$021*144)|0)|0)) + 68|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = ($167|0)<(1);
   $$3$v = $168 ? 16 : -1;
   $$3 = (($$3$v) + ($167))|0;
   $169 = ((($filters) + (($j$021*144)|0)|0) + ($$3<<2)|0);
   $170 = +HEAPF32[$169>>2];
   $171 = $165 < $170;
   $172 = $171 ? $170 : $165;
   $173 = $165 > $170;
   $$4 = $173 ? $170 : $165;
   $174 = $$4 + -99999.0;
   $175 = $172 + 99999.0;
   $176 = ((($filters) + (($j$021*144)|0)|0) + ($167<<2)|0);
   HEAPF32[$176>>2] = $165;
   $177 = HEAP32[$166>>2]|0;
   $178 = (($177) + 1)|0;
   $179 = ($177|0)>(15);
   $$6 = $179 ? 0 : $178;
   HEAP32[$166>>2] = $$6;
   $180 = (((($gi)) + 4|0) + ($j$021<<2)|0);
   $181 = +HEAPF32[$180>>2];
   $182 = $181 + $penalty$1;
   $183 = $175 > $182;
   $184 = $ret$023 | 5;
   $ret$1 = $183 ? $184 : $ret$023;
   $185 = (((($gi)) + 32|0) + ($j$021<<2)|0);
   $186 = +HEAPF32[$185>>2];
   $187 = $186 - $penalty$1;
   $188 = $174 < $187;
   $189 = $ret$1 | 2;
   $ret$2 = $188 ? $189 : $ret$1;
   $190 = (($j$021) + 1)|0;
   $exitcond = ($190|0)==(7);
   if ($exitcond) {
    $ret$0$lcssa = $ret$2;
    break;
   } else {
    $j$021 = $190;$ret$023 = $ret$2;
   }
  }
  STACKTOP = sp;return ($ret$0$lcssa|0);
 }
 while(1) {
  $77 = (((($bands) + ($j$021$us<<4)|0)) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ($78|0)>(0);
  if ($79) {
   $119 = (($bands) + ($j$021$us<<4)|0);
   $109 = HEAP32[$119>>2]|0;
   $120 = (((($bands) + ($j$021$us<<4)|0)) + 8|0);
   $113 = HEAP32[$120>>2]|0;
   $acc$010$us = 0.0;$i$211$us = 0;
   while(1) {
    $108 = (($109) + ($i$211$us))|0;
    $110 = (($5) + ($108<<2)|0);
    $111 = +HEAPF32[$110>>2];
    $112 = (($113) + ($i$211$us<<2)|0);
    $114 = +HEAPF32[$112>>2];
    $115 = $114 * $111;
    $116 = $115 + $acc$010$us;
    $117 = (($i$211$us) + 1)|0;
    $118 = ($117|0)<($78|0);
    if ($118) {
     $acc$010$us = $116;$i$211$us = $117;
    } else {
     $acc$0$lcssa$us = $116;
     break;
    }
   }
  } else {
   $acc$0$lcssa$us = 0.0;
  }
  $121 = (((($bands) + ($j$021$us<<4)|0)) + 12|0);
  $122 = +HEAPF32[$121>>2];
  $85 = $122 * $acc$0$lcssa$us;
  $87 = (((($filters) + (($j$021$us*144)|0)|0)) + 68|0);
  $84 = HEAP32[$87>>2]|0;
  $123 = ($84|0)<(1);
  $$3$v$us = $123 ? 16 : -1;
  $$3$us = (($$3$v$us) + ($84))|0;
  $124 = ((($filters) + (($j$021$us*144)|0)|0) + ($$3$us<<2)|0);
  $125 = +HEAPF32[$124>>2];
  $126 = $85 < $125;
  $82 = $126 ? $125 : $85;
  $127 = $85 > $125;
  $$4$us = $127 ? $125 : $85;
  $i$313$us = 0;$p$112$us = $$3$us;$premax$014$us = -99999.0;$premin$015$us = 99999.0;
  while(1) {
   $101 = ($p$112$us|0)<(1);
   $$5$v$us = $101 ? 16 : -1;
   $$5$us = (($$5$v$us) + ($p$112$us))|0;
   $102 = ((($filters) + (($j$021$us*144)|0)|0) + ($$5$us<<2)|0);
   $103 = +HEAPF32[$102>>2];
   $104 = $premax$014$us < $103;
   $105 = $104 ? $103 : $premax$014$us;
   $106 = $premin$015$us > $103;
   $$premin$0$us = $106 ? $103 : $premin$015$us;
   $107 = (($i$313$us) + 1)|0;
   $exitcond35 = ($107|0)==($$|0);
   if ($exitcond35) {
    $$lcssa48 = $105;$$premin$0$us$lcssa = $$premin$0$us;
    break;
   } else {
    $i$313$us = $107;$p$112$us = $$5$us;$premax$014$us = $105;$premin$015$us = $$premin$0$us;
   }
  }
  $80 = $$4$us - $$premin$0$us$lcssa;
  $81 = $82 - $$lcssa48;
  $83 = ((($filters) + (($j$021$us*144)|0)|0) + ($84<<2)|0);
  HEAPF32[$83>>2] = $85;
  $86 = HEAP32[$87>>2]|0;
  $88 = (($86) + 1)|0;
  $89 = ($86|0)>(15);
  $$6$us = $89 ? 0 : $88;
  HEAP32[$87>>2] = $$6$us;
  $90 = (((($gi)) + 4|0) + ($j$021$us<<2)|0);
  $91 = +HEAPF32[$90>>2];
  $92 = $91 + $penalty$1;
  $93 = $81 > $92;
  $94 = $ret$023$us | 5;
  $ret$1$us = $93 ? $94 : $ret$023$us;
  $95 = (((($gi)) + 32|0) + ($j$021$us<<2)|0);
  $96 = +HEAPF32[$95>>2];
  $97 = $96 - $penalty$1;
  $98 = $80 < $97;
  $99 = $ret$1$us | 2;
  $ret$2$us = $98 ? $99 : $ret$1$us;
  $100 = (($j$021$us) + 1)|0;
  $exitcond36 = ($100|0)==(7);
  if ($exitcond36) {
   $ret$0$lcssa = $ret$2$us;
   break;
  } else {
   $j$021$us = $100;$ret$023$us = $ret$2$us;
  }
 }
 STACKTOP = sp;return ($ret$0$lcssa|0);
}
function _floor1_fit($vb,$look,$logmdct,$logmask) {
 $vb = $vb|0;
 $look = $look|0;
 $logmdct = $logmdct|0;
 $logmask = $logmask|0;
 var $$$0$i = 0, $$$i$i = 0, $$$i$i27 = 0, $$$i$i58 = 0, $$$i5$i = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i28 = 0, $$0$i$i59 = 0, $$0$i10 = 0, $$0$i54 = 0, $$0$i6$i = 0, $$0$i63 = 0, $$0$i7 = 0, $$0$i8 = 0, $$0$p$i = 0, $$pn$i = 0, $$pre = 0, $$pre116 = 0, $$pre117 = 0;
 var $$val$i = 0.0, $$val$i26 = 0.0, $$val$i61 = 0.0, $$val4$i = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0;
 var $185 = 0.0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0;
 var $220 = 0.0, $221 = 0, $222 = 0.0, $223 = 0.0, $224 = 0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0.0;
 var $239 = 0, $24 = 0.0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0.0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0.0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $err$010$i = 0, $err$1$i = 0, $exitcond = 0, $exitcond109 = 0, $exitcond110 = 0, $exitcond112 = 0, $exitcond114 = 0;
 var $exitcond115 = 0, $fit_valueA = 0, $fit_valueB = 0, $fits = 0, $hineighbor = 0, $hy0 = 0, $hy1 = 0, $i$01$i = 0, $i$01$i25 = 0, $i$0104 = 0, $i$1102 = 0, $i$398 = 0, $i$593 = 0, $i$687 = 0, $i$778 = 0, $ispos$i = 0, $ispos$i56 = 0, $ispos2$i = 0, $j$080 = 0, $j$080$in = 0;
 var $j$1 = 0, $j$183 = 0, $j$184 = 0, $loneighbor = 0, $ly0 = 0, $ly1 = 0, $memo = 0, $mse$0$lcssa$i = 0, $mse$011$i = 0, $n$0$lcssa$i = 0, $n$012$i = 0, $na$0$lcssa$i = 0, $na$0$lcssa$i47 = 0, $na$07$i = 0, $na$07$i19 = 0, $na$1$i = 0, $na$1$i34 = 0, $nb$0$lcssa$i = 0, $nb$0$lcssa$i41 = 0, $nb$013$i = 0;
 var $nb$013$i13 = 0, $nb$1$i = 0, $nb$1$i40 = 0, $neg$i = 0, $neg$i57 = 0, $neg3$i = 0, $nonzero$092 = 0, $nonzero$1 = 0, $or$cond = 0, $or$cond$i = 0, $or$cond6 = 0, $output$0 = 0, $x1$$i = 0, $x2a$0$lcssa$i = 0, $x2a$0$lcssa$i50 = 0, $x2a$04$i = 0, $x2a$04$i22 = 0, $x2a$1$i = 0, $x2a$1$i31 = 0, $x2b$0$lcssa$i = 0;
 var $x2b$0$lcssa$i44 = 0, $x2b$010$i = 0, $x2b$010$i16 = 0, $x2b$1$i = 0, $x2b$1$i37 = 0, $xa$0$lcssa$i = 0, $xa$0$lcssa$i52 = 0, $xa$02$i = 0, $xa$02$i24 = 0, $xa$1$i = 0, $xa$1$i29 = 0, $xb$0$lcssa$i = 0, $xb$0$lcssa$i46 = 0, $xb$08$i = 0, $xb$08$i18 = 0, $xb$1$i = 0, $xb$1$i35 = 0, $xya$0$lcssa$i = 0, $xya$0$lcssa$i48 = 0, $xya$06$i = 0;
 var $xya$06$i20 = 0, $xya$1$i = 0, $xya$1$i33 = 0, $xyb$0$lcssa$i = 0, $xyb$0$lcssa$i42 = 0, $xyb$012$i = 0, $xyb$012$i14 = 0, $xyb$1$i = 0, $xyb$1$i39 = 0, $y$09$i = 0, $y$1$i = 0, $y0 = 0, $y1 = 0, $y2a$0$lcssa$i = 0, $y2a$0$lcssa$i49 = 0, $y2a$05$i = 0, $y2a$05$i21 = 0, $y2a$1$i = 0, $y2a$1$i32 = 0, $y2b$0$lcssa$i = 0;
 var $y2b$0$lcssa$i43 = 0, $y2b$011$i = 0, $y2b$011$i15 = 0, $y2b$1$i = 0, $y2b$1$i38 = 0, $ya$0$lcssa$i = 0, $ya$0$lcssa$i51 = 0, $ya$03$i = 0, $ya$03$i23 = 0, $ya$1$i = 0, $ya$1$i30 = 0, $yb$0$lcssa$i = 0, $yb$0$lcssa$i45 = 0, $yb$09$i = 0, $yb$09$i17 = 0, $yb$1$i = 0, $yb$1$i36 = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4912|0;
 $fits = sp + 1328|0;
 $fit_valueA = sp + 1064|0;
 $fit_valueB = sp + 804|0;
 $loneighbor = sp + 544|0;
 $hineighbor = sp + 284|0;
 $memo = sp + 24|0;
 $y0 = sp + 20|0;
 $y1 = sp + 16|0;
 $ly0 = sp + 12|0;
 $ly1 = sp + 8|0;
 $hy0 = sp + 4|0;
 $hy1 = sp;
 $0 = ((($look)) + 1296|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($look)) + 1288|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($look)) + 1284|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 if ($6) {
  $i$0104 = 0;
  while(1) {
   $7 = (($fit_valueA) + ($i$0104<<2)|0);
   HEAP32[$7>>2] = -200;
   $8 = (($i$0104) + 1)|0;
   $exitcond115 = ($8|0)==($5|0);
   if ($exitcond115) {
    break;
   } else {
    $i$0104 = $8;
   }
  }
  if ($6) {
   $i$1102 = 0;
   while(1) {
    $9 = (($fit_valueB) + ($i$1102<<2)|0);
    HEAP32[$9>>2] = -200;
    $10 = (($i$1102) + 1)|0;
    $exitcond114 = ($10|0)==($5|0);
    if ($exitcond114) {
     break;
    } else {
     $i$1102 = $10;
    }
   }
   if ($6) {
    $11 = $5 << 2;
    _memset(($loneighbor|0),0,($11|0))|0;
    $i$398 = 0;
    while(1) {
     $12 = (($hineighbor) + ($i$398<<2)|0);
     HEAP32[$12>>2] = 1;
     $13 = (($i$398) + 1)|0;
     $exitcond112 = ($13|0)==($5|0);
     if ($exitcond112) {
      break;
     } else {
      $i$398 = $13;
     }
    }
    if ($6) {
     $15 = $5 << 2;
     _memset(($memo|0),-1,($15|0))|0;
     $16 = ($5|0)>(1);
     if (!($16)) {
      $output$0 = 0;
      STACKTOP = sp;return ($output$0|0);
     }
     $17 = (($3) + -1)|0;
     $18 = ((($1)) + 1112|0);
     $19 = (($5) + -1)|0;
     $$pre = HEAP32[$look>>2]|0;
     $70 = $$pre;$i$593 = 0;$nonzero$092 = 0;
     while(1) {
      $66 = (($i$593) + 1)|0;
      $67 = (($look) + ($66<<2)|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = (($fits) + (($i$593*56)|0)|0);
      dest=$69; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
      HEAP32[$69>>2] = $70;
      $71 = (((($fits) + (($i$593*56)|0)|0)) + 4|0);
      HEAP32[$71>>2] = $68;
      $72 = ($68|0)<($3|0);
      $x1$$i = $72 ? $68 : $17;
      $73 = ($x1$$i|0)<($70|0);
      if ($73) {
       $na$0$lcssa$i47 = 0;$nb$0$lcssa$i41 = 0;$x2a$0$lcssa$i50 = 0;$x2b$0$lcssa$i44 = 0;$xa$0$lcssa$i52 = 0;$xb$0$lcssa$i46 = 0;$xya$0$lcssa$i48 = 0;$xyb$0$lcssa$i42 = 0;$y2a$0$lcssa$i49 = 0;$y2b$0$lcssa$i43 = 0;$ya$0$lcssa$i51 = 0;$yb$0$lcssa$i45 = 0;
      } else {
       $i$01$i25 = $70;$na$07$i19 = 0;$nb$013$i13 = 0;$x2a$04$i22 = 0;$x2b$010$i16 = 0;$xa$02$i24 = 0;$xb$08$i18 = 0;$xya$06$i20 = 0;$xyb$012$i14 = 0;$y2a$05$i21 = 0;$y2b$011$i15 = 0;$ya$03$i23 = 0;$yb$09$i17 = 0;
       while(1) {
        $74 = (($logmask) + ($i$01$i25<<2)|0);
        $$val$i26 = +HEAPF32[$74>>2];
        $75 = $$val$i26 * 7.3142857551574707;
        $76 = $75 + 1023.5;
        $77 = (~~(($76)));
        $78 = ($77|0)>(1023);
        $79 = ($77|0)<(0);
        $$$i$i27 = $79 ? 0 : $77;
        $$0$i$i28 = $78 ? 1023 : $$$i$i27;
        $80 = ($$0$i$i28|0)==(0);
        do {
         if ($80) {
          $na$1$i34 = $na$07$i19;$nb$1$i40 = $nb$013$i13;$x2a$1$i31 = $x2a$04$i22;$x2b$1$i37 = $x2b$010$i16;$xa$1$i29 = $xa$02$i24;$xb$1$i35 = $xb$08$i18;$xya$1$i33 = $xya$06$i20;$xyb$1$i39 = $xyb$012$i14;$y2a$1$i32 = $y2a$05$i21;$y2b$1$i38 = $y2b$011$i15;$ya$1$i30 = $ya$03$i23;$yb$1$i36 = $yb$09$i17;
         } else {
          $81 = (($logmdct) + ($i$01$i25<<2)|0);
          $82 = +HEAPF32[$81>>2];
          $83 = +HEAPF32[$18>>2];
          $84 = $83 + $82;
          $85 = !($84 >= $$val$i26);
          if ($85) {
           $95 = (($i$01$i25) + ($xb$08$i18))|0;
           $96 = (($$0$i$i28) + ($yb$09$i17))|0;
           $97 = Math_imul($i$01$i25, $i$01$i25)|0;
           $98 = (($97) + ($x2b$010$i16))|0;
           $99 = Math_imul($$0$i$i28, $$0$i$i28)|0;
           $100 = (($99) + ($y2b$011$i15))|0;
           $101 = Math_imul($$0$i$i28, $i$01$i25)|0;
           $102 = (($101) + ($xyb$012$i14))|0;
           $103 = (($nb$013$i13) + 1)|0;
           $na$1$i34 = $na$07$i19;$nb$1$i40 = $103;$x2a$1$i31 = $x2a$04$i22;$x2b$1$i37 = $98;$xa$1$i29 = $xa$02$i24;$xb$1$i35 = $95;$xya$1$i33 = $xya$06$i20;$xyb$1$i39 = $102;$y2a$1$i32 = $y2a$05$i21;$y2b$1$i38 = $100;$ya$1$i30 = $ya$03$i23;$yb$1$i36 = $96;
           break;
          } else {
           $86 = (($i$01$i25) + ($xa$02$i24))|0;
           $87 = (($$0$i$i28) + ($ya$03$i23))|0;
           $88 = Math_imul($i$01$i25, $i$01$i25)|0;
           $89 = (($88) + ($x2a$04$i22))|0;
           $90 = Math_imul($$0$i$i28, $$0$i$i28)|0;
           $91 = (($90) + ($y2a$05$i21))|0;
           $92 = Math_imul($$0$i$i28, $i$01$i25)|0;
           $93 = (($92) + ($xya$06$i20))|0;
           $94 = (($na$07$i19) + 1)|0;
           $na$1$i34 = $94;$nb$1$i40 = $nb$013$i13;$x2a$1$i31 = $89;$x2b$1$i37 = $x2b$010$i16;$xa$1$i29 = $86;$xb$1$i35 = $xb$08$i18;$xya$1$i33 = $93;$xyb$1$i39 = $xyb$012$i14;$y2a$1$i32 = $91;$y2b$1$i38 = $y2b$011$i15;$ya$1$i30 = $87;$yb$1$i36 = $yb$09$i17;
           break;
          }
         }
        } while(0);
        $104 = (($i$01$i25) + 1)|0;
        $105 = ($i$01$i25|0)<($x1$$i|0);
        if ($105) {
         $i$01$i25 = $104;$na$07$i19 = $na$1$i34;$nb$013$i13 = $nb$1$i40;$x2a$04$i22 = $x2a$1$i31;$x2b$010$i16 = $x2b$1$i37;$xa$02$i24 = $xa$1$i29;$xb$08$i18 = $xb$1$i35;$xya$06$i20 = $xya$1$i33;$xyb$012$i14 = $xyb$1$i39;$y2a$05$i21 = $y2a$1$i32;$y2b$011$i15 = $y2b$1$i38;$ya$03$i23 = $ya$1$i30;$yb$09$i17 = $yb$1$i36;
        } else {
         $na$0$lcssa$i47 = $na$1$i34;$nb$0$lcssa$i41 = $nb$1$i40;$x2a$0$lcssa$i50 = $x2a$1$i31;$x2b$0$lcssa$i44 = $x2b$1$i37;$xa$0$lcssa$i52 = $xa$1$i29;$xb$0$lcssa$i46 = $xb$1$i35;$xya$0$lcssa$i48 = $xya$1$i33;$xyb$0$lcssa$i42 = $xyb$1$i39;$y2a$0$lcssa$i49 = $y2a$1$i32;$y2b$0$lcssa$i43 = $y2b$1$i38;$ya$0$lcssa$i51 = $ya$1$i30;$yb$0$lcssa$i45 = $yb$1$i36;
         break;
        }
       }
      }
      $106 = (((($fits) + (($i$593*56)|0)|0)) + 8|0);
      HEAP32[$106>>2] = $xa$0$lcssa$i52;
      $107 = (((($fits) + (($i$593*56)|0)|0)) + 12|0);
      HEAP32[$107>>2] = $ya$0$lcssa$i51;
      $108 = (((($fits) + (($i$593*56)|0)|0)) + 16|0);
      HEAP32[$108>>2] = $x2a$0$lcssa$i50;
      $109 = (((($fits) + (($i$593*56)|0)|0)) + 20|0);
      HEAP32[$109>>2] = $y2a$0$lcssa$i49;
      $110 = (((($fits) + (($i$593*56)|0)|0)) + 24|0);
      HEAP32[$110>>2] = $xya$0$lcssa$i48;
      $111 = (((($fits) + (($i$593*56)|0)|0)) + 28|0);
      HEAP32[$111>>2] = $na$0$lcssa$i47;
      $112 = (((($fits) + (($i$593*56)|0)|0)) + 32|0);
      HEAP32[$112>>2] = $xb$0$lcssa$i46;
      $113 = (((($fits) + (($i$593*56)|0)|0)) + 36|0);
      HEAP32[$113>>2] = $yb$0$lcssa$i45;
      $114 = (((($fits) + (($i$593*56)|0)|0)) + 40|0);
      HEAP32[$114>>2] = $x2b$0$lcssa$i44;
      $115 = (((($fits) + (($i$593*56)|0)|0)) + 44|0);
      HEAP32[$115>>2] = $y2b$0$lcssa$i43;
      $116 = (((($fits) + (($i$593*56)|0)|0)) + 48|0);
      HEAP32[$116>>2] = $xyb$0$lcssa$i42;
      $117 = (((($fits) + (($i$593*56)|0)|0)) + 52|0);
      HEAP32[$117>>2] = $nb$0$lcssa$i41;
      $118 = (($na$0$lcssa$i47) + ($nonzero$092))|0;
      $exitcond110 = ($66|0)==($19|0);
      if ($exitcond110) {
       $nonzero$1 = $118;
       break;
      } else {
       $70 = $68;$i$593 = $66;$nonzero$092 = $118;
      }
     }
    } else {
     label = 9;
    }
   } else {
    label = 9;
   }
  } else {
   label = 9;
  }
 } else {
  label = 9;
 }
 if ((label|0) == 9) {
  $14 = ($5|0)==(0);
  if (!($14)) {
   $output$0 = 0;
   STACKTOP = sp;return ($output$0|0);
  }
  $20 = ((($fits)) + 4|0);
  dest=$fits; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$20>>2] = $3;
  $21 = ($3|0)<(1);
  if ($21) {
   $na$0$lcssa$i = 0;$nb$0$lcssa$i = 0;$x2a$0$lcssa$i = 0;$x2b$0$lcssa$i = 0;$xa$0$lcssa$i = 0;$xb$0$lcssa$i = 0;$xya$0$lcssa$i = 0;$xyb$0$lcssa$i = 0;$y2a$0$lcssa$i = 0;$y2b$0$lcssa$i = 0;$ya$0$lcssa$i = 0;$yb$0$lcssa$i = 0;
  } else {
   $22 = ((($1)) + 1112|0);
   $i$01$i = 0;$na$07$i = 0;$nb$013$i = 0;$x2a$04$i = 0;$x2b$010$i = 0;$xa$02$i = 0;$xb$08$i = 0;$xya$06$i = 0;$xyb$012$i = 0;$y2a$05$i = 0;$y2b$011$i = 0;$ya$03$i = 0;$yb$09$i = 0;
   while(1) {
    $23 = (($logmask) + ($i$01$i<<2)|0);
    $$val$i = +HEAPF32[$23>>2];
    $24 = $$val$i * 7.3142857551574707;
    $25 = $24 + 1023.5;
    $26 = (~~(($25)));
    $27 = ($26|0)>(1023);
    $28 = ($26|0)<(0);
    $$$i$i = $28 ? 0 : $26;
    $$0$i$i = $27 ? 1023 : $$$i$i;
    $29 = ($$0$i$i|0)==(0);
    do {
     if ($29) {
      $na$1$i = $na$07$i;$nb$1$i = $nb$013$i;$x2a$1$i = $x2a$04$i;$x2b$1$i = $x2b$010$i;$xa$1$i = $xa$02$i;$xb$1$i = $xb$08$i;$xya$1$i = $xya$06$i;$xyb$1$i = $xyb$012$i;$y2a$1$i = $y2a$05$i;$y2b$1$i = $y2b$011$i;$ya$1$i = $ya$03$i;$yb$1$i = $yb$09$i;
     } else {
      $30 = (($logmdct) + ($i$01$i<<2)|0);
      $31 = +HEAPF32[$30>>2];
      $32 = +HEAPF32[$22>>2];
      $33 = $32 + $31;
      $34 = !($33 >= $$val$i);
      if ($34) {
       $44 = (($i$01$i) + ($xb$08$i))|0;
       $45 = (($$0$i$i) + ($yb$09$i))|0;
       $46 = Math_imul($i$01$i, $i$01$i)|0;
       $47 = (($46) + ($x2b$010$i))|0;
       $48 = Math_imul($$0$i$i, $$0$i$i)|0;
       $49 = (($48) + ($y2b$011$i))|0;
       $50 = Math_imul($$0$i$i, $i$01$i)|0;
       $51 = (($50) + ($xyb$012$i))|0;
       $52 = (($nb$013$i) + 1)|0;
       $na$1$i = $na$07$i;$nb$1$i = $52;$x2a$1$i = $x2a$04$i;$x2b$1$i = $47;$xa$1$i = $xa$02$i;$xb$1$i = $44;$xya$1$i = $xya$06$i;$xyb$1$i = $51;$y2a$1$i = $y2a$05$i;$y2b$1$i = $49;$ya$1$i = $ya$03$i;$yb$1$i = $45;
       break;
      } else {
       $35 = (($i$01$i) + ($xa$02$i))|0;
       $36 = (($$0$i$i) + ($ya$03$i))|0;
       $37 = Math_imul($i$01$i, $i$01$i)|0;
       $38 = (($37) + ($x2a$04$i))|0;
       $39 = Math_imul($$0$i$i, $$0$i$i)|0;
       $40 = (($39) + ($y2a$05$i))|0;
       $41 = Math_imul($$0$i$i, $i$01$i)|0;
       $42 = (($41) + ($xya$06$i))|0;
       $43 = (($na$07$i) + 1)|0;
       $na$1$i = $43;$nb$1$i = $nb$013$i;$x2a$1$i = $38;$x2b$1$i = $x2b$010$i;$xa$1$i = $35;$xb$1$i = $xb$08$i;$xya$1$i = $42;$xyb$1$i = $xyb$012$i;$y2a$1$i = $40;$y2b$1$i = $y2b$011$i;$ya$1$i = $36;$yb$1$i = $yb$09$i;
       break;
      }
     }
    } while(0);
    $53 = (($i$01$i) + 1)|0;
    $exitcond109 = ($53|0)==($3|0);
    if ($exitcond109) {
     $na$0$lcssa$i = $na$1$i;$nb$0$lcssa$i = $nb$1$i;$x2a$0$lcssa$i = $x2a$1$i;$x2b$0$lcssa$i = $x2b$1$i;$xa$0$lcssa$i = $xa$1$i;$xb$0$lcssa$i = $xb$1$i;$xya$0$lcssa$i = $xya$1$i;$xyb$0$lcssa$i = $xyb$1$i;$y2a$0$lcssa$i = $y2a$1$i;$y2b$0$lcssa$i = $y2b$1$i;$ya$0$lcssa$i = $ya$1$i;$yb$0$lcssa$i = $yb$1$i;
     break;
    } else {
     $i$01$i = $53;$na$07$i = $na$1$i;$nb$013$i = $nb$1$i;$x2a$04$i = $x2a$1$i;$x2b$010$i = $x2b$1$i;$xa$02$i = $xa$1$i;$xb$08$i = $xb$1$i;$xya$06$i = $xya$1$i;$xyb$012$i = $xyb$1$i;$y2a$05$i = $y2a$1$i;$y2b$011$i = $y2b$1$i;$ya$03$i = $ya$1$i;$yb$09$i = $yb$1$i;
    }
   }
  }
  $54 = ((($fits)) + 8|0);
  HEAP32[$54>>2] = $xa$0$lcssa$i;
  $55 = ((($fits)) + 12|0);
  HEAP32[$55>>2] = $ya$0$lcssa$i;
  $56 = ((($fits)) + 16|0);
  HEAP32[$56>>2] = $x2a$0$lcssa$i;
  $57 = ((($fits)) + 20|0);
  HEAP32[$57>>2] = $y2a$0$lcssa$i;
  $58 = ((($fits)) + 24|0);
  HEAP32[$58>>2] = $xya$0$lcssa$i;
  $59 = ((($fits)) + 28|0);
  HEAP32[$59>>2] = $na$0$lcssa$i;
  $60 = ((($fits)) + 32|0);
  HEAP32[$60>>2] = $xb$0$lcssa$i;
  $61 = ((($fits)) + 36|0);
  HEAP32[$61>>2] = $yb$0$lcssa$i;
  $62 = ((($fits)) + 40|0);
  HEAP32[$62>>2] = $x2b$0$lcssa$i;
  $63 = ((($fits)) + 44|0);
  HEAP32[$63>>2] = $y2b$0$lcssa$i;
  $64 = ((($fits)) + 48|0);
  HEAP32[$64>>2] = $xyb$0$lcssa$i;
  $65 = ((($fits)) + 52|0);
  HEAP32[$65>>2] = $nb$0$lcssa$i;
  $nonzero$1 = $na$0$lcssa$i;
 }
 $119 = ($nonzero$1|0)==(0);
 if ($119) {
  $output$0 = 0;
  STACKTOP = sp;return ($output$0|0);
 }
 HEAP32[$y0>>2] = -200;
 HEAP32[$y1>>2] = -200;
 $120 = (($5) + -1)|0;
 (_fit_line($fits,$120,$y0,$y1,$1)|0);
 $121 = HEAP32[$y0>>2]|0;
 HEAP32[$fit_valueA>>2] = $121;
 HEAP32[$fit_valueB>>2] = $121;
 $122 = HEAP32[$y1>>2]|0;
 $123 = ((($fit_valueB)) + 4|0);
 HEAP32[$123>>2] = $122;
 $124 = ((($fit_valueA)) + 4|0);
 HEAP32[$124>>2] = $122;
 $125 = ($5|0)>(2);
 do {
  if ($125) {
   $126 = ((($1)) + 1112|0);
   $127 = ((($1)) + 1096|0);
   $128 = ((($1)) + 1100|0);
   $129 = ((($1)) + 1104|0);
   $i$687 = 2;
   L50: while(1) {
    $130 = (((($look)) + 520|0) + ($i$687<<2)|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (($loneighbor) + ($131<<2)|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (($hineighbor) + ($131<<2)|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (($memo) + ($133<<2)|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = ($137|0)==($135|0);
    L52: do {
     if (!($138)) {
      $139 = (((($look)) + 520|0) + ($133<<2)|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (((($look)) + 520|0) + ($135<<2)|0);
      $142 = HEAP32[$141>>2]|0;
      HEAP32[$136>>2] = $135;
      $143 = (((($1)) + 836|0) + ($133<<2)|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (((($1)) + 836|0) + ($135<<2)|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = (($fit_valueA) + ($133<<2)|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($148|0)<(0);
      $150 = (($fit_valueB) + ($133<<2)|0);
      $151 = HEAP32[$150>>2]|0;
      if ($149) {
       $$0$i54 = $151;
      } else {
       $152 = ($151|0)<(0);
       if ($152) {
        $$0$i54 = $148;
       } else {
        $153 = (($151) + ($148))|0;
        $154 = $153 >> 1;
        $$0$i54 = $154;
       }
      }
      $155 = (($fit_valueA) + ($135<<2)|0);
      $156 = HEAP32[$155>>2]|0;
      $157 = ($156|0)<(0);
      $158 = (($fit_valueB) + ($135<<2)|0);
      $159 = HEAP32[$158>>2]|0;
      if ($157) {
       $$0$i63 = $159;
      } else {
       $160 = ($159|0)<(0);
       if ($160) {
        $$0$i63 = $156;
       } else {
        $161 = (($159) + ($156))|0;
        $162 = $161 >> 1;
        $$0$i63 = $162;
       }
      }
      $163 = ($$0$i54|0)==(-1);
      $164 = ($$0$i63|0)==(-1);
      $or$cond = $163 | $164;
      if ($or$cond) {
       label = 38;
       break L50;
      }
      $165 = (($$0$i63) - ($$0$i54))|0;
      $166 = (($146) - ($144))|0;
      $ispos$i56 = ($165|0)>(-1);
      $neg$i57 = (0 - ($165))|0;
      $167 = $ispos$i56 ? $165 : $neg$i57;
      $168 = (($165|0) / ($166|0))&-1;
      $169 = $165 >> 31;
      $170 = $169 | 1;
      $171 = (($logmask) + ($144<<2)|0);
      $$val4$i = +HEAPF32[$171>>2];
      $172 = $$val4$i * 7.3142857551574707;
      $173 = $172 + 1023.5;
      $174 = (~~(($173)));
      $175 = ($174|0)>(1023);
      $176 = ($174|0)<(0);
      $$$i$i58 = $176 ? 0 : $174;
      $$0$i$i59 = $175 ? 1023 : $$$i$i58;
      $177 = Math_imul($168, $166)|0;
      $ispos2$i = ($177|0)>(-1);
      $neg3$i = (0 - ($177))|0;
      $178 = $ispos2$i ? $177 : $neg3$i;
      $179 = (($167) - ($178))|0;
      $180 = (($$0$i54) - ($$0$i$i59))|0;
      $181 = Math_imul($180, $180)|0;
      $182 = (($logmdct) + ($144<<2)|0);
      $183 = +HEAPF32[$182>>2];
      $184 = +HEAPF32[$126>>2];
      $185 = $184 + $183;
      $186 = !($185 >= $$val4$i);
      if ($186) {
       label = 42;
      } else {
       $187 = (+($$0$i54|0));
       $188 = +HEAPF32[$127>>2];
       $189 = $188 + $187;
       $190 = (+($$0$i$i59|0));
       $191 = $189 < $190;
       if (!($191)) {
        $192 = +HEAPF32[$128>>2];
        $193 = $187 - $192;
        $194 = $193 > $190;
        if (!($194)) {
         label = 42;
        }
       }
      }
      L66: do {
       if ((label|0) == 42) {
        label = 0;
        $195 = (($144) + 1)|0;
        $196 = ($195|0)<($146|0);
        if ($196) {
         $202 = $195;$err$010$i = 0;$mse$011$i = $181;$n$012$i = 1;$y$09$i = $$0$i54;
         while(1) {
          $197 = (($err$010$i) + ($179))|0;
          $198 = ($197|0)<($166|0);
          $199 = $198 ? 0 : $170;
          $200 = $198 ? 0 : $166;
          $err$1$i = (($197) - ($200))|0;
          $$pn$i = (($y$09$i) + ($168))|0;
          $y$1$i = (($$pn$i) + ($199))|0;
          $201 = (($logmask) + ($202<<2)|0);
          $$val$i61 = +HEAPF32[$201>>2];
          $203 = $$val$i61 * 7.3142857551574707;
          $204 = $203 + 1023.5;
          $205 = (~~(($204)));
          $206 = ($205|0)>(1023);
          $207 = ($205|0)<(0);
          $$$i5$i = $207 ? 0 : $205;
          $$0$i6$i = $206 ? 1023 : $$$i5$i;
          $208 = (($y$1$i) - ($$0$i6$i))|0;
          $209 = Math_imul($208, $208)|0;
          $210 = (($209) + ($mse$011$i))|0;
          $211 = (($n$012$i) + 1)|0;
          $212 = (($logmdct) + ($202<<2)|0);
          $213 = +HEAPF32[$212>>2];
          $214 = $213 + $184;
          $215 = $214 >= $$val$i61;
          $216 = ($$0$i6$i|0)!=(0);
          $or$cond$i = $215 & $216;
          if ($or$cond$i) {
           $217 = (+($y$1$i|0));
           $218 = +HEAPF32[$127>>2];
           $219 = $218 + $217;
           $220 = (+($$0$i6$i|0));
           $221 = $219 < $220;
           if ($221) {
            break L66;
           }
           $222 = +HEAPF32[$128>>2];
           $223 = $217 - $222;
           $224 = $223 > $220;
           if ($224) {
            break L66;
           }
          }
          $225 = (($202) + 1)|0;
          $226 = ($225|0)<($146|0);
          if ($226) {
           $202 = $225;$err$010$i = $err$1$i;$mse$011$i = $210;$n$012$i = $211;$y$09$i = $y$1$i;
          } else {
           $mse$0$lcssa$i = $210;$n$0$lcssa$i = $211;
           break;
          }
         }
        } else {
         $mse$0$lcssa$i = $181;$n$0$lcssa$i = 1;
        }
        $227 = +HEAPF32[$127>>2];
        $228 = $227 * $227;
        $229 = (+($n$0$lcssa$i|0));
        $230 = $228 / $229;
        $231 = +HEAPF32[$129>>2];
        $232 = $230 > $231;
        if (!($232)) {
         $233 = +HEAPF32[$128>>2];
         $234 = $233 * $233;
         $235 = $234 / $229;
         $236 = $235 > $231;
         if (!($236)) {
          $237 = (($mse$0$lcssa$i|0) / ($n$0$lcssa$i|0))&-1;
          $238 = (+($237|0));
          $239 = $238 > $231;
          if ($239) {
           break;
          }
         }
        }
        $272 = (($fit_valueA) + ($i$687<<2)|0);
        HEAP32[$272>>2] = -200;
        $273 = (($fit_valueB) + ($i$687<<2)|0);
        HEAP32[$273>>2] = -200;
        break L52;
       }
      } while(0);
      HEAP32[$ly0>>2] = -200;
      HEAP32[$ly1>>2] = -200;
      HEAP32[$hy0>>2] = -200;
      HEAP32[$hy1>>2] = -200;
      $240 = (($fits) + (($140*56)|0)|0);
      $241 = (($131) - ($140))|0;
      $242 = (_fit_line($240,$241,$ly0,$ly1,$1)|0);
      $243 = (($fits) + (($131*56)|0)|0);
      $244 = (($142) - ($131))|0;
      $245 = (_fit_line($243,$244,$hy0,$hy1,$1)|0);
      $246 = ($242|0)!=(0);
      if ($246) {
       HEAP32[$ly0>>2] = $$0$i54;
       $247 = HEAP32[$hy0>>2]|0;
       HEAP32[$ly1>>2] = $247;
      }
      $248 = ($245|0)==(0);
      if (!($248)) {
       $249 = HEAP32[$ly1>>2]|0;
       HEAP32[$hy0>>2] = $249;
       HEAP32[$hy1>>2] = $$0$i63;
       if ($246) {
        $250 = (($fit_valueA) + ($i$687<<2)|0);
        HEAP32[$250>>2] = -200;
        $251 = (($fit_valueB) + ($i$687<<2)|0);
        HEAP32[$251>>2] = -200;
        break;
       }
      }
      $252 = HEAP32[$ly0>>2]|0;
      HEAP32[$150>>2] = $252;
      $253 = ($133|0)==(0);
      if ($253) {
       HEAP32[$fit_valueA>>2] = $252;
      }
      $254 = HEAP32[$ly1>>2]|0;
      $255 = (($fit_valueA) + ($i$687<<2)|0);
      HEAP32[$255>>2] = $254;
      $256 = HEAP32[$hy0>>2]|0;
      $257 = (($fit_valueB) + ($i$687<<2)|0);
      HEAP32[$257>>2] = $256;
      $258 = HEAP32[$hy1>>2]|0;
      HEAP32[$155>>2] = $258;
      $259 = ($135|0)==(1);
      if ($259) {
       HEAP32[$123>>2] = $258;
      }
      $260 = $256 & $254;
      $261 = ($260|0)>(-1);
      if ($261) {
       $262 = ($131|0)>(0);
       L95: do {
        if ($262) {
         $j$080$in = $131;
         while(1) {
          $j$080 = (($j$080$in) + -1)|0;
          $264 = (($hineighbor) + ($j$080<<2)|0);
          $265 = HEAP32[$264>>2]|0;
          $266 = ($265|0)==($135|0);
          if (!($266)) {
           break L95;
          }
          HEAP32[$264>>2] = $i$687;
          $267 = ($j$080$in|0)>(1);
          if ($267) {
           $j$080$in = $j$080;
          } else {
           break;
          }
         }
        }
       } while(0);
       $j$183 = (($131) + 1)|0;
       $263 = ($j$183|0)<($5|0);
       if ($263) {
        $j$184 = $j$183;
        while(1) {
         $268 = (($loneighbor) + ($j$184<<2)|0);
         $269 = HEAP32[$268>>2]|0;
         $270 = ($269|0)==($133|0);
         if (!($270)) {
          break L52;
         }
         HEAP32[$268>>2] = $i$687;
         $j$1 = (($j$184) + 1)|0;
         $271 = ($j$1|0)<($5|0);
         if ($271) {
          $j$184 = $j$1;
         } else {
          break;
         }
        }
       }
      }
     }
    } while(0);
    $274 = (($i$687) + 1)|0;
    $275 = ($274|0)<($5|0);
    if ($275) {
     $i$687 = $274;
    } else {
     label = 68;
     break;
    }
   }
   if ((label|0) == 38) {
    _exit(1);
    // unreachable;
   }
   else if ((label|0) == 68) {
    $$pre116 = HEAP32[$fit_valueA>>2]|0;
    $$pre117 = HEAP32[$fit_valueB>>2]|0;
    $278 = $$pre116;$280 = $$pre117;
    break;
   }
  } else {
   $278 = $121;$280 = $121;
  }
 } while(0);
 $276 = $5 << 2;
 $277 = (__vorbis_block_alloc($vb,$276)|0);
 $279 = ($278|0)<(0);
 if ($279) {
  $$0$i10 = $280;
 } else {
  $281 = ($280|0)<(0);
  if ($281) {
   $$0$i10 = $278;
  } else {
   $282 = (($280) + ($278))|0;
   $283 = $282 >> 1;
   $$0$i10 = $283;
  }
 }
 HEAP32[$277>>2] = $$0$i10;
 $284 = HEAP32[$124>>2]|0;
 $285 = ($284|0)<(0);
 $286 = HEAP32[$123>>2]|0;
 if ($285) {
  $$0$i8 = $286;
 } else {
  $287 = ($286|0)<(0);
  if ($287) {
   $$0$i8 = $284;
  } else {
   $288 = (($286) + ($284))|0;
   $289 = $288 >> 1;
   $$0$i8 = $289;
  }
 }
 $290 = ((($277)) + 4|0);
 HEAP32[$290>>2] = $$0$i8;
 if ($125) {
  $i$778 = 2;
 } else {
  $output$0 = $277;
  STACKTOP = sp;return ($output$0|0);
 }
 while(1) {
  $291 = (($i$778) + -2)|0;
  $292 = (((($look)) + 1032|0) + ($291<<2)|0);
  $293 = HEAP32[$292>>2]|0;
  $294 = (((($look)) + 780|0) + ($291<<2)|0);
  $295 = HEAP32[$294>>2]|0;
  $296 = (((($1)) + 836|0) + ($293<<2)|0);
  $297 = HEAP32[$296>>2]|0;
  $298 = (((($1)) + 836|0) + ($295<<2)|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = (($277) + ($293<<2)|0);
  $301 = HEAP32[$300>>2]|0;
  $302 = (($277) + ($295<<2)|0);
  $303 = HEAP32[$302>>2]|0;
  $304 = (((($1)) + 836|0) + ($i$778<<2)|0);
  $305 = HEAP32[$304>>2]|0;
  $306 = $301 & 32767;
  $307 = $303 & 32767;
  $308 = (($307) - ($306))|0;
  $309 = (($299) - ($297))|0;
  $ispos$i = ($308|0)>(-1);
  $neg$i = (0 - ($308))|0;
  $310 = $ispos$i ? $308 : $neg$i;
  $311 = (($305) - ($297))|0;
  $312 = Math_imul($310, $311)|0;
  $313 = (($312|0) / ($309|0))&-1;
  $314 = ($308|0)<(0);
  $315 = (0 - ($313))|0;
  $$0$p$i = $314 ? $315 : $313;
  $$0$i7 = (($$0$p$i) + ($306))|0;
  $316 = (($fit_valueA) + ($i$778<<2)|0);
  $317 = HEAP32[$316>>2]|0;
  $318 = ($317|0)<(0);
  $319 = (($fit_valueB) + ($i$778<<2)|0);
  $320 = HEAP32[$319>>2]|0;
  if ($318) {
   $$0$i = $320;
  } else {
   $321 = ($320|0)<(0);
   if ($321) {
    $$0$i = $317;
   } else {
    $322 = (($320) + ($317))|0;
    $323 = $322 >> 1;
    $$0$i = $323;
   }
  }
  $324 = ($$0$i|0)<(0);
  $325 = ($$0$i7|0)==($$0$i|0);
  $or$cond6 = $324 | $325;
  $326 = $$0$i7 | 32768;
  $$$0$i = $or$cond6 ? $326 : $$0$i;
  $327 = (($277) + ($i$778<<2)|0);
  HEAP32[$327>>2] = $$$0$i;
  $328 = (($i$778) + 1)|0;
  $exitcond = ($328|0)==($5|0);
  if ($exitcond) {
   $output$0 = $277;
   break;
  } else {
   $i$778 = $328;
  }
 }
 STACKTOP = sp;return ($output$0|0);
}
function _floor1_interpolate_fit($vb,$look,$A,$B,$del) {
 $vb = $vb|0;
 $look = $look|0;
 $A = $A|0;
 $B = $B|0;
 $del = $del|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$02 = 0, $or$cond = 0, $output$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($look)) + 1284|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($A|0)!=(0|0);
 $3 = ($B|0)!=(0|0);
 $or$cond = $2 & $3;
 if (!($or$cond)) {
  $output$0 = 0;
  return ($output$0|0);
 }
 $4 = $1 << 2;
 $5 = (__vorbis_block_alloc($vb,$4)|0);
 $6 = ($1|0)>(0);
 if (!($6)) {
  $output$0 = $5;
  return ($output$0|0);
 }
 $7 = (65536 - ($del))|0;
 $i$02 = 0;
 while(1) {
  $8 = (($A) + ($i$02<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 & 32767;
  $11 = Math_imul($10, $7)|0;
  $12 = (($B) + ($i$02<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 & 32767;
  $15 = Math_imul($14, $del)|0;
  $16 = (($11) + 32768)|0;
  $17 = (($16) + ($15))|0;
  $18 = $17 >> 16;
  $19 = (($5) + ($i$02<<2)|0);
  HEAP32[$19>>2] = $18;
  $20 = HEAP32[$8>>2]|0;
  $21 = $20 & 32768;
  $22 = ($21|0)==(0);
  if (!($22)) {
   $23 = HEAP32[$12>>2]|0;
   $24 = $23 & 32768;
   $25 = ($24|0)==(0);
   if (!($25)) {
    $26 = $18 | 32768;
    HEAP32[$19>>2] = $26;
   }
  }
  $27 = (($i$02) + 1)|0;
  $exitcond = ($27|0)==($1|0);
  if ($exitcond) {
   $output$0 = $5;
   break;
  } else {
   $i$02 = $27;
  }
 }
 return ($output$0|0);
}
function _floor1_encode($opb,$vb,$look,$post,$ilogmask) {
 $opb = $opb|0;
 $vb = $vb|0;
 $look = $look|0;
 $post = $post|0;
 $ilogmask = $ilogmask|0;
 var $$ = 0, $$0 = 0, $$0$i = 0, $$0$p$i = 0, $$phi$trans$insert = 0, $$pn$i = 0, $$pre = 0, $$pre50 = 0, $$pre51 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bookas = 0, $cshift$021 = 0;
 var $cshift$021$us = 0, $cval$0$lcssa = 0, $cval$020 = 0, $cval$020$us = 0, $err$04$i = 0, $err$1$i = 0, $exitcond = 0, $exitcond$i = 0, $exitcond46 = 0, $exitcond47 = 0, $exitcond48 = 0, $exitcond49 = 0, $hx$0$lcssa = 0, $hx$011 = 0, $hx$1 = 0, $i$040 = 0, $i$135 = 0, $i$231 = 0, $ispos$i = 0, $ispos$i1 = 0;
 var $ispos1$i = 0, $j$027 = 0, $j$110 = 0, $j$29 = 0, $k$016 = 0, $k$122 = 0, $k$122$us = 0, $k$224 = 0, $l$018$us = 0, $l$018$us$lcssa = 0, $lx$012 = 0, $lx$1 = 0, $ly$0$lcssa = 0, $ly$013 = 0, $ly$1 = 0, $maxval = 0, $neg$i = 0, $neg$i2 = 0, $neg2$i = 0, $or$cond = 0;
 var $out = 0, $val$0 = 0, $val1$0 = 0, $x1$n$i = 0, $y$03$i = 0, $y$1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0;
 $out = sp + 64|0;
 $bookas = sp + 32|0;
 $maxval = sp;
 $0 = ((($look)) + 1296|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($look)) + 1284|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($vb)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 2848|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($post|0)==(0|0);
 if ($12) {
  _oggpack_write($opb,0,1);
  $224 = ((($vb)) + 36|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = (($225|0) / 2)&-1;
  $227 = $226 << 2;
  _memset(($ilogmask|0),0,($227|0))|0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = ($3|0)>(0);
 if ($13) {
  $14 = ((($1)) + 832|0);
  $i$040 = 0;
  while(1) {
   $15 = (($post) + ($i$040<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $16 & 32767;
   $18 = HEAP32[$14>>2]|0;
   if ((($18|0) == 4)) {
    $22 = $17 >>> 4;
    $val$0 = $22;
   } else if ((($18|0) == 1)) {
    $19 = $17 >>> 2;
    $val$0 = $19;
   } else if ((($18|0) == 2)) {
    $20 = $17 >>> 3;
    $val$0 = $20;
   } else if ((($18|0) == 3)) {
    $21 = (($17>>>0) / 12)&-1;
    $val$0 = $21;
   } else {
    $val$0 = $17;
   }
   $23 = $16 & 32768;
   $24 = $23 | $val$0;
   HEAP32[$15>>2] = $24;
   $25 = (($i$040) + 1)|0;
   $exitcond49 = ($25|0)==($3|0);
   if ($exitcond49) {
    break;
   } else {
    $i$040 = $25;
   }
  }
 }
 $26 = HEAP32[$post>>2]|0;
 HEAP32[$out>>2] = $26;
 $27 = ((($post)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($out)) + 4|0);
 HEAP32[$29>>2] = $28;
 $30 = ($3|0)>(2);
 $31 = ((($look)) + 1292|0);
 if ($30) {
  $i$135 = 2;
  while(1) {
   $32 = (($i$135) + -2)|0;
   $33 = (((($look)) + 1032|0) + ($32<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (((($look)) + 780|0) + ($32<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (((($1)) + 836|0) + ($34<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (((($1)) + 836|0) + ($36<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($post) + ($34<<2)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($post) + ($36<<2)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (((($1)) + 836|0) + ($i$135<<2)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $42 & 32767;
   $48 = $44 & 32767;
   $49 = (($48) - ($47))|0;
   $50 = (($40) - ($38))|0;
   $ispos$i = ($49|0)>(-1);
   $neg$i = (0 - ($49))|0;
   $51 = $ispos$i ? $49 : $neg$i;
   $52 = (($46) - ($38))|0;
   $53 = Math_imul($51, $52)|0;
   $54 = (($53|0) / ($50|0))&-1;
   $55 = ($49|0)<(0);
   $56 = (0 - ($54))|0;
   $$0$p$i = $55 ? $56 : $54;
   $$0$i = (($$0$p$i) + ($47))|0;
   $57 = (($post) + ($i$135<<2)|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $58 & 32768;
   $60 = ($59|0)!=(0);
   $61 = ($58|0)==($$0$i|0);
   $or$cond = $60 | $61;
   if ($or$cond) {
    $62 = $$0$i | 32768;
    HEAP32[$57>>2] = $62;
    $63 = (($out) + ($i$135<<2)|0);
    HEAP32[$63>>2] = 0;
   } else {
    $64 = HEAP32[$31>>2]|0;
    $65 = (($64) - ($$0$i))|0;
    $66 = ($65|0)<($$0$i|0);
    $$ = $66 ? $65 : $$0$i;
    $67 = (($58) - ($$0$i))|0;
    $68 = ($67|0)<(0);
    do {
     if ($68) {
      $69 = (0 - ($$))|0;
      $70 = ($67|0)<($69|0);
      if ($70) {
       $71 = $67 ^ -1;
       $72 = (($$) + ($71))|0;
       $val1$0 = $72;
       break;
      } else {
       $73 = $67 << 1;
       $74 = $73 ^ -1;
       $val1$0 = $74;
       break;
      }
     } else {
      $75 = ($$|0)>($67|0);
      if ($75) {
       $77 = $67 << 1;
       $val1$0 = $77;
       break;
      } else {
       $76 = (($$) + ($67))|0;
       $val1$0 = $76;
       break;
      }
     }
    } while(0);
    $78 = (($out) + ($i$135<<2)|0);
    HEAP32[$78>>2] = $val1$0;
    HEAP32[$41>>2] = $47;
    $79 = HEAP32[$43>>2]|0;
    $80 = $79 & 32767;
    HEAP32[$43>>2] = $80;
   }
   $81 = (($i$135) + 1)|0;
   $exitcond48 = ($81|0)==($3|0);
   if ($exitcond48) {
    break;
   } else {
    $i$135 = $81;
   }
  }
  $$pre = HEAP32[$out>>2]|0;
  $$pre50 = HEAP32[$29>>2]|0;
  $95 = $$pre;$99 = $$pre50;
 } else {
  $95 = $26;$99 = $28;
 }
 _oggpack_write($opb,1,1);
 $82 = ((($look)) + 1308|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = (($83) + 1)|0;
 HEAP32[$82>>2] = $84;
 $85 = HEAP32[$31>>2]|0;
 $86 = (($85) + -1)|0;
 $87 = (_ov_ilog($86)|0);
 $88 = $87 << 1;
 $89 = ((($look)) + 1304|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (($90) + ($88))|0;
 HEAP32[$89>>2] = $91;
 $92 = HEAP32[$31>>2]|0;
 $93 = (($92) + -1)|0;
 $94 = (_ov_ilog($93)|0);
 _oggpack_write($opb,$95,$94);
 $96 = HEAP32[$31>>2]|0;
 $97 = (($96) + -1)|0;
 $98 = (_ov_ilog($97)|0);
 _oggpack_write($opb,$99,$98);
 $100 = HEAP32[$1>>2]|0;
 $101 = ($100|0)>(0);
 if ($101) {
  $102 = ((($look)) + 1300|0);
  $i$231 = 0;$j$027 = 2;
  while(1) {
   $103 = (((($1)) + 4|0) + ($i$231<<2)|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = (((($1)) + 128|0) + ($104<<2)|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (((($1)) + 192|0) + ($104<<2)|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = 1 << $108;
   ;HEAP32[$bookas>>2]=0|0;HEAP32[$bookas+4>>2]=0|0;HEAP32[$bookas+8>>2]=0|0;HEAP32[$bookas+12>>2]=0|0;HEAP32[$bookas+16>>2]=0|0;HEAP32[$bookas+20>>2]=0|0;HEAP32[$bookas+24>>2]=0|0;HEAP32[$bookas+28>>2]=0|0;
   $110 = ($108|0)==(0);
   if (!($110)) {
    ;HEAP32[$maxval>>2]=0|0;HEAP32[$maxval+4>>2]=0|0;HEAP32[$maxval+8>>2]=0|0;HEAP32[$maxval+12>>2]=0|0;HEAP32[$maxval+16>>2]=0|0;HEAP32[$maxval+20>>2]=0|0;HEAP32[$maxval+24>>2]=0|0;HEAP32[$maxval+28>>2]=0|0;
    $111 = ($108|0)==(31);
    if (!($111)) {
     $k$016 = 0;
     while(1) {
      $127 = ((((($1)) + 320|0) + ($104<<5)|0) + ($k$016<<2)|0);
      $128 = HEAP32[$127>>2]|0;
      $129 = ($128|0)<(0);
      if ($129) {
       $$sink = 1;
      } else {
       $130 = (((($9)) + 1824|0) + ($128<<2)|0);
       $131 = HEAP32[$130>>2]|0;
       $132 = ((($131)) + 4|0);
       $133 = HEAP32[$132>>2]|0;
       $$sink = $133;
      }
      $134 = (($maxval) + ($k$016<<2)|0);
      HEAP32[$134>>2] = $$sink;
      $135 = (($k$016) + 1)|0;
      $136 = ($135|0)<($109|0);
      if ($136) {
       $k$016 = $135;
      } else {
       break;
      }
     }
    }
    $112 = ($106|0)>(0);
    L48: do {
     if ($112) {
      if ($111) {
       $cshift$021 = 0;$cval$020 = 0;$k$122 = 0;
       while(1) {
        $137 = (($bookas) + ($k$122<<2)|0);
        $138 = HEAP32[$137>>2]|0;
        $139 = $138 << $cshift$021;
        $140 = $139 | $cval$020;
        $141 = (($cshift$021) + 31)|0;
        $142 = (($k$122) + 1)|0;
        $exitcond = ($142|0)==($106|0);
        if ($exitcond) {
         $cval$0$lcssa = $140;
         break L48;
        } else {
         $cshift$021 = $141;$cval$020 = $140;$k$122 = $142;
        }
       }
      } else {
       $cshift$021$us = 0;$cval$020$us = 0;$k$122$us = 0;
      }
      while(1) {
       $125 = (($k$122$us) + ($j$027))|0;
       $126 = (($out) + ($125<<2)|0);
       $115 = HEAP32[$126>>2]|0;
       $l$018$us = 0;
       while(1) {
        $113 = (($maxval) + ($l$018$us<<2)|0);
        $114 = HEAP32[$113>>2]|0;
        $116 = ($115|0)<($114|0);
        if ($116) {
         $l$018$us$lcssa = $l$018$us;
         label = 31;
         break;
        }
        $117 = (($l$018$us) + 1)|0;
        $118 = ($117|0)<($109|0);
        if ($118) {
         $l$018$us = $117;
        } else {
         label = 33;
         break;
        }
       }
       if ((label|0) == 31) {
        label = 0;
        $119 = (($bookas) + ($k$122$us<<2)|0);
        HEAP32[$119>>2] = $l$018$us$lcssa;
        $121 = $l$018$us$lcssa;
       }
       else if ((label|0) == 33) {
        label = 0;
        $$phi$trans$insert = (($bookas) + ($k$122$us<<2)|0);
        $$pre51 = HEAP32[$$phi$trans$insert>>2]|0;
        $121 = $$pre51;
       }
       $120 = $121 << $cshift$021$us;
       $122 = $120 | $cval$020$us;
       $123 = (($cshift$021$us) + ($108))|0;
       $124 = (($k$122$us) + 1)|0;
       $exitcond47 = ($124|0)==($106|0);
       if ($exitcond47) {
        $cval$0$lcssa = $122;
        break;
       } else {
        $cshift$021$us = $123;$cval$020$us = $122;$k$122$us = $124;
       }
      }
     } else {
      $cval$0$lcssa = 0;
     }
    } while(0);
    $143 = (((($1)) + 256|0) + ($104<<2)|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = (($11) + (($144*56)|0)|0);
    $146 = (_vorbis_book_encode($145,$cval$0$lcssa,$opb)|0);
    $147 = HEAP32[$102>>2]|0;
    $148 = (($147) + ($146))|0;
    HEAP32[$102>>2] = $148;
   }
   $149 = ($106|0)>(0);
   if ($149) {
    $k$224 = 0;
    while(1) {
     $150 = (($bookas) + ($k$224<<2)|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ((((($1)) + 320|0) + ($104<<5)|0) + ($151<<2)|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = ($153|0)>(-1);
     if ($154) {
      $155 = (($k$224) + ($j$027))|0;
      $156 = (($out) + ($155<<2)|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = (((($11) + (($153*56)|0)|0)) + 4|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($157|0)<($159|0);
      if ($160) {
       $161 = (($11) + (($153*56)|0)|0);
       $162 = (_vorbis_book_encode($161,$157,$opb)|0);
       $163 = HEAP32[$89>>2]|0;
       $164 = (($163) + ($162))|0;
       HEAP32[$89>>2] = $164;
      }
     }
     $165 = (($k$224) + 1)|0;
     $exitcond46 = ($165|0)==($106|0);
     if ($exitcond46) {
      break;
     } else {
      $k$224 = $165;
     }
    }
   }
   $166 = (($106) + ($j$027))|0;
   $167 = (($i$231) + 1)|0;
   $168 = HEAP32[$1>>2]|0;
   $169 = ($167|0)<($168|0);
   if ($169) {
    $i$231 = $167;$j$027 = $166;
   } else {
    break;
   }
  }
 }
 $170 = HEAP32[$post>>2]|0;
 $171 = ((($1)) + 832|0);
 $172 = HEAP32[$171>>2]|0;
 $173 = Math_imul($172, $170)|0;
 $174 = ((($vb)) + 28|0);
 $175 = HEAP32[$174>>2]|0;
 $176 = (($9) + ($175<<2)|0);
 $177 = HEAP32[$176>>2]|0;
 $178 = (($177|0) / 2)&-1;
 $179 = HEAP32[$2>>2]|0;
 $180 = ($179|0)>(1);
 if ($180) {
  $hx$011 = 0;$j$110 = 1;$lx$012 = 0;$ly$013 = $173;
  while(1) {
   $185 = (((($look)) + 260|0) + ($j$110<<2)|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = (($post) + ($186<<2)|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = $188 & 32767;
   $190 = ($189|0)==($188|0);
   if ($190) {
    $191 = HEAP32[$171>>2]|0;
    $192 = Math_imul($191, $188)|0;
    $193 = (((($1)) + 836|0) + ($186<<2)|0);
    $194 = HEAP32[$193>>2]|0;
    $195 = (($192) - ($ly$013))|0;
    $196 = (($194) - ($lx$012))|0;
    $ispos$i1 = ($195|0)>(-1);
    $neg$i2 = (0 - ($195))|0;
    $197 = $ispos$i1 ? $195 : $neg$i2;
    $198 = (($195|0) / ($196|0))&-1;
    $199 = $195 >> 31;
    $200 = $199 | 1;
    $201 = Math_imul($198, $196)|0;
    $ispos1$i = ($201|0)>(-1);
    $neg2$i = (0 - ($201))|0;
    $202 = $ispos1$i ? $201 : $neg2$i;
    $203 = (($197) - ($202))|0;
    $204 = ($178|0)>($194|0);
    $x1$n$i = $204 ? $194 : $178;
    $205 = ($x1$n$i|0)>($lx$012|0);
    if ($205) {
     $206 = (($ilogmask) + ($lx$012<<2)|0);
     HEAP32[$206>>2] = $ly$013;
    }
    $207 = (($lx$012) + 1)|0;
    $208 = ($207|0)<($x1$n$i|0);
    if ($208) {
     $214 = $207;$err$04$i = 0;$y$03$i = $ly$013;
     while(1) {
      $209 = (($err$04$i) + ($203))|0;
      $210 = ($209|0)<($196|0);
      $211 = $210 ? 0 : $200;
      $212 = $210 ? 0 : $196;
      $err$1$i = (($209) - ($212))|0;
      $$pn$i = (($y$03$i) + ($198))|0;
      $y$1$i = (($$pn$i) + ($211))|0;
      $213 = (($ilogmask) + ($214<<2)|0);
      HEAP32[$213>>2] = $y$1$i;
      $215 = (($214) + 1)|0;
      $exitcond$i = ($215|0)==($x1$n$i|0);
      if ($exitcond$i) {
       $hx$1 = $194;$lx$1 = $194;$ly$1 = $192;
       break;
      } else {
       $214 = $215;$err$04$i = $err$1$i;$y$03$i = $y$1$i;
      }
     }
    } else {
     $hx$1 = $194;$lx$1 = $194;$ly$1 = $192;
    }
   } else {
    $hx$1 = $hx$011;$lx$1 = $lx$012;$ly$1 = $ly$013;
   }
   $216 = (($j$110) + 1)|0;
   $217 = HEAP32[$2>>2]|0;
   $218 = ($216|0)<($217|0);
   if ($218) {
    $hx$011 = $hx$1;$j$110 = $216;$lx$012 = $lx$1;$ly$013 = $ly$1;
   } else {
    $hx$0$lcssa = $hx$1;$ly$0$lcssa = $ly$1;
    break;
   }
  }
 } else {
  $hx$0$lcssa = 0;$ly$0$lcssa = $173;
 }
 $181 = ((($vb)) + 36|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = (($182|0) / 2)&-1;
 $184 = ($hx$0$lcssa|0)<($183|0);
 if ($184) {
  $j$29 = $hx$0$lcssa;
 } else {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $219 = (($ilogmask) + ($j$29<<2)|0);
  HEAP32[$219>>2] = $ly$0$lcssa;
  $220 = (($j$29) + 1)|0;
  $221 = HEAP32[$181>>2]|0;
  $222 = (($221|0) / 2)&-1;
  $223 = ($220|0)<($222|0);
  if ($223) {
   $j$29 = $220;
  } else {
   $$0 = 1;
   break;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fit_line($a,$fits,$y0,$y1,$info) {
 $a = $a|0;
 $fits = $fits|0;
 $y0 = $y0|0;
 $y1 = $y1|0;
 $info = $info|0;
 var $$0 = 0, $$pr = 0, $$pre = 0, $$pre15 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0;
 var $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0;
 var $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0;
 var $97 = 0.0, $98 = 0.0, $99 = 0.0, $bn$0$lcssa = 0.0, $bn$01 = 0.0, $bn$1 = 0.0, $bn$2 = 0.0, $exitcond = 0, $i$02 = 0, $x2b$0$lcssa = 0.0, $x2b$04 = 0.0, $x2b$1 = 0.0, $x2b$2 = 0.0, $xb$0$lcssa = 0.0, $xb$06 = 0.0, $xb$1 = 0.0, $xb$2 = 0.0, $xyb$0$lcssa = 0.0, $xyb$03 = 0.0, $xyb$1 = 0.0;
 var $xyb$2 = 0.0, $yb$0$lcssa = 0.0, $yb$05 = 0.0, $yb$1 = 0.0, $yb$2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = (($fits) + -1)|0;
 $2 = (((($a) + (($1*56)|0)|0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($fits|0)>(0);
 if ($4) {
  $5 = ((($info)) + 1108|0);
  $6 = +HEAPF32[$5>>2];
  $bn$01 = 0.0;$i$02 = 0;$x2b$04 = 0.0;$xb$06 = 0.0;$xyb$03 = 0.0;$yb$05 = 0.0;
  while(1) {
   $7 = (((($a) + (($i$02*56)|0)|0)) + 52|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (((($a) + (($i$02*56)|0)|0)) + 28|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($10) + ($8))|0;
   $12 = (+($11|0));
   $13 = $12 * $6;
   $14 = (($10) + 1)|0;
   $15 = (+($14|0));
   $16 = $13 / $15;
   $17 = $16;
   $18 = $17 + 1.0;
   $19 = (((($a) + (($i$02*56)|0)|0)) + 32|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (+($20|0));
   $22 = (((($a) + (($i$02*56)|0)|0)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (+($23|0));
   $25 = $24 * $18;
   $26 = $21 + $xb$06;
   $27 = $26 + $25;
   $28 = (((($a) + (($i$02*56)|0)|0)) + 36|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (+($29|0));
   $31 = (((($a) + (($i$02*56)|0)|0)) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (+($32|0));
   $34 = $33 * $18;
   $35 = $30 + $yb$05;
   $36 = $35 + $34;
   $37 = (((($a) + (($i$02*56)|0)|0)) + 40|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (+($38|0));
   $40 = (((($a) + (($i$02*56)|0)|0)) + 16|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (+($41|0));
   $43 = $42 * $18;
   $44 = $39 + $x2b$04;
   $45 = $44 + $43;
   $46 = (((($a) + (($i$02*56)|0)|0)) + 48|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (+($47|0));
   $49 = (((($a) + (($i$02*56)|0)|0)) + 24|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (+($50|0));
   $52 = $51 * $18;
   $53 = $48 + $xyb$03;
   $54 = $53 + $52;
   $55 = (+($8|0));
   $56 = (+($10|0));
   $57 = $18 * $56;
   $58 = $55 + $bn$01;
   $59 = $58 + $57;
   $60 = (($i$02) + 1)|0;
   $exitcond = ($60|0)==($fits|0);
   if ($exitcond) {
    $bn$0$lcssa = $59;$x2b$0$lcssa = $45;$xb$0$lcssa = $27;$xyb$0$lcssa = $54;$yb$0$lcssa = $36;
    break;
   } else {
    $bn$01 = $59;$i$02 = $60;$x2b$04 = $45;$xb$06 = $27;$xyb$03 = $54;$yb$05 = $36;
   }
  }
 } else {
  $bn$0$lcssa = 0.0;$x2b$0$lcssa = 0.0;$xb$0$lcssa = 0.0;$xyb$0$lcssa = 0.0;$yb$0$lcssa = 0.0;
 }
 $61 = HEAP32[$y0>>2]|0;
 $62 = ($61|0)>(-1);
 if ($62) {
  $63 = (+($0|0));
  $64 = $xb$0$lcssa + $63;
  $65 = (+($61|0));
  $66 = $65 + $yb$0$lcssa;
  $67 = Math_imul($0, $0)|0;
  $68 = (+($67|0));
  $69 = $x2b$0$lcssa + $68;
  $70 = Math_imul($61, $0)|0;
  $71 = (+($70|0));
  $72 = $71 + $xyb$0$lcssa;
  $73 = $bn$0$lcssa + 1.0;
  $bn$1 = $73;$x2b$1 = $69;$xb$1 = $64;$xyb$1 = $72;$yb$1 = $66;
 } else {
  $bn$1 = $bn$0$lcssa;$x2b$1 = $x2b$0$lcssa;$xb$1 = $xb$0$lcssa;$xyb$1 = $xyb$0$lcssa;$yb$1 = $yb$0$lcssa;
 }
 $74 = HEAP32[$y1>>2]|0;
 $75 = ($74|0)>(-1);
 if ($75) {
  $76 = (+($3|0));
  $77 = $xb$1 + $76;
  $78 = (+($74|0));
  $79 = $78 + $yb$1;
  $80 = Math_imul($3, $3)|0;
  $81 = (+($80|0));
  $82 = $x2b$1 + $81;
  $83 = Math_imul($74, $3)|0;
  $84 = (+($83|0));
  $85 = $84 + $xyb$1;
  $86 = $bn$1 + 1.0;
  $bn$2 = $86;$x2b$2 = $82;$xb$2 = $77;$xyb$2 = $85;$yb$2 = $79;
 } else {
  $bn$2 = $bn$1;$x2b$2 = $x2b$1;$xb$2 = $xb$1;$xyb$2 = $xyb$1;$yb$2 = $yb$1;
 }
 $87 = $x2b$2 * $bn$2;
 $88 = $xb$2 * $xb$2;
 $89 = $87 - $88;
 $90 = $89 > 0.0;
 if (!($90)) {
  HEAP32[$y0>>2] = 0;
  HEAP32[$y1>>2] = 0;
  $$0 = 1;
  return ($$0|0);
 }
 $91 = $yb$2 * $x2b$2;
 $92 = $xb$2 * $xyb$2;
 $93 = $91 - $92;
 $94 = $93 / $89;
 $95 = $xyb$2 * $bn$2;
 $96 = $xb$2 * $yb$2;
 $97 = $95 - $96;
 $98 = $97 / $89;
 $99 = (+($0|0));
 $100 = $98 * $99;
 $101 = $100 + $94;
 $102 = (+_rint($101));
 $103 = (~~(($102)));
 HEAP32[$y0>>2] = $103;
 $104 = (+($3|0));
 $105 = $98 * $104;
 $106 = $105 + $94;
 $107 = (+_rint($106));
 $108 = (~~(($107)));
 HEAP32[$y1>>2] = $108;
 $109 = HEAP32[$y0>>2]|0;
 $110 = ($109|0)>(1023);
 if ($110) {
  HEAP32[$y0>>2] = 1023;
  $$pr = HEAP32[$y1>>2]|0;
  $111 = $$pr;$117 = 1023;
 } else {
  $111 = $108;$117 = $109;
 }
 $112 = ($111|0)>(1023);
 if ($112) {
  HEAP32[$y1>>2] = 1023;
  $$pre = HEAP32[$y0>>2]|0;
  $113 = $$pre;$118 = 1023;
 } else {
  $113 = $117;$118 = $111;
 }
 $114 = ($113|0)<(0);
 if ($114) {
  HEAP32[$y0>>2] = 0;
  $$pre15 = HEAP32[$y1>>2]|0;
  $115 = $$pre15;
 } else {
  $115 = $118;
 }
 $116 = ($115|0)<(0);
 if (!($116)) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$y1>>2] = 0;
 $$0 = 0;
 return ($$0|0);
}
function _floor1_pack($i,$opb) {
 $i = $i|0;
 $opb = $opb|0;
 var $$maxclass$0 = 0, $$maxclass$0$lcssa = 0, $$pre = 0, $$pre22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $count$03 = 0, $exitcond = 0, $exitcond21 = 0, $j$016 = 0, $j$112 = 0, $j$25 = 0, $k$09 = 0, $k$14 = 0, $k$2$lcssa = 0, $k$22 = 0, $maxclass$017 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($i)) + 836|0);
 $1 = ((($i)) + 840|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$i>>2]|0;
 _oggpack_write($opb,$3,5);
 $4 = HEAP32[$i>>2]|0;
 $5 = ($4|0)>(0);
 if ($5) {
  $6 = ((($i)) + 4|0);
  $j$016 = 0;$maxclass$017 = -1;
  while(1) {
   $12 = (($6) + ($j$016<<2)|0);
   $13 = HEAP32[$12>>2]|0;
   _oggpack_write($opb,$13,4);
   $14 = HEAP32[$12>>2]|0;
   $15 = ($maxclass$017|0)<($14|0);
   $$maxclass$0 = $15 ? $14 : $maxclass$017;
   $16 = (($j$016) + 1)|0;
   $17 = HEAP32[$i>>2]|0;
   $18 = ($16|0)<($17|0);
   if ($18) {
    $j$016 = $16;$maxclass$017 = $$maxclass$0;
   } else {
    $$maxclass$0$lcssa = $$maxclass$0;
    break;
   }
  }
  $7 = ($$maxclass$0$lcssa|0)>(-1);
  if ($7) {
   $8 = ((($i)) + 128|0);
   $9 = ((($i)) + 192|0);
   $10 = ((($i)) + 256|0);
   $11 = ((($i)) + 320|0);
   $j$112 = 0;
   while(1) {
    $19 = (($8) + ($j$112<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (($20) + -1)|0;
    _oggpack_write($opb,$21,3);
    $22 = (($9) + ($j$112<<2)|0);
    $23 = HEAP32[$22>>2]|0;
    _oggpack_write($opb,$23,2);
    $24 = HEAP32[$22>>2]|0;
    $25 = ($24|0)==(0);
    if ($25) {
     $k$09 = 0;
     label = 8;
    } else {
     $26 = (($10) + ($j$112<<2)|0);
     $27 = HEAP32[$26>>2]|0;
     _oggpack_write($opb,$27,8);
     $$pre = HEAP32[$22>>2]|0;
     $28 = ($$pre|0)==(31);
     if (!($28)) {
      $k$09 = 0;
      label = 8;
     }
    }
    if ((label|0) == 8) {
     while(1) {
      label = 0;
      $29 = ((($11) + ($j$112<<5)|0) + ($k$09<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($30) + 1)|0;
      _oggpack_write($opb,$31,8);
      $32 = (($k$09) + 1)|0;
      $33 = HEAP32[$22>>2]|0;
      $34 = 1 << $33;
      $35 = ($32|0)<($34|0);
      if ($35) {
       $k$09 = $32;
       label = 8;
      } else {
       break;
      }
     }
    }
    $36 = (($j$112) + 1)|0;
    $exitcond21 = ($j$112|0)==($$maxclass$0$lcssa|0);
    if ($exitcond21) {
     break;
    } else {
     $j$112 = $36;
    }
   }
  }
 }
 $37 = ((($i)) + 832|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + -1)|0;
 _oggpack_write($opb,$39,2);
 $40 = (($2) + -1)|0;
 $41 = (_ov_ilog($40)|0);
 _oggpack_write($opb,$41,4);
 $42 = (_ov_ilog($40)|0);
 $43 = HEAP32[$i>>2]|0;
 $44 = ($43|0)>(0);
 if (!($44)) {
  return;
 }
 $45 = ((($i)) + 4|0);
 $46 = ((($i)) + 128|0);
 $60 = $43;$count$03 = 0;$j$25 = 0;$k$14 = 0;
 while(1) {
  $47 = (($45) + ($j$25<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($46) + ($48<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + ($count$03))|0;
  $52 = ($k$14|0)<($51|0);
  if ($52) {
   $k$22 = $k$14;
   while(1) {
    $53 = (($k$22) + 2)|0;
    $54 = (($0) + ($53<<2)|0);
    $55 = HEAP32[$54>>2]|0;
    _oggpack_write($opb,$55,$42);
    $56 = (($k$22) + 1)|0;
    $exitcond = ($56|0)==($51|0);
    if ($exitcond) {
     break;
    } else {
     $k$22 = $56;
    }
   }
   $$pre22 = HEAP32[$i>>2]|0;
   $59 = $$pre22;$k$2$lcssa = $51;
  } else {
   $59 = $60;$k$2$lcssa = $k$14;
  }
  $57 = (($j$25) + 1)|0;
  $58 = ($57|0)<($59|0);
  if ($58) {
   $60 = $59;$count$03 = $51;$j$25 = $57;$k$14 = $k$2$lcssa;
  } else {
   break;
  }
 }
 return;
}
function _floor1_unpack($vi,$opb) {
 $vi = $vi|0;
 $opb = $opb|0;
 var $$01 = 0, $$lcssa = 0, $$maxclass$0 = 0, $$maxclass$0$lcssa = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phi50Z2D = 0, $$pre$phi52Z2D = 0, $$pre45 = 0, $$pre47 = 0, $$pre48 = 0, $$pre49 = 0, $$pre51 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $count$0$lcssa = 0, $count$023 = 0, $j$037 = 0, $j$132 = 0, $j$225 = 0, $j$315 = 0, $j$414 = 0, $k$029 = 0, $k$124 = 0, $k$2$lcssa = 0, $k$219 = 0, $maxclass$036 = 0, $or$cond = 0, $sortpointer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $sortpointer = sp;
 $0 = ((($vi)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_calloc(1,1120)|0);
 $3 = (_oggpack_read($opb,5)|0);
 HEAP32[$2>>2] = $3;
 $4 = ($3|0)>(0);
 L1: do {
  if ($4) {
   $5 = ((($2)) + 4|0);
   $j$037 = 0;$maxclass$036 = -1;
   while(1) {
    $12 = (_oggpack_read($opb,4)|0);
    $13 = (($5) + ($j$037<<2)|0);
    HEAP32[$13>>2] = $12;
    $14 = ($12|0)<(0);
    if ($14) {
     break L1;
    }
    $15 = ($maxclass$036|0)<($12|0);
    $$maxclass$0 = $15 ? $12 : $maxclass$036;
    $16 = (($j$037) + 1)|0;
    $17 = HEAP32[$2>>2]|0;
    $18 = ($16|0)<($17|0);
    if ($18) {
     $j$037 = $16;$maxclass$036 = $$maxclass$0;
    } else {
     $$maxclass$0$lcssa = $$maxclass$0;
     break;
    }
   }
   $6 = ($$maxclass$0$lcssa|0)>(-1);
   if ($6) {
    $7 = ((($2)) + 128|0);
    $8 = ((($2)) + 192|0);
    $9 = ((($2)) + 256|0);
    $10 = ((($1)) + 24|0);
    $11 = ((($2)) + 320|0);
    $j$132 = 0;
    while(1) {
     $19 = (_oggpack_read($opb,3)|0);
     $20 = (($19) + 1)|0;
     $21 = (($7) + ($j$132<<2)|0);
     HEAP32[$21>>2] = $20;
     $22 = (_oggpack_read($opb,2)|0);
     $23 = (($8) + ($j$132<<2)|0);
     HEAP32[$23>>2] = $22;
     $24 = ($22|0)<(0);
     if ($24) {
      break L1;
     }
     $25 = ($22|0)==(0);
     if ($25) {
      $$phi$trans$insert = (($9) + ($j$132<<2)|0);
      $$pre = HEAP32[$$phi$trans$insert>>2]|0;
      $28 = $$pre;
     } else {
      $26 = (_oggpack_read($opb,8)|0);
      $27 = (($9) + ($j$132<<2)|0);
      HEAP32[$27>>2] = $26;
      $28 = $26;
     }
     $29 = ($28|0)<(0);
     if ($29) {
      break L1;
     }
     $30 = HEAP32[$10>>2]|0;
     $31 = ($28|0)<($30|0);
     if (!($31)) {
      break L1;
     }
     $32 = HEAP32[$23>>2]|0;
     $33 = ($32|0)==(31);
     if (!($33)) {
      $k$029 = 0;
      while(1) {
       $38 = (_oggpack_read($opb,8)|0);
       $39 = (($38) + -1)|0;
       $40 = ((($11) + ($j$132<<5)|0) + ($k$029<<2)|0);
       HEAP32[$40>>2] = $39;
       $41 = ($38|0)<(0);
       if ($41) {
        break L1;
       }
       $42 = HEAP32[$10>>2]|0;
       $43 = ($38|0)>($42|0);
       $36 = (($k$029) + 1)|0;
       if ($43) {
        break L1;
       }
       $34 = HEAP32[$23>>2]|0;
       $35 = 1 << $34;
       $37 = ($36|0)<($35|0);
       if ($37) {
        $k$029 = $36;
       } else {
        break;
       }
      }
     }
     $44 = (($j$132) + 1)|0;
     $45 = ($j$132|0)<($$maxclass$0$lcssa|0);
     if ($45) {
      $j$132 = $44;
     } else {
      label = 18;
      break;
     }
    }
   } else {
    label = 18;
   }
  } else {
   label = 18;
  }
 } while(0);
 L23: do {
  if ((label|0) == 18) {
   $46 = (_oggpack_read($opb,2)|0);
   $47 = (($46) + 1)|0;
   $48 = ((($2)) + 832|0);
   HEAP32[$48>>2] = $47;
   $49 = (_oggpack_read($opb,4)|0);
   $50 = ($49|0)<(0);
   if (!($50)) {
    $51 = HEAP32[$2>>2]|0;
    $52 = ($51|0)>(0);
    if ($52) {
     $53 = ((($2)) + 4|0);
     $54 = ((($2)) + 128|0);
     $55 = ((($2)) + 836|0);
     $56 = 1 << $49;
     $90 = $51;$count$023 = 0;$j$225 = 0;$k$124 = 0;
     while(1) {
      $57 = (($53) + ($j$225<<2)|0);
      $58 = HEAP32[$57>>2]|0;
      $59 = (($54) + ($58<<2)|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = (($60) + ($count$023))|0;
      $62 = ($61|0)>(63);
      if ($62) {
       break L23;
      }
      $63 = ($k$124|0)<($61|0);
      if ($63) {
       $k$219 = $k$124;
       while(1) {
        $64 = (_oggpack_read($opb,$49)|0);
        $65 = (($k$219) + 2)|0;
        $66 = (($55) + ($65<<2)|0);
        HEAP32[$66>>2] = $64;
        $67 = ($64|0)>(-1);
        $68 = ($64|0)<($56|0);
        $or$cond = $67 & $68;
        if (!($or$cond)) {
         break L23;
        }
        $69 = (($k$219) + 1)|0;
        $70 = ($69|0)<($61|0);
        if ($70) {
         $k$219 = $69;
        } else {
         $$lcssa = $69;
         break;
        }
       }
       $$pre45 = HEAP32[$2>>2]|0;
       $73 = $$pre45;$k$2$lcssa = $$lcssa;
      } else {
       $73 = $90;$k$2$lcssa = $k$124;
      }
      $71 = (($j$225) + 1)|0;
      $72 = ($71|0)<($73|0);
      if ($72) {
       $90 = $73;$count$023 = $61;$j$225 = $71;$k$124 = $k$2$lcssa;
      } else {
       $$pre$phi50Z2D = $55;$$pre$phi52Z2D = $56;$count$0$lcssa = $61;
       break;
      }
     }
    } else {
     $$pre49 = ((($2)) + 836|0);
     $$pre51 = 1 << $49;
     $$pre$phi50Z2D = $$pre49;$$pre$phi52Z2D = $$pre51;$count$0$lcssa = 0;
    }
    HEAP32[$$pre$phi50Z2D>>2] = 0;
    $74 = ((($2)) + 840|0);
    HEAP32[$74>>2] = $$pre$phi52Z2D;
    $75 = (($count$0$lcssa) + 2)|0;
    $76 = ($count$0$lcssa|0)>(-2);
    if ($76) {
     $j$315 = 0;
     while(1) {
      $77 = (($$pre$phi50Z2D) + ($j$315<<2)|0);
      $78 = (($sortpointer) + ($j$315<<2)|0);
      HEAP32[$78>>2] = $77;
      $79 = (($j$315) + 1)|0;
      $80 = ($79|0)<($75|0);
      if ($80) {
       $j$315 = $79;
      } else {
       break;
      }
     }
    }
    _qsort($sortpointer,$75,4,8);
    $81 = ($75|0)>(1);
    L43: do {
     if ($81) {
      $$pre47 = HEAP32[$sortpointer>>2]|0;
      $$pre48 = HEAP32[$$pre47>>2]|0;
      $87 = $$pre48;$j$414 = 1;
      while(1) {
       $84 = (($sortpointer) + ($j$414<<2)|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = HEAP32[$85>>2]|0;
       $88 = ($87|0)==($86|0);
       $82 = (($j$414) + 1)|0;
       if ($88) {
        break;
       }
       $83 = ($82|0)<($75|0);
       if ($83) {
        $87 = $86;$j$414 = $82;
       } else {
        break L43;
       }
      }
      $89 = ($2|0)==(0|0);
      if ($89) {
       $$01 = 0;
      } else {
       break L23;
      }
      STACKTOP = sp;return ($$01|0);
     }
    } while(0);
    $$01 = $2;
    STACKTOP = sp;return ($$01|0);
   }
  }
 } while(0);
 _free($2);
 $$01 = 0;
 STACKTOP = sp;return ($$01|0);
}
function _floor1_look($vd,$in) {
 $vd = $vd|0;
 $in = $in|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $exitcond = 0, $hi$05 = 0, $hi$1 = 0, $hi$1$lcssa = 0;
 var $hx$07 = 0, $hx$1 = 0, $i$026 = 0, $i$121 = 0, $i$218 = 0, $i$316 = 0, $i$413 = 0, $i$510 = 0, $j$08 = 0, $lo$04 = 0, $lo$1 = 0, $lo$1$lcssa = 0, $lx$06 = 0, $lx$1 = 0, $n$0$lcssa32343639 = 0, $n$0$lcssa33 = 0, $n$025 = 0, $or$cond = 0, $or$cond1 = 0, $sortpointer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $sortpointer = sp;
 $0 = (_calloc(1,1312)|0);
 $1 = ((($0)) + 1296|0);
 HEAP32[$1>>2] = $in;
 $2 = ((($in)) + 836|0);
 $3 = ((($in)) + 840|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 1288|0);
 HEAP32[$5>>2] = $4;
 $6 = HEAP32[$in>>2]|0;
 $7 = ($6|0)>(0);
 if ($7) {
  $9 = ((($in)) + 4|0);
  $10 = ((($in)) + 128|0);
  $i$026 = 0;$n$025 = 0;
  while(1) {
   $11 = (($9) + ($i$026<<2)|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($10) + ($12<<2)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + ($n$025))|0;
   $16 = (($i$026) + 1)|0;
   $17 = ($16|0)<($6|0);
   if ($17) {
    $i$026 = $16;$n$025 = $15;
   } else {
    $$lcssa = $15;
    break;
   }
  }
  $18 = (($$lcssa) + 2)|0;
  $19 = ((($0)) + 1284|0);
  HEAP32[$19>>2] = $18;
  $20 = ($$lcssa|0)>(-2);
  if ($20) {
   $25 = $18;$n$0$lcssa33 = $$lcssa;
   label = 7;
  } else {
   _qsort($sortpointer,$18,4,8);
   $n$0$lcssa32343639 = $$lcssa;
  }
 } else {
  $8 = ((($0)) + 1284|0);
  HEAP32[$8>>2] = 2;
  $25 = 2;$n$0$lcssa33 = 0;
  label = 7;
 }
 if ((label|0) == 7) {
  $i$121 = 0;
  while(1) {
   $21 = (($2) + ($i$121<<2)|0);
   $22 = (($sortpointer) + ($i$121<<2)|0);
   HEAP32[$22>>2] = $21;
   $23 = (($i$121) + 1)|0;
   $24 = ($23|0)<($25|0);
   if ($24) {
    $i$121 = $23;
   } else {
    break;
   }
  }
  _qsort($sortpointer,$25,4,8);
  $26 = $2;
  $27 = ((($0)) + 260|0);
  $i$218 = 0;
  while(1) {
   $30 = (($sortpointer) + ($i$218<<2)|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $31;
   $33 = (($32) - ($26))|0;
   $34 = $33 >> 2;
   $35 = (($27) + ($i$218<<2)|0);
   HEAP32[$35>>2] = $34;
   $36 = (($i$218) + 1)|0;
   $37 = ($36|0)<($25|0);
   if ($37) {
    $i$218 = $36;
   } else {
    break;
   }
  }
  $28 = ((($0)) + 260|0);
  $29 = ((($0)) + 520|0);
  $i$316 = 0;
  while(1) {
   $39 = (($28) + ($i$316<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($29) + ($40<<2)|0);
   HEAP32[$41>>2] = $i$316;
   $42 = (($i$316) + 1)|0;
   $43 = ($42|0)<($25|0);
   if ($43) {
    $i$316 = $42;
   } else {
    break;
   }
  }
  $38 = ((($0)) + 260|0);
  $i$413 = 0;
  while(1) {
   $44 = (($38) + ($i$413<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($2) + ($45<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($0) + ($i$413<<2)|0);
   HEAP32[$48>>2] = $47;
   $49 = (($i$413) + 1)|0;
   $50 = ($49|0)<($25|0);
   if ($50) {
    $i$413 = $49;
   } else {
    $n$0$lcssa32343639 = $n$0$lcssa33;
    break;
   }
  }
 }
 $51 = ((($in)) + 832|0);
 $52 = HEAP32[$51>>2]|0;
 if ((($52|0) == 4)) {
  $56 = ((($0)) + 1292|0);
  HEAP32[$56>>2] = 64;
 } else if ((($52|0) == 2)) {
  $54 = ((($0)) + 1292|0);
  HEAP32[$54>>2] = 128;
 } else if ((($52|0) == 1)) {
  $53 = ((($0)) + 1292|0);
  HEAP32[$53>>2] = 256;
 } else if ((($52|0) == 3)) {
  $55 = ((($0)) + 1292|0);
  HEAP32[$55>>2] = 86;
 }
 $57 = ($n$0$lcssa32343639|0)>(0);
 if (!($57)) {
  STACKTOP = sp;return ($0|0);
 }
 $58 = ((($0)) + 1032|0);
 $59 = ((($0)) + 780|0);
 $i$510 = 0;
 while(1) {
  $60 = (($i$510) + 2)|0;
  $61 = (($2) + ($60<<2)|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = HEAP32[$5>>2]|0;
  $hi$05 = 1;$hx$07 = $63;$j$08 = 0;$lo$04 = 0;$lx$06 = 0;
  while(1) {
   $64 = (($2) + ($j$08<<2)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ($65|0)>($lx$06|0);
   $67 = ($65|0)<($62|0);
   $or$cond = $66 & $67;
   $lo$1 = $or$cond ? $j$08 : $lo$04;
   $lx$1 = $or$cond ? $65 : $lx$06;
   $68 = ($65|0)<($hx$07|0);
   $69 = ($65|0)>($62|0);
   $or$cond1 = $68 & $69;
   $hi$1 = $or$cond1 ? $j$08 : $hi$05;
   $hx$1 = $or$cond1 ? $65 : $hx$07;
   $70 = (($j$08) + 1)|0;
   $71 = ($70|0)<($60|0);
   if ($71) {
    $hi$05 = $hi$1;$hx$07 = $hx$1;$j$08 = $70;$lo$04 = $lo$1;$lx$06 = $lx$1;
   } else {
    $hi$1$lcssa = $hi$1;$lo$1$lcssa = $lo$1;
    break;
   }
  }
  $72 = (($58) + ($i$510<<2)|0);
  HEAP32[$72>>2] = $lo$1$lcssa;
  $73 = (($59) + ($i$510<<2)|0);
  HEAP32[$73>>2] = $hi$1$lcssa;
  $74 = (($i$510) + 1)|0;
  $exitcond = ($74|0)==($n$0$lcssa32343639|0);
  if ($exitcond) {
   break;
  } else {
   $i$510 = $74;
  }
 }
 STACKTOP = sp;return ($0|0);
}
function _floor1_free_info($i) {
 $i = $i|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($i|0)==(0|0);
 if (!($0)) {
  _free($i);
 }
 return;
}
function _floor1_free_look($i) {
 $i = $i|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($i|0)==(0|0);
 if (!($0)) {
  _free($i);
 }
 return;
}
function _floor1_inverse1($vb,$in) {
 $vb = $vb|0;
 $in = $in|0;
 var $$0 = 0, $$0$i = 0, $$0$p$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cval$1$ph = 0, $cval$15 = 0, $i$09 = 0, $i$14 = 0, $ispos$i = 0, $j$08 = 0, $k$06 = 0, $neg$i = 0, $val$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($in)) + 1296|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($vb)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 2848|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($vb)) + 4|0);
 $11 = (_oggpack_read($10,1)|0);
 $12 = ($11|0)==(1);
 if (!($12)) {
  $$0 = 0;
  return ($$0|0);
 }
 $13 = ((($in)) + 1284|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 << 2;
 $16 = (__vorbis_block_alloc($vb,$15)|0);
 $17 = ((($in)) + 1292|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + -1)|0;
 $20 = (_ov_ilog($19)|0);
 $21 = (_oggpack_read($10,$20)|0);
 HEAP32[$16>>2] = $21;
 $22 = HEAP32[$17>>2]|0;
 $23 = (($22) + -1)|0;
 $24 = (_ov_ilog($23)|0);
 $25 = (_oggpack_read($10,$24)|0);
 $26 = ((($16)) + 4|0);
 HEAP32[$26>>2] = $25;
 $27 = HEAP32[$1>>2]|0;
 $28 = ($27|0)>(0);
 L4: do {
  if ($28) {
   $i$09 = 0;$j$08 = 2;
   L5: while(1) {
    $33 = (((($1)) + 4|0) + ($i$09<<2)|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (((($1)) + 128|0) + ($34<<2)|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (((($1)) + 192|0) + ($34<<2)|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = 1 << $38;
    $40 = ($38|0)==(0);
    if ($40) {
     $cval$1$ph = 0;
    } else {
     $41 = (((($1)) + 256|0) + ($34<<2)|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = (($9) + (($42*56)|0)|0);
     $44 = (_vorbis_book_decode($43,$10)|0);
     $45 = ($44|0)==(-1);
     if ($45) {
      $$0 = 0;
      label = 25;
      break;
     } else {
      $cval$1$ph = $44;
     }
    }
    $46 = ($36|0)>(0);
    if ($46) {
     $47 = (($39) + -1)|0;
     $cval$15 = $cval$1$ph;$k$06 = 0;
     while(1) {
      $48 = $cval$15 & $47;
      $49 = ((((($1)) + 320|0) + ($34<<5)|0) + ($48<<2)|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = $cval$15 >> $38;
      $52 = ($50|0)>(-1);
      if ($52) {
       $53 = (($9) + (($50*56)|0)|0);
       $54 = (_vorbis_book_decode($53,$10)|0);
       $55 = (($k$06) + ($j$08))|0;
       $56 = (($16) + ($55<<2)|0);
       HEAP32[$56>>2] = $54;
       $57 = ($54|0)==(-1);
       if ($57) {
        $$0 = 0;
        label = 25;
        break L5;
       }
      } else {
       $58 = (($k$06) + ($j$08))|0;
       $59 = (($16) + ($58<<2)|0);
       HEAP32[$59>>2] = 0;
      }
      $60 = (($k$06) + 1)|0;
      $61 = ($60|0)<($36|0);
      if ($61) {
       $cval$15 = $51;$k$06 = $60;
      } else {
       break;
      }
     }
    }
    $62 = (($36) + ($j$08))|0;
    $63 = (($i$09) + 1)|0;
    $64 = HEAP32[$1>>2]|0;
    $65 = ($63|0)<($64|0);
    if ($65) {
     $i$09 = $63;$j$08 = $62;
    } else {
     break L4;
    }
   }
   if ((label|0) == 25) {
    return ($$0|0);
   }
  }
 } while(0);
 $29 = HEAP32[$13>>2]|0;
 $30 = ($29|0)>(2);
 if (!($30)) {
  $$0 = $16;
  return ($$0|0);
 }
 $31 = ((($in)) + 1032|0);
 $32 = ((($in)) + 780|0);
 $i$14 = 2;
 while(1) {
  $66 = (($i$14) + -2)|0;
  $67 = (($31) + ($66<<2)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (((($1)) + 836|0) + ($68<<2)|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($32) + ($66<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (((($1)) + 836|0) + ($72<<2)|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($16) + ($68<<2)|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($16) + ($72<<2)|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (((($1)) + 836|0) + ($i$14<<2)|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $76 & 32767;
  $82 = $78 & 32767;
  $83 = (($82) - ($81))|0;
  $84 = (($74) - ($70))|0;
  $ispos$i = ($83|0)>(-1);
  $neg$i = (0 - ($83))|0;
  $85 = $ispos$i ? $83 : $neg$i;
  $86 = (($80) - ($70))|0;
  $87 = Math_imul($85, $86)|0;
  $88 = (($87|0) / ($84|0))&-1;
  $89 = ($83|0)<(0);
  $90 = (0 - ($88))|0;
  $$0$p$i = $89 ? $90 : $88;
  $$0$i = (($$0$p$i) + ($81))|0;
  $91 = HEAP32[$17>>2]|0;
  $92 = (($91) - ($$0$i))|0;
  $93 = (($16) + ($i$14<<2)|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ($94|0)==(0);
  if ($95) {
   $120 = $$0$i | 32768;
   HEAP32[$93>>2] = $120;
  } else {
   $96 = ($92|0)<($$0$i|0);
   $97 = $96 ? $92 : $$0$i;
   $98 = $97 << 1;
   $99 = ($94|0)<($98|0);
   do {
    if ($99) {
     $104 = $94 & 1;
     $105 = ($104|0)==(0);
     if ($105) {
      $109 = $94 >> 1;
      $val$0 = $109;
      break;
     } else {
      $106 = (($94) + 1)|0;
      $107 = $106 >> 1;
      $108 = (0 - ($107))|0;
      $val$0 = $108;
      break;
     }
    } else {
     $100 = ($92|0)>($$0$i|0);
     if ($100) {
      $101 = (($94) - ($$0$i))|0;
      $val$0 = $101;
      break;
     } else {
      $102 = (($94) - ($92))|0;
      $103 = $102 ^ -1;
      $val$0 = $103;
      break;
     }
    }
   } while(0);
   $110 = (($val$0) + ($$0$i))|0;
   $111 = $110 & 32767;
   HEAP32[$93>>2] = $111;
   $112 = HEAP32[$67>>2]|0;
   $113 = (($16) + ($112<<2)|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = $114 & 32767;
   HEAP32[$113>>2] = $115;
   $116 = HEAP32[$71>>2]|0;
   $117 = (($16) + ($116<<2)|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = $118 & 32767;
   HEAP32[$117>>2] = $119;
  }
  $121 = (($i$14) + 1)|0;
  $122 = HEAP32[$13>>2]|0;
  $123 = ($121|0)<($122|0);
  if ($123) {
   $i$14 = $121;
  } else {
   $$0 = $16;
   break;
  }
 }
 return ($$0|0);
}
function _floor1_inverse2($vb,$in,$memo,$out) {
 $vb = $vb|0;
 $in = $in|0;
 $memo = $memo|0;
 $out = $out|0;
 var $$0 = 0, $$pn$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $8 = 0, $9 = 0;
 var $err$04$i = 0, $err$1$i = 0, $exitcond = 0, $exitcond$i = 0, $hx$0$lcssa = 0, $hx$03 = 0, $hx$1 = 0, $ispos$i = 0, $ispos1$i = 0, $j$02 = 0, $j$11 = 0, $lx$04 = 0, $lx$1 = 0, $ly$0$lcssa = 0, $ly$05 = 0, $ly$1 = 0, $neg$i = 0, $neg2$i = 0, $x1$n$i = 0, $y$03$i = 0;
 var $y$1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($in)) + 1296|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($vb)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($vb)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11|0) / 2)&-1;
 $13 = ($memo|0)==(0|0);
 if ($13) {
  $77 = $12 << 2;
  _memset(($out|0),0,($77|0))|0;
  $$0 = 0;
  return ($$0|0);
 }
 $14 = HEAP32[$memo>>2]|0;
 $15 = ((($1)) + 832|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = Math_imul($16, $14)|0;
 $18 = ($17|0)<(0);
 $19 = ($17|0)>(255);
 $20 = $19 ? 255 : $17;
 $21 = $18 ? 0 : $20;
 $22 = ((($in)) + 1284|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)>(1);
 if ($24) {
  $25 = ((($in)) + 260|0);
  $hx$03 = 0;$j$02 = 1;$lx$04 = 0;$ly$05 = $21;
  while(1) {
   $29 = (($25) + ($j$02<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($memo) + ($30<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $32 & 32767;
   $34 = ($33|0)==($32|0);
   if ($34) {
    $35 = (((($1)) + 836|0) + ($30<<2)|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = Math_imul($16, $32)|0;
    $38 = ($37|0)<(0);
    $39 = ($37|0)>(255);
    $40 = $39 ? 255 : $37;
    $41 = $38 ? 0 : $40;
    $42 = (($41) - ($ly$05))|0;
    $43 = (($36) - ($lx$04))|0;
    $ispos$i = ($42|0)>(-1);
    $neg$i = (0 - ($42))|0;
    $44 = $ispos$i ? $42 : $neg$i;
    $45 = (($42|0) / ($43|0))&-1;
    $46 = $42 >> 31;
    $47 = $46 | 1;
    $48 = Math_imul($45, $43)|0;
    $ispos1$i = ($48|0)>(-1);
    $neg2$i = (0 - ($48))|0;
    $49 = $ispos1$i ? $48 : $neg2$i;
    $50 = (($44) - ($49))|0;
    $51 = ($12|0)>($36|0);
    $x1$n$i = $51 ? $36 : $12;
    $52 = ($x1$n$i|0)>($lx$04|0);
    if ($52) {
     $53 = (1768 + ($ly$05<<2)|0);
     $54 = +HEAPF32[$53>>2];
     $55 = (($out) + ($lx$04<<2)|0);
     $56 = +HEAPF32[$55>>2];
     $57 = $56 * $54;
     HEAPF32[$55>>2] = $57;
    }
    $58 = (($lx$04) + 1)|0;
    $59 = ($58|0)<($x1$n$i|0);
    if ($59) {
     $67 = $58;$err$04$i = 0;$y$03$i = $ly$05;
     while(1) {
      $60 = (($err$04$i) + ($50))|0;
      $61 = ($60|0)<($43|0);
      $62 = $61 ? 0 : $47;
      $63 = $61 ? 0 : $43;
      $err$1$i = (($60) - ($63))|0;
      $$pn$i = (($y$03$i) + ($45))|0;
      $y$1$i = (($$pn$i) + ($62))|0;
      $64 = (1768 + ($y$1$i<<2)|0);
      $65 = +HEAPF32[$64>>2];
      $66 = (($out) + ($67<<2)|0);
      $68 = +HEAPF32[$66>>2];
      $69 = $68 * $65;
      HEAPF32[$66>>2] = $69;
      $70 = (($67) + 1)|0;
      $exitcond$i = ($70|0)==($x1$n$i|0);
      if ($exitcond$i) {
       $hx$1 = $36;$lx$1 = $36;$ly$1 = $41;
       break;
      } else {
       $67 = $70;$err$04$i = $err$1$i;$y$03$i = $y$1$i;
      }
     }
    } else {
     $hx$1 = $36;$lx$1 = $36;$ly$1 = $41;
    }
   } else {
    $hx$1 = $hx$03;$lx$1 = $lx$04;$ly$1 = $ly$05;
   }
   $71 = (($j$02) + 1)|0;
   $72 = ($71|0)<($23|0);
   if ($72) {
    $hx$03 = $hx$1;$j$02 = $71;$lx$04 = $lx$1;$ly$05 = $ly$1;
   } else {
    $hx$0$lcssa = $hx$1;$ly$0$lcssa = $ly$1;
    break;
   }
  }
 } else {
  $hx$0$lcssa = 0;$ly$0$lcssa = $21;
 }
 $26 = ($hx$0$lcssa|0)<($12|0);
 if (!($26)) {
  $$0 = 1;
  return ($$0|0);
 }
 $27 = (1768 + ($ly$0$lcssa<<2)|0);
 $28 = +HEAPF32[$27>>2];
 $j$11 = $hx$0$lcssa;
 while(1) {
  $73 = (($out) + ($j$11<<2)|0);
  $74 = +HEAPF32[$73>>2];
  $75 = $74 * $28;
  HEAPF32[$73>>2] = $75;
  $76 = (($j$11) + 1)|0;
  $exitcond = ($76|0)==($12|0);
  if ($exitcond) {
   $$0 = 1;
   break;
  } else {
   $j$11 = $76;
  }
 }
 return ($$0|0);
}
function _icomp($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$b>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 return ($4|0);
}
function _vorbis_comment_init($vc) {
 $vc = $vc|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$vc>>2]=0|0;HEAP32[$vc+4>>2]=0|0;HEAP32[$vc+8>>2]=0|0;HEAP32[$vc+12>>2]=0|0;
 return;
}
function _vorbis_comment_add_tag($vc,$tag,$contents) {
 $vc = $vc|0;
 $tag = $tag|0;
 $contents = $contents|0;
 var $$alloca_mul = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $endptr = 0, $strlen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($tag|0))|0);
 $1 = (_strlen(($contents|0))|0);
 $2 = (($0) + 2)|0;
 $3 = (($2) + ($1))|0;
 $$alloca_mul = $3;
 $4 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
 (_strcpy(($4|0),($tag|0))|0);
 $strlen = (_strlen(($4|0))|0);
 $endptr = (($4) + ($strlen)|0);
 HEAP8[$endptr>>0]=61&255;HEAP8[$endptr+1>>0]=61>>8;
 (_strcat(($4|0),($contents|0))|0);
 $5 = HEAP32[$vc>>2]|0;
 $6 = ((($vc)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 << 2;
 $9 = (($8) + 8)|0;
 $10 = (_realloc($5,$9)|0);
 HEAP32[$vc>>2] = $10;
 $11 = ((($vc)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$6>>2]|0;
 $14 = $13 << 2;
 $15 = (($14) + 8)|0;
 $16 = (_realloc($12,$15)|0);
 HEAP32[$11>>2] = $16;
 $17 = (_strlen(($4|0))|0);
 $18 = HEAP32[$6>>2]|0;
 $19 = (($16) + ($18<<2)|0);
 HEAP32[$19>>2] = $17;
 $20 = (($17) + 1)|0;
 $21 = (_malloc($20)|0);
 $22 = HEAP32[$vc>>2]|0;
 $23 = (($22) + ($18<<2)|0);
 HEAP32[$23>>2] = $21;
 $24 = HEAP32[$vc>>2]|0;
 $25 = (($24) + ($18<<2)|0);
 $26 = HEAP32[$25>>2]|0;
 (_strcpy(($26|0),($4|0))|0);
 $27 = HEAP32[$6>>2]|0;
 $28 = (($27) + 1)|0;
 HEAP32[$6>>2] = $28;
 $29 = HEAP32[$vc>>2]|0;
 $30 = (($29) + ($28<<2)|0);
 HEAP32[$30>>2] = 0;
 STACKTOP = sp;return;
}
function _vorbis_comment_clear($vc) {
 $vc = $vc|0;
 var $$pre = 0, $$pre3 = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($vc|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP32[$vc>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($vc)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)>(0);
  if ($5) {
   $20 = $4;$7 = $1;$i$01 = 0;
   while(1) {
    $6 = (($7) + ($i$01<<2)|0);
    $8 = HEAP32[$6>>2]|0;
    $9 = ($8|0)==(0|0);
    if ($9) {
     $12 = $20;
    } else {
     _free($8);
     $$pre3 = HEAP32[$3>>2]|0;
     $12 = $$pre3;
    }
    $10 = (($i$01) + 1)|0;
    $11 = ($10|0)<($12|0);
    if (!($11)) {
     break;
    }
    $$pre = HEAP32[$vc>>2]|0;
    $20 = $12;$7 = $$pre;$i$01 = $10;
   }
   $$pre4 = HEAP32[$vc>>2]|0;
   $13 = $$pre4;
  } else {
   $13 = $1;
  }
  _free($13);
 }
 $14 = ((($vc)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  _free($15);
 }
 $17 = ((($vc)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if (!($19)) {
  _free($18);
 }
 ;HEAP32[$vc>>2]=0|0;HEAP32[$vc+4>>2]=0|0;HEAP32[$vc+8>>2]=0|0;HEAP32[$vc+12>>2]=0|0;
 return;
}
function _vorbis_info_init($vi) {
 $vi = $vi|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$vi>>2]=0|0;HEAP32[$vi+4>>2]=0|0;HEAP32[$vi+8>>2]=0|0;HEAP32[$vi+12>>2]=0|0;HEAP32[$vi+16>>2]=0|0;HEAP32[$vi+20>>2]=0|0;HEAP32[$vi+24>>2]=0|0;
 $0 = (_calloc(1,3664)|0);
 $1 = ((($vi)) + 28|0);
 HEAP32[$1>>2] = $0;
 return;
}
function _vorbis_info_clear($vi) {
 $vi = $vi|0;
 var $$pre = 0, $$pre18 = 0, $$pre19 = 0, $$pre20 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $i$016 = 0, $i$114 = 0, $i$212 = 0, $i$310 = 0, $i$47 = 0, $i$56 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vi)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  ;HEAP32[$vi>>2]=0|0;HEAP32[$vi+4>>2]=0|0;HEAP32[$vi+8>>2]=0|0;HEAP32[$vi+12>>2]=0|0;HEAP32[$vi+16>>2]=0|0;HEAP32[$vi+20>>2]=0|0;HEAP32[$vi+24>>2]=0|0;HEAP32[$vi+28>>2]=0|0;
  return;
 }
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(0);
 if ($5) {
  $80 = $4;$i$016 = 0;
  while(1) {
   $9 = (((($1)) + 32|0) + ($i$016<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0|0);
   if ($11) {
    $14 = $80;
   } else {
    _free($10);
    $$pre = HEAP32[$3>>2]|0;
    $14 = $$pre;
   }
   $12 = (($i$016) + 1)|0;
   $13 = ($12|0)<($14|0);
   if ($13) {
    $80 = $14;$i$016 = $12;
   } else {
    break;
   }
  }
 }
 $6 = ((($1)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(0);
 if ($8) {
  $81 = $7;$i$114 = 0;
  while(1) {
   $18 = (((($1)) + 544|0) + ($i$114<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(0|0);
   if ($20) {
    $29 = $81;
   } else {
    $21 = (((($1)) + 288|0) + ($i$114<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (25664 + ($22<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($24)) + 8|0);
    $26 = HEAP32[$25>>2]|0;
    FUNCTION_TABLE_vi[$26 & 7]($19);
    $$pre18 = HEAP32[$6>>2]|0;
    $29 = $$pre18;
   }
   $27 = (($i$114) + 1)|0;
   $28 = ($27|0)<($29|0);
   if ($28) {
    $81 = $29;$i$114 = $27;
   } else {
    break;
   }
  }
 }
 $15 = ((($1)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)>(0);
 if ($17) {
  $82 = $16;$i$212 = 0;
  while(1) {
   $33 = (((($1)) + 1056|0) + ($i$212<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)==(0|0);
   if ($35) {
    $44 = $82;
   } else {
    $36 = (((($1)) + 800|0) + ($i$212<<2)|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (25640 + ($37<<2)|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ((($39)) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    FUNCTION_TABLE_vi[$41 & 7]($34);
    $$pre19 = HEAP32[$15>>2]|0;
    $44 = $$pre19;
   }
   $42 = (($i$212) + 1)|0;
   $43 = ($42|0)<($44|0);
   if ($43) {
    $82 = $44;$i$212 = $42;
   } else {
    break;
   }
  }
 }
 $30 = ((($1)) + 20|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)>(0);
 if ($32) {
  $83 = $31;$i$310 = 0;
  while(1) {
   $49 = (((($1)) + 1568|0) + ($i$310<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($50|0)==(0|0);
   if ($51) {
    $60 = $83;
   } else {
    $52 = (((($1)) + 1312|0) + ($i$310<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (25648 + ($53<<2)|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ((($55)) + 12|0);
    $57 = HEAP32[$56>>2]|0;
    FUNCTION_TABLE_vi[$57 & 7]($50);
    $$pre20 = HEAP32[$30>>2]|0;
    $60 = $$pre20;
   }
   $58 = (($i$310) + 1)|0;
   $59 = ($58|0)<($60|0);
   if ($59) {
    $83 = $60;$i$310 = $58;
   } else {
    break;
   }
  }
 }
 $45 = ((($1)) + 24|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)>(0);
 $48 = ((($1)) + 2848|0);
 if ($47) {
  $i$47 = 0;
  while(1) {
   $61 = (((($1)) + 1824|0) + ($i$47<<2)|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($62|0)==(0|0);
   if (!($63)) {
    _vorbis_staticbook_destroy($62);
   }
   $64 = HEAP32[$48>>2]|0;
   $65 = ($64|0)==(0|0);
   if (!($65)) {
    $66 = (($64) + (($i$47*56)|0)|0);
    _vorbis_book_clear($66);
   }
   $67 = (($i$47) + 1)|0;
   $68 = HEAP32[$45>>2]|0;
   $69 = ($67|0)<($68|0);
   if ($69) {
    $i$47 = $67;
   } else {
    break;
   }
  }
 }
 $70 = HEAP32[$48>>2]|0;
 $71 = ($70|0)==(0|0);
 if (!($71)) {
  _free($70);
 }
 $72 = ((($1)) + 28|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($73|0)>(0);
 if ($74) {
  $i$56 = 0;
  while(1) {
   $75 = (((($1)) + 2852|0) + ($i$56<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   __vi_psy_free($76);
   $77 = (($i$56) + 1)|0;
   $78 = HEAP32[$72>>2]|0;
   $79 = ($77|0)<($78|0);
   if ($79) {
    $i$56 = $77;
   } else {
    break;
   }
  }
 }
 _free($1);
 ;HEAP32[$vi>>2]=0|0;HEAP32[$vi+4>>2]=0|0;HEAP32[$vi+8>>2]=0|0;HEAP32[$vi+12>>2]=0|0;HEAP32[$vi+16>>2]=0|0;HEAP32[$vi+20>>2]=0|0;HEAP32[$vi+24>>2]=0|0;HEAP32[$vi+28>>2]=0|0;
 return;
}
function _vorbis_analysis_headerout($v,$vc,$op,$op_comm,$op_code) {
 $v = $v|0;
 $vc = $vc|0;
 $op = $op|0;
 $op_comm = $op_comm|0;
 $op_code = $op_code|0;
 var $$0 = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$015$i = 0, $i$111$i = 0, $i$27$i = 0, $i$33$i = 0, $i$42$i = 0, $opb = 0, $ret$0$ph = 0, $ret$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $opb = sp;
 $0 = ((($v)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($v)) + 104|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  ;HEAP32[$op>>2]=0|0;HEAP32[$op+4>>2]=0|0;HEAP32[$op+8>>2]=0|0;HEAP32[$op+12>>2]=0|0;HEAP32[$op+16>>2]=0|0;HEAP32[$op+20>>2]=0|0;HEAP32[$op+24>>2]=0|0;HEAP32[$op+28>>2]=0|0;
  ;HEAP32[$op_comm>>2]=0|0;HEAP32[$op_comm+4>>2]=0|0;HEAP32[$op_comm+8>>2]=0|0;HEAP32[$op_comm+12>>2]=0|0;HEAP32[$op_comm+16>>2]=0|0;HEAP32[$op_comm+20>>2]=0|0;HEAP32[$op_comm+24>>2]=0|0;HEAP32[$op_comm+28>>2]=0|0;
  ;HEAP32[$op_code>>2]=0|0;HEAP32[$op_code+4>>2]=0|0;HEAP32[$op_code+8>>2]=0|0;HEAP32[$op_code+12>>2]=0|0;HEAP32[$op_code+16>>2]=0|0;HEAP32[$op_code+20>>2]=0|0;HEAP32[$op_code+24>>2]=0|0;HEAP32[$op_code+28>>2]=0|0;
  $$0 = -129;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)<(1);
 if ($7) {
  $ret$0$ph = -129;
  label = 27;
 } else {
  _oggpack_writeinit($opb);
  $8 = ((($1)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   $ret$0$ph = -130;
   label = 27;
  } else {
   $11 = HEAP32[$9>>2]|0;
   $12 = ($11|0)<(64);
   if ($12) {
    $ret$0$ph = -130;
    label = 27;
   } else {
    $13 = ((($9)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)<($11|0);
    if ($15) {
     $ret$0$ph = -130;
     label = 27;
    } else {
     _oggpack_write($opb,1,8);
     _oggpack_write($opb,118,8);
     _oggpack_write($opb,111,8);
     _oggpack_write($opb,114,8);
     _oggpack_write($opb,98,8);
     _oggpack_write($opb,105,8);
     _oggpack_write($opb,115,8);
     _oggpack_write($opb,0,32);
     $16 = HEAP32[$5>>2]|0;
     _oggpack_write($opb,$16,8);
     $17 = ((($1)) + 8|0);
     $18 = HEAP32[$17>>2]|0;
     _oggpack_write($opb,$18,32);
     $19 = ((($1)) + 12|0);
     $20 = HEAP32[$19>>2]|0;
     _oggpack_write($opb,$20,32);
     $21 = ((($1)) + 16|0);
     $22 = HEAP32[$21>>2]|0;
     _oggpack_write($opb,$22,32);
     $23 = ((($1)) + 20|0);
     $24 = HEAP32[$23>>2]|0;
     _oggpack_write($opb,$24,32);
     $25 = HEAP32[$9>>2]|0;
     $26 = (($25) + -1)|0;
     $27 = (_ov_ilog($26)|0);
     _oggpack_write($opb,$27,4);
     $28 = HEAP32[$13>>2]|0;
     $29 = (($28) + -1)|0;
     $30 = (_ov_ilog($29)|0);
     _oggpack_write($opb,$30,4);
     _oggpack_write($opb,1,1);
     $31 = ((($3)) + 64|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==(0|0);
     if (!($33)) {
      _free($32);
     }
     $34 = (_oggpack_bytes($opb)|0);
     $35 = (_malloc($34)|0);
     HEAP32[$31>>2] = $35;
     $36 = ((($opb)) + 8|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = (_oggpack_bytes($opb)|0);
     _memcpy(($35|0),($37|0),($38|0))|0;
     $39 = HEAP32[$31>>2]|0;
     HEAP32[$op>>2] = $39;
     $40 = (_oggpack_bytes($opb)|0);
     $41 = ((($op)) + 4|0);
     HEAP32[$41>>2] = $40;
     $42 = ((($op)) + 8|0);
     HEAP32[$42>>2] = 1;
     $43 = ((($op)) + 12|0);
     ;HEAP32[$43>>2]=0|0;HEAP32[$43+4>>2]=0|0;HEAP32[$43+8>>2]=0|0;HEAP32[$43+12>>2]=0|0;HEAP32[$43+16>>2]=0|0;
     _oggpack_reset($opb);
     __vorbis_pack_comment($opb,$vc);
     $44 = ((($3)) + 68|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45|0)==(0|0);
     if (!($46)) {
      _free($45);
     }
     $47 = (_oggpack_bytes($opb)|0);
     $48 = (_malloc($47)|0);
     HEAP32[$44>>2] = $48;
     $49 = HEAP32[$36>>2]|0;
     $50 = (_oggpack_bytes($opb)|0);
     _memcpy(($48|0),($49|0),($50|0))|0;
     $51 = HEAP32[$44>>2]|0;
     HEAP32[$op_comm>>2] = $51;
     $52 = (_oggpack_bytes($opb)|0);
     $53 = ((($op_comm)) + 4|0);
     HEAP32[$53>>2] = $52;
     $54 = ((($op_comm)) + 8|0);
     $55 = ((($op_comm)) + 24|0);
     ;HEAP32[$54>>2]=0|0;HEAP32[$54+4>>2]=0|0;HEAP32[$54+8>>2]=0|0;HEAP32[$54+12>>2]=0|0;
     $56 = $55;
     $57 = $56;
     HEAP32[$57>>2] = 1;
     $58 = (($56) + 4)|0;
     $59 = $58;
     HEAP32[$59>>2] = 0;
     _oggpack_reset($opb);
     $60 = HEAP32[$8>>2]|0;
     $61 = ($60|0)==(0|0);
     L16: do {
      if (!($61)) {
       _oggpack_write($opb,5,8);
       _oggpack_write($opb,118,8);
       _oggpack_write($opb,111,8);
       _oggpack_write($opb,114,8);
       _oggpack_write($opb,98,8);
       _oggpack_write($opb,105,8);
       _oggpack_write($opb,115,8);
       $62 = ((($60)) + 24|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = (($63) + -1)|0;
       _oggpack_write($opb,$64,8);
       $65 = HEAP32[$62>>2]|0;
       $66 = ($65|0)>(0);
       if ($66) {
        $i$015$i = 0;
        while(1) {
         $70 = (((($60)) + 1824|0) + ($i$015$i<<2)|0);
         $71 = HEAP32[$70>>2]|0;
         $72 = (_vorbis_staticbook_pack($71,$opb)|0);
         $73 = ($72|0)==(0);
         $68 = (($i$015$i) + 1)|0;
         if (!($73)) {
          break L16;
         }
         $67 = HEAP32[$62>>2]|0;
         $69 = ($68|0)<($67|0);
         if ($69) {
          $i$015$i = $68;
         } else {
          break;
         }
        }
       }
       _oggpack_write($opb,0,6);
       _oggpack_write($opb,0,16);
       $74 = ((($60)) + 16|0);
       $75 = HEAP32[$74>>2]|0;
       $76 = (($75) + -1)|0;
       _oggpack_write($opb,$76,6);
       $77 = HEAP32[$74>>2]|0;
       $78 = ($77|0)>(0);
       if ($78) {
        $i$111$i = 0;
        while(1) {
         $79 = (((($60)) + 800|0) + ($i$111$i<<2)|0);
         $80 = HEAP32[$79>>2]|0;
         _oggpack_write($opb,$80,16);
         $81 = HEAP32[$79>>2]|0;
         $82 = (25640 + ($81<<2)|0);
         $83 = HEAP32[$82>>2]|0;
         $84 = HEAP32[$83>>2]|0;
         $85 = ($84|0)==(0|0);
         if ($85) {
          break L16;
         }
         $86 = (((($60)) + 1056|0) + ($i$111$i<<2)|0);
         $87 = HEAP32[$86>>2]|0;
         FUNCTION_TABLE_vii[$84 & 3]($87,$opb);
         $88 = (($i$111$i) + 1)|0;
         $89 = HEAP32[$74>>2]|0;
         $90 = ($88|0)<($89|0);
         if ($90) {
          $i$111$i = $88;
         } else {
          break;
         }
        }
       }
       $91 = ((($60)) + 20|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = (($92) + -1)|0;
       _oggpack_write($opb,$93,6);
       $94 = HEAP32[$91>>2]|0;
       $95 = ($94|0)>(0);
       if ($95) {
        $i$27$i = 0;
        while(1) {
         $96 = (((($60)) + 1312|0) + ($i$27$i<<2)|0);
         $97 = HEAP32[$96>>2]|0;
         _oggpack_write($opb,$97,16);
         $98 = HEAP32[$96>>2]|0;
         $99 = (25648 + ($98<<2)|0);
         $100 = HEAP32[$99>>2]|0;
         $101 = HEAP32[$100>>2]|0;
         $102 = (((($60)) + 1568|0) + ($i$27$i<<2)|0);
         $103 = HEAP32[$102>>2]|0;
         FUNCTION_TABLE_vii[$101 & 3]($103,$opb);
         $104 = (($i$27$i) + 1)|0;
         $105 = HEAP32[$91>>2]|0;
         $106 = ($104|0)<($105|0);
         if ($106) {
          $i$27$i = $104;
         } else {
          break;
         }
        }
       }
       $107 = ((($60)) + 12|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = (($108) + -1)|0;
       _oggpack_write($opb,$109,6);
       $110 = HEAP32[$107>>2]|0;
       $111 = ($110|0)>(0);
       if ($111) {
        $i$33$i = 0;
        while(1) {
         $112 = (((($60)) + 288|0) + ($i$33$i<<2)|0);
         $113 = HEAP32[$112>>2]|0;
         _oggpack_write($opb,$113,16);
         $114 = HEAP32[$112>>2]|0;
         $115 = (25664 + ($114<<2)|0);
         $116 = HEAP32[$115>>2]|0;
         $117 = HEAP32[$116>>2]|0;
         $118 = (((($60)) + 544|0) + ($i$33$i<<2)|0);
         $119 = HEAP32[$118>>2]|0;
         FUNCTION_TABLE_viii[$117 & 1]($1,$119,$opb);
         $120 = (($i$33$i) + 1)|0;
         $121 = HEAP32[$107>>2]|0;
         $122 = ($120|0)<($121|0);
         if ($122) {
          $i$33$i = $120;
         } else {
          break;
         }
        }
       }
       $123 = ((($60)) + 8|0);
       $124 = HEAP32[$123>>2]|0;
       $125 = (($124) + -1)|0;
       _oggpack_write($opb,$125,6);
       $126 = HEAP32[$123>>2]|0;
       $127 = ($126|0)>(0);
       if ($127) {
        $i$42$i = 0;
        while(1) {
         $128 = (((($60)) + 32|0) + ($i$42$i<<2)|0);
         $129 = HEAP32[$128>>2]|0;
         $130 = HEAP32[$129>>2]|0;
         _oggpack_write($opb,$130,1);
         $131 = HEAP32[$128>>2]|0;
         $132 = ((($131)) + 4|0);
         $133 = HEAP32[$132>>2]|0;
         _oggpack_write($opb,$133,16);
         $134 = HEAP32[$128>>2]|0;
         $135 = ((($134)) + 8|0);
         $136 = HEAP32[$135>>2]|0;
         _oggpack_write($opb,$136,16);
         $137 = HEAP32[$128>>2]|0;
         $138 = ((($137)) + 12|0);
         $139 = HEAP32[$138>>2]|0;
         _oggpack_write($opb,$139,8);
         $140 = (($i$42$i) + 1)|0;
         $141 = HEAP32[$123>>2]|0;
         $142 = ($140|0)<($141|0);
         if ($142) {
          $i$42$i = $140;
         } else {
          break;
         }
        }
       }
       _oggpack_write($opb,1,1);
       $143 = ((($3)) + 72|0);
       $144 = HEAP32[$143>>2]|0;
       $145 = ($144|0)==(0|0);
       if (!($145)) {
        _free($144);
       }
       $146 = (_oggpack_bytes($opb)|0);
       $147 = (_malloc($146)|0);
       HEAP32[$143>>2] = $147;
       $148 = HEAP32[$36>>2]|0;
       $149 = (_oggpack_bytes($opb)|0);
       _memcpy(($147|0),($148|0),($149|0))|0;
       $150 = HEAP32[$143>>2]|0;
       HEAP32[$op_code>>2] = $150;
       $151 = (_oggpack_bytes($opb)|0);
       $152 = ((($op_code)) + 4|0);
       HEAP32[$152>>2] = $151;
       $153 = ((($op_code)) + 8|0);
       $154 = ((($op_code)) + 24|0);
       ;HEAP32[$153>>2]=0|0;HEAP32[$153+4>>2]=0|0;HEAP32[$153+8>>2]=0|0;HEAP32[$153+12>>2]=0|0;
       $155 = $154;
       $156 = $155;
       HEAP32[$156>>2] = 2;
       $157 = (($155) + 4)|0;
       $158 = $157;
       HEAP32[$158>>2] = 0;
       _oggpack_writeclear($opb);
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
     } while(0);
     ;HEAP32[$op>>2]=0|0;HEAP32[$op+4>>2]=0|0;HEAP32[$op+8>>2]=0|0;HEAP32[$op+12>>2]=0|0;HEAP32[$op+16>>2]=0|0;HEAP32[$op+20>>2]=0|0;HEAP32[$op+24>>2]=0|0;HEAP32[$op+28>>2]=0|0;
     ;HEAP32[$op_comm>>2]=0|0;HEAP32[$op_comm+4>>2]=0|0;HEAP32[$op_comm+8>>2]=0|0;HEAP32[$op_comm+12>>2]=0|0;HEAP32[$op_comm+16>>2]=0|0;HEAP32[$op_comm+20>>2]=0|0;HEAP32[$op_comm+24>>2]=0|0;HEAP32[$op_comm+28>>2]=0|0;
     ;HEAP32[$op_code>>2]=0|0;HEAP32[$op_code+4>>2]=0|0;HEAP32[$op_code+8>>2]=0|0;HEAP32[$op_code+12>>2]=0|0;HEAP32[$op_code+16>>2]=0|0;HEAP32[$op_code+20>>2]=0|0;HEAP32[$op_code+24>>2]=0|0;HEAP32[$op_code+28>>2]=0|0;
     $$pre$phiZ2D = $31;$ret$03 = -130;
    }
   }
  }
 }
 if ((label|0) == 27) {
  ;HEAP32[$op>>2]=0|0;HEAP32[$op+4>>2]=0|0;HEAP32[$op+8>>2]=0|0;HEAP32[$op+12>>2]=0|0;HEAP32[$op+16>>2]=0|0;HEAP32[$op+20>>2]=0|0;HEAP32[$op+24>>2]=0|0;HEAP32[$op+28>>2]=0|0;
  ;HEAP32[$op_comm>>2]=0|0;HEAP32[$op_comm+4>>2]=0|0;HEAP32[$op_comm+8>>2]=0|0;HEAP32[$op_comm+12>>2]=0|0;HEAP32[$op_comm+16>>2]=0|0;HEAP32[$op_comm+20>>2]=0|0;HEAP32[$op_comm+24>>2]=0|0;HEAP32[$op_comm+28>>2]=0|0;
  ;HEAP32[$op_code>>2]=0|0;HEAP32[$op_code+4>>2]=0|0;HEAP32[$op_code+8>>2]=0|0;HEAP32[$op_code+12>>2]=0|0;HEAP32[$op_code+16>>2]=0|0;HEAP32[$op_code+20>>2]=0|0;HEAP32[$op_code+24>>2]=0|0;HEAP32[$op_code+28>>2]=0|0;
  $$pre = ((($3)) + 64|0);
  $$pre$phiZ2D = $$pre;$ret$03 = $ret$0$ph;
 }
 _oggpack_writeclear($opb);
 $159 = HEAP32[$$pre$phiZ2D>>2]|0;
 $160 = ($159|0)==(0|0);
 if (!($160)) {
  _free($159);
 }
 $161 = ((($3)) + 68|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = ($162|0)==(0|0);
 if (!($163)) {
  _free($162);
 }
 $164 = ((($3)) + 72|0);
 $165 = HEAP32[$164>>2]|0;
 $166 = ($165|0)==(0|0);
 if (!($166)) {
  _free($165);
 }
 HEAP32[$$pre$phiZ2D>>2] = 0;
 HEAP32[$161>>2] = 0;
 HEAP32[$164>>2] = 0;
 $$0 = $ret$03;
 STACKTOP = sp;return ($$0|0);
}
function __vorbis_pack_comment($opb,$vc) {
 $opb = $opb|0;
 $vc = $vc|0;
 var $$012$i2 = 0, $$012$i6 = 0, $$03$i1 = 0, $$03$i5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _oggpack_write($opb,3,8);
 _oggpack_write($opb,118,8);
 _oggpack_write($opb,111,8);
 _oggpack_write($opb,114,8);
 _oggpack_write($opb,98,8);
 _oggpack_write($opb,105,8);
 _oggpack_write($opb,115,8);
 _oggpack_write($opb,44,32);
 $$012$i2 = 1200;$$03$i1 = 44;
 while(1) {
  $0 = (($$03$i1) + -1)|0;
  $1 = ((($$012$i2)) + 1|0);
  $2 = HEAP8[$$012$i2>>0]|0;
  $3 = $2 << 24 >> 24;
  _oggpack_write($opb,$3,8);
  $4 = ($0|0)==(0);
  if ($4) {
   break;
  } else {
   $$012$i2 = $1;$$03$i1 = $0;
  }
 }
 $5 = ((($vc)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 _oggpack_write($opb,$6,32);
 $7 = HEAP32[$5>>2]|0;
 $8 = ($7|0)>(0);
 if (!($8)) {
  _oggpack_write($opb,1,1);
  return;
 }
 $9 = ((($vc)) + 4|0);
 $i$09 = 0;
 while(1) {
  $10 = HEAP32[$vc>>2]|0;
  $11 = (($10) + ($i$09<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   _oggpack_write($opb,0,32);
  } else {
   $14 = HEAP32[$9>>2]|0;
   $15 = (($14) + ($i$09<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   _oggpack_write($opb,$16,32);
   $17 = HEAP32[$9>>2]|0;
   $18 = (($17) + ($i$09<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(0);
   if (!($20)) {
    $21 = HEAP32[$vc>>2]|0;
    $22 = (($21) + ($i$09<<2)|0);
    $23 = HEAP32[$22>>2]|0;
    $$012$i6 = $23;$$03$i5 = $19;
    while(1) {
     $24 = (($$03$i5) + -1)|0;
     $25 = ((($$012$i6)) + 1|0);
     $26 = HEAP8[$$012$i6>>0]|0;
     $27 = $26 << 24 >> 24;
     _oggpack_write($opb,$27,8);
     $28 = ($24|0)==(0);
     if ($28) {
      break;
     } else {
      $$012$i6 = $25;$$03$i5 = $24;
     }
    }
   }
  }
  $29 = (($i$09) + 1)|0;
  $30 = HEAP32[$5>>2]|0;
  $31 = ($29|0)<($30|0);
  if ($31) {
   $i$09 = $29;
  } else {
   break;
  }
 }
 _oggpack_write($opb,1,1);
 return;
}
function _vorbis_lpc_from_data($data,$lpci,$n,$m) {
 $data = $data|0;
 $lpci = $lpci|0;
 $n = $n|0;
 $m = $m|0;
 var $$alloca_mul = 0, $$alloca_mul1 = 0, $$lcssa = 0.0, $$pre = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0;
 var $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0;
 var $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0;
 var $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $9 = 0.0, $d$0$lcssa = 0.0, $d$025 = 0.0, $damp$08 = 0.0, $error$021 = 0.0, $error$021$lcssa = 0.0, $error$05 = 0.0, $error$053940 = 0.0, $exitcond = 0, $exitcond36 = 0, $exitcond37 = 0, $exitcond38 = 0, $i$026 = 0;
 var $indvars$iv = 0, $indvars$iv$lcssa = 0, $indvars$iv$next = 0, $j$110 = 0, $j$2$lcssa = 0, $j$215 = 0, $j$37 = 0, $j$46 = 0, $r$011 = 0.0, $smax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($m) + 1)|0;
 $1 = $0 << 3;
 $$alloca_mul = $1;
 $2 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
 $3 = $m << 3;
 $$alloca_mul1 = $3;
 $4 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul1)|0)+15)&-16)|0;;
 $5 = ($0|0)==(0);
 if ($5) {
  $22 = 0.0;
 } else {
  $6 = $m;
  while(1) {
   $7 = ($6|0)<($n|0);
   if ($7) {
    $d$025 = 0.0;$i$026 = $6;
    while(1) {
     $8 = (($data) + ($i$026<<2)|0);
     $9 = +HEAPF32[$8>>2];
     $10 = $9;
     $11 = (($i$026) - ($6))|0;
     $12 = (($data) + ($11<<2)|0);
     $13 = +HEAPF32[$12>>2];
     $14 = $13;
     $15 = $14 * $10;
     $16 = $15 + $d$025;
     $17 = (($i$026) + 1)|0;
     $exitcond38 = ($17|0)==($n|0);
     if ($exitcond38) {
      $d$0$lcssa = $16;
      break;
     } else {
      $d$025 = $16;$i$026 = $17;
     }
    }
   } else {
    $d$0$lcssa = 0.0;
   }
   $18 = (($2) + ($6<<3)|0);
   HEAPF64[$18>>3] = $d$0$lcssa;
   $19 = (($6) + -1)|0;
   $20 = ($6|0)==(0);
   if ($20) {
    break;
   } else {
    $6 = $19;
   }
  }
  $$pre = +HEAPF64[$2>>3];
  $22 = $$pre;
 }
 $21 = $22 * 1.0000000001;
 $23 = $22 * 1.0000000000000001E-9;
 $24 = $23 + 1.0E-10;
 $25 = ($m|0)>(0);
 if ($25) {
  $error$021 = $21;$indvars$iv = 0;
 } else {
  $error$053940 = $21;
  $83 = $error$053940;
  STACKTOP = sp;return (+$83);
 }
 while(1) {
  $indvars$iv$next = (($indvars$iv) + 1)|0;
  $26 = $error$021 < $24;
  if ($26) {
   $error$021$lcssa = $error$021;$indvars$iv$lcssa = $indvars$iv;
   label = 8;
   break;
  }
  $30 = (($2) + ($indvars$iv$next<<3)|0);
  $31 = +HEAPF64[$30>>3];
  $32 = -$31;
  $33 = ($indvars$iv|0)>(0);
  if ($33) {
   $j$110 = 0;$r$011 = $32;
   while(1) {
    $36 = (($4) + ($j$110<<3)|0);
    $37 = +HEAPF64[$36>>3];
    $38 = (($indvars$iv) - ($j$110))|0;
    $39 = (($2) + ($38<<3)|0);
    $40 = +HEAPF64[$39>>3];
    $41 = $40 * $37;
    $42 = $r$011 - $41;
    $43 = (($j$110) + 1)|0;
    $exitcond37 = ($43|0)==($indvars$iv|0);
    if ($exitcond37) {
     $$lcssa = $42;
     break;
    } else {
     $j$110 = $43;$r$011 = $42;
    }
   }
   $44 = $$lcssa / $error$021;
   $45 = (($4) + ($indvars$iv<<3)|0);
   HEAPF64[$45>>3] = $44;
   $46 = (($indvars$iv|0) / 2)&-1;
   $47 = ($indvars$iv|0)>(1);
   if ($47) {
    $48 = (($indvars$iv) + -1)|0;
    $49 = ($46|0)>(1);
    $j$215 = 0;
    while(1) {
     $50 = (($4) + ($j$215<<3)|0);
     $51 = +HEAPF64[$50>>3];
     $52 = (($48) - ($j$215))|0;
     $53 = (($4) + ($52<<3)|0);
     $54 = +HEAPF64[$53>>3];
     $55 = $54 * $44;
     $56 = $55 + $51;
     HEAPF64[$50>>3] = $56;
     $57 = $51 * $44;
     $58 = +HEAPF64[$53>>3];
     $59 = $58 + $57;
     HEAPF64[$53>>3] = $59;
     $60 = (($j$215) + 1)|0;
     $61 = ($60|0)<($46|0);
     if ($61) {
      $j$215 = $60;
     } else {
      break;
     }
    }
    $smax = $49 ? $46 : 1;
    $67 = $44;$j$2$lcssa = $smax;
   } else {
    $67 = $44;$j$2$lcssa = 0;
   }
  } else {
   $34 = $32 / $error$021;
   $35 = (($4) + ($indvars$iv<<3)|0);
   HEAPF64[$35>>3] = $34;
   $67 = $34;$j$2$lcssa = 0;
  }
  $62 = $indvars$iv & 1;
  $63 = ($62|0)==(0);
  if (!($63)) {
   $64 = (($4) + ($j$2$lcssa<<3)|0);
   $65 = +HEAPF64[$64>>3];
   $66 = $65 * $67;
   $68 = $66 + $65;
   HEAPF64[$64>>3] = $68;
  }
  $69 = $67 * $67;
  $70 = 1.0 - $69;
  $71 = $70 * $error$021;
  $72 = ($indvars$iv$next|0)<($m|0);
  if ($72) {
   $error$021 = $71;$indvars$iv = $indvars$iv$next;
  } else {
   $error$05 = $71;
   break;
  }
 }
 if ((label|0) == 8) {
  $27 = (($4) + ($indvars$iv$lcssa<<3)|0);
  $28 = (($m) - ($indvars$iv$lcssa))|0;
  $29 = $28 << 3;
  _memset(($27|0),0,($29|0))|0;
  $error$05 = $error$021$lcssa;
 }
 if ($25) {
  $damp$08 = 0.98999999999999999;$j$37 = 0;
 } else {
  $error$053940 = $error$05;
  $83 = $error$053940;
  STACKTOP = sp;return (+$83);
 }
 while(1) {
  $73 = (($4) + ($j$37<<3)|0);
  $74 = +HEAPF64[$73>>3];
  $75 = $74 * $damp$08;
  HEAPF64[$73>>3] = $75;
  $76 = $damp$08 * 0.98999999999999999;
  $77 = (($j$37) + 1)|0;
  $exitcond36 = ($77|0)==($m|0);
  if ($exitcond36) {
   break;
  } else {
   $damp$08 = $76;$j$37 = $77;
  }
 }
 if ($25) {
  $j$46 = 0;
 } else {
  $error$053940 = $error$05;
  $83 = $error$053940;
  STACKTOP = sp;return (+$83);
 }
 while(1) {
  $78 = (($4) + ($j$46<<3)|0);
  $79 = +HEAPF64[$78>>3];
  $80 = $79;
  $81 = (($lpci) + ($j$46<<2)|0);
  HEAPF32[$81>>2] = $80;
  $82 = (($j$46) + 1)|0;
  $exitcond = ($82|0)==($m|0);
  if ($exitcond) {
   $error$053940 = $error$05;
   break;
  } else {
   $j$46 = $82;
  }
 }
 $83 = $error$053940;
 STACKTOP = sp;return (+$83);
}
function _vorbis_lpc_predict($coeff,$prime,$m,$data,$n) {
 $coeff = $coeff|0;
 $prime = $prime|0;
 $m = $m|0;
 $data = $data|0;
 $n = $n|0;
 var $$alloca_mul = 0, $$lcssa = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond19 = 0, $i$210$us = 0, $indvars$iv = 0, $indvars$iv$next = 0, $o$06$us = 0, $p$07$us = 0, $y$08$us = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($n) + ($m))|0;
 $1 = $0 << 2;
 $$alloca_mul = $1;
 $2 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
 $3 = ($prime|0)==(0|0);
 $4 = ($m|0)>(0);
 if ($3) {
  if ($4) {
   $6 = $m << 2;
   _memset(($2|0),0,($6|0))|0;
  }
 } else {
  if ($4) {
   $5 = $m << 2;
   _memcpy(($2|0),($prime|0),($5|0))|0;
  }
 }
 $7 = ($n|0)>(0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = ($m|0)>(0);
 if ($8) {
  $i$210$us = 0;$indvars$iv = $m;
 } else {
  $9 = $n << 2;
  _memset(($2|0),0,($9|0))|0;
  _memset(($data|0),0,($9|0))|0;
  STACKTOP = sp;return;
 }
 while(1) {
  $o$06$us = $i$210$us;$p$07$us = $m;$y$08$us = 0.0;
  while(1) {
   $13 = (($o$06$us) + 1)|0;
   $14 = (($2) + ($o$06$us<<2)|0);
   $15 = +HEAPF32[$14>>2];
   $16 = (($p$07$us) + -1)|0;
   $17 = (($coeff) + ($16<<2)|0);
   $18 = +HEAPF32[$17>>2];
   $19 = $18 * $15;
   $20 = $y$08$us - $19;
   $exitcond = ($13|0)==($indvars$iv|0);
   if ($exitcond) {
    $$lcssa = $20;
    break;
   } else {
    $o$06$us = $13;$p$07$us = $16;$y$08$us = $20;
   }
  }
  $10 = (($2) + ($indvars$iv<<2)|0);
  HEAPF32[$10>>2] = $$lcssa;
  $11 = (($data) + ($i$210$us<<2)|0);
  HEAPF32[$11>>2] = $$lcssa;
  $12 = (($i$210$us) + 1)|0;
  $indvars$iv$next = (($indvars$iv) + 1)|0;
  $exitcond19 = ($12|0)==($n|0);
  if ($exitcond19) {
   break;
  } else {
   $i$210$us = $12;$indvars$iv = $indvars$iv$next;
  }
 }
 STACKTOP = sp;return;
}
function _mapping0_pack($vi,$vm,$opb) {
 $vi = $vi|0;
 $vm = $vm|0;
 $opb = $opb|0;
 var $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$05 = 0, $i$13 = 0, $i$22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vm>>2]|0;
 $1 = ($0|0)>(1);
 if ($1) {
  _oggpack_write($opb,1,1);
  $2 = HEAP32[$vm>>2]|0;
  $3 = (($2) + -1)|0;
  _oggpack_write($opb,$3,4);
 } else {
  _oggpack_write($opb,0,1);
 }
 $4 = ((($vm)) + 1156|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 if ($6) {
  _oggpack_write($opb,1,1);
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + -1)|0;
  _oggpack_write($opb,$8,8);
  $9 = HEAP32[$4>>2]|0;
  $10 = ($9|0)>(0);
  if ($10) {
   $11 = ((($vm)) + 1160|0);
   $12 = ((($vi)) + 4|0);
   $13 = ((($vm)) + 2184|0);
   $i$05 = 0;
   while(1) {
    $14 = (($11) + ($i$05<<2)|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = HEAP32[$12>>2]|0;
    $17 = (($16) + -1)|0;
    $18 = (_ov_ilog($17)|0);
    _oggpack_write($opb,$15,$18);
    $19 = (($13) + ($i$05<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = HEAP32[$12>>2]|0;
    $22 = (($21) + -1)|0;
    $23 = (_ov_ilog($22)|0);
    _oggpack_write($opb,$20,$23);
    $24 = (($i$05) + 1)|0;
    $25 = HEAP32[$4>>2]|0;
    $26 = ($24|0)<($25|0);
    if ($26) {
     $i$05 = $24;
    } else {
     break;
    }
   }
  }
 } else {
  _oggpack_write($opb,0,1);
 }
 _oggpack_write($opb,0,2);
 $27 = HEAP32[$vm>>2]|0;
 $28 = ($27|0)>(1);
 if ($28) {
  $29 = ((($vi)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)>(0);
  if ($31) {
   $32 = ((($vm)) + 4|0);
   $i$13 = 0;
   while(1) {
    $37 = (($32) + ($i$13<<2)|0);
    $38 = HEAP32[$37>>2]|0;
    _oggpack_write($opb,$38,4);
    $39 = (($i$13) + 1)|0;
    $40 = HEAP32[$29>>2]|0;
    $41 = ($39|0)<($40|0);
    if ($41) {
     $i$13 = $39;
    } else {
     break;
    }
   }
   $$pre$pre = HEAP32[$vm>>2]|0;
   $33 = $$pre$pre;
   label = 13;
  }
 } else {
  $33 = $27;
  label = 13;
 }
 if ((label|0) == 13) {
  $34 = ($33|0)>(0);
  if (!($34)) {
   return;
  }
 }
 $35 = ((($vm)) + 1028|0);
 $36 = ((($vm)) + 1092|0);
 $i$22 = 0;
 while(1) {
  _oggpack_write($opb,0,8);
  $42 = (($35) + ($i$22<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  _oggpack_write($opb,$43,8);
  $44 = (($36) + ($i$22<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  _oggpack_write($opb,$45,8);
  $46 = (($i$22) + 1)|0;
  $47 = HEAP32[$vm>>2]|0;
  $48 = ($46|0)<($47|0);
  if ($48) {
   $i$22 = $46;
  } else {
   break;
  }
 }
 return;
}
function _mapping0_unpack($vi,$opb) {
 $vi = $vi|0;
 $opb = $opb|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $i$013 = 0, $i$111 = 0, $i$210 = 0;
 var $or$cond = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond4 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,3208)|0);
 $1 = ((($vi)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 _memset(($0|0),0,3208)|0;
 $3 = ((($vi)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(1);
 L1: do {
  if ($5) {
   label = 24;
  } else {
   $6 = (_oggpack_read($opb,1)|0);
   $7 = ($6|0)<(0);
   if ($7) {
    label = 24;
   } else {
    $8 = ($6|0)==(0);
    if ($8) {
     HEAP32[$0>>2] = 1;
    } else {
     $9 = (_oggpack_read($opb,4)|0);
     $10 = (($9) + 1)|0;
     HEAP32[$0>>2] = $10;
     $11 = ($9|0)<(0);
     if ($11) {
      break;
     }
    }
    $12 = (_oggpack_read($opb,1)|0);
    $13 = ($12|0)<(0);
    if (!($13)) {
     $14 = ($12|0)==(0);
     if (!($14)) {
      $15 = (_oggpack_read($opb,8)|0);
      $16 = (($15) + 1)|0;
      $17 = ((($0)) + 1156|0);
      HEAP32[$17>>2] = $16;
      $18 = ($15|0)<(0);
      if ($18) {
       break;
      }
      $19 = ((($0)) + 1160|0);
      $20 = ((($0)) + 2184|0);
      $$pre = HEAP32[$3>>2]|0;
      $25 = $$pre;$i$013 = 0;
      while(1) {
       $24 = (($25) + -1)|0;
       $26 = (_ov_ilog($24)|0);
       $27 = (_oggpack_read($opb,$26)|0);
       $28 = (($19) + ($i$013<<2)|0);
       HEAP32[$28>>2] = $27;
       $29 = HEAP32[$3>>2]|0;
       $30 = (($29) + -1)|0;
       $31 = (_ov_ilog($30)|0);
       $32 = (_oggpack_read($opb,$31)|0);
       $33 = (($20) + ($i$013<<2)|0);
       HEAP32[$33>>2] = $32;
       $34 = $32 | $27;
       $35 = ($34|0)<(0);
       $36 = ($27|0)==($32|0);
       $or$cond = $36 | $35;
       if ($or$cond) {
        break L1;
       }
       $37 = HEAP32[$3>>2]|0;
       $38 = ($27|0)<($37|0);
       $39 = ($32|0)<($37|0);
       $or$cond2 = $38 & $39;
       $22 = (($i$013) + 1)|0;
       if (!($or$cond2)) {
        break L1;
       }
       $21 = HEAP32[$17>>2]|0;
       $23 = ($22|0)<($21|0);
       if ($23) {
        $25 = $37;$i$013 = $22;
       } else {
        break;
       }
      }
     }
     $40 = (_oggpack_read($opb,2)|0);
     $41 = ($40|0)==(0);
     if ($41) {
      $42 = HEAP32[$0>>2]|0;
      $43 = ($42|0)>(1);
      if ($43) {
       $44 = HEAP32[$3>>2]|0;
       $45 = ($44|0)>(0);
       if ($45) {
        $46 = ((($0)) + 4|0);
        $i$111 = 0;
        while(1) {
         $56 = (_oggpack_read($opb,4)|0);
         $57 = (($46) + ($i$111<<2)|0);
         HEAP32[$57>>2] = $56;
         $58 = HEAP32[$0>>2]|0;
         $59 = ($56|0)>=($58|0);
         $60 = ($56|0)<(0);
         $or$cond3 = $60 | $59;
         $54 = (($i$111) + 1)|0;
         if ($or$cond3) {
          break L1;
         }
         $53 = HEAP32[$3>>2]|0;
         $55 = ($54|0)<($53|0);
         if ($55) {
          $i$111 = $54;
         } else {
          $47 = $58;
          label = 17;
          break;
         }
        }
       }
      } else {
       $47 = $42;
       label = 17;
      }
      if ((label|0) == 17) {
       $48 = ($47|0)>(0);
       if (!($48)) {
        $$0 = $0;
        return ($$0|0);
       }
      }
      $49 = ((($0)) + 1028|0);
      $50 = ((($2)) + 16|0);
      $51 = ((($0)) + 1092|0);
      $52 = ((($2)) + 20|0);
      $i$210 = 0;
      while(1) {
       (_oggpack_read($opb,8)|0);
       $64 = (_oggpack_read($opb,8)|0);
       $65 = (($49) + ($i$210<<2)|0);
       HEAP32[$65>>2] = $64;
       $66 = HEAP32[$50>>2]|0;
       $67 = ($64|0)>=($66|0);
       $68 = ($64|0)<(0);
       $or$cond4 = $68 | $67;
       if ($or$cond4) {
        break L1;
       }
       $69 = (_oggpack_read($opb,8)|0);
       $70 = (($51) + ($i$210<<2)|0);
       HEAP32[$70>>2] = $69;
       $71 = HEAP32[$52>>2]|0;
       $72 = ($69|0)>=($71|0);
       $73 = ($69|0)<(0);
       $or$cond5 = $73 | $72;
       $62 = (($i$210) + 1)|0;
       if ($or$cond5) {
        break L1;
       }
       $61 = HEAP32[$0>>2]|0;
       $63 = ($62|0)<($61|0);
       if ($63) {
        $i$210 = $62;
       } else {
        $$0 = $0;
        break;
       }
      }
      return ($$0|0);
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 24) {
  $74 = ($0|0)==(0|0);
  if ($74) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 _free($0);
 $$0 = 0;
 return ($$0|0);
}
function _mapping0_free_info($i) {
 $i = $i|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($i|0)==(0|0);
 if (!($0)) {
  _free($i);
 }
 return;
}
function _mapping0_forward($vb) {
 $vb = $vb|0;
 var $$ = 0, $$0 = 0, $$alloca_mul = 0, $$alloca_mul1 = 0, $$alloca_mul3 = 0, $$alloca_mul5 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi53Z2D = 0, $$pre$phi55Z2D = 0, $$pre$phiZ2D = 0, $$pre51 = 0, $$pre52 = 0, $$pre54 = 0, $$sum = 0, $$sum1$us = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0;
 var $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0.0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0.0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0.0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0.0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0.0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0.0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0.0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0.0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0.0, $598 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0;
 var $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $ch_in_bundle$0$lcssa = 0, $ch_in_bundle$07 = 0, $ch_in_bundle$1 = 0, $ch_in_bundle$2$lcssa = 0, $ch_in_bundle$213 = 0;
 var $ch_in_bundle$3 = 0, $global_ampmax$0$lcssa = 0.0, $global_ampmax$037 = 0.0, $global_ampmax$1 = 0.0, $i$038 = 0, $i$129 = 0, $i$129$us = 0, $i$25 = 0, $i$318 = 0, $j$033 = 0, $j$123$us = 0, $j$26 = 0, $j$312 = 0, $k$222 = 0, $not$ = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($vb)) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 104|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($vb)) + 104|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($vb)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($3)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 << 2;
 $$alloca_mul = $14;
 $15 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
 $16 = (__vorbis_block_alloc($vb,$14)|0);
 $17 = HEAP32[$12>>2]|0;
 $18 = $17 << 2;
 $19 = (__vorbis_block_alloc($vb,$18)|0);
 $20 = HEAP32[$12>>2]|0;
 $21 = $20 << 2;
 $22 = (__vorbis_block_alloc($vb,$21)|0);
 $23 = ((($9)) + 4|0);
 $24 = +HEAPF32[$23>>2];
 $25 = HEAP32[$12>>2]|0;
 $26 = $25 << 2;
 $$alloca_mul1 = $26;
 $27 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul1)|0)+15)&-16)|0;;
 $28 = ((($9)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($vb)) + 28|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (((($5)) + 544|0) + ($31<<2)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($7)) + 56|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($31|0)!=(0);
 $37 = $36 ? 2 : 0;
 $$sum = (($37) + ($29))|0;
 $38 = (($35) + (($$sum*52)|0)|0);
 $39 = ((($vb)) + 40|0);
 HEAP32[$39>>2] = $31;
 $40 = ($25|0)>(0);
 if ($40) {
  $41 = (+($11|0));
  $42 = 4.0 / $41;
  $43 = (HEAPF32[tempDoublePtr>>2]=$42,HEAP32[tempDoublePtr>>2]|0);
  $44 = (($11|0) / 2)&-1;
  $45 = $44 << 2;
  $46 = $43 & 2147483647;
  $47 = (+($46>>>0));
  $48 = $47 * 7.1771142984289327E-7;
  $49 = $48 + -764.6162109375;
  $50 = $49;
  $51 = $50 + 0.34499999999999997;
  $52 = $51;
  $53 = ((($7)) + 4|0);
  $54 = ((($vb)) + 24|0);
  $55 = ((($vb)) + 32|0);
  $56 = $52 + -764.6162109375;
  $57 = (($11) + -1)|0;
  $58 = ($57|0)>(1);
  $59 = $52 + -382.30810546875;
  $global_ampmax$037 = $24;$i$038 = 0;
  while(1) {
   $60 = HEAP32[$vb>>2]|0;
   $61 = (($60) + ($i$038<<2)|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (__vorbis_block_alloc($vb,$45)|0);
   $64 = (($19) + ($i$038<<2)|0);
   HEAP32[$64>>2] = $63;
   $65 = (__vorbis_block_alloc($vb,$45)|0);
   $66 = (($16) + ($i$038<<2)|0);
   HEAP32[$66>>2] = $65;
   $67 = HEAP32[$54>>2]|0;
   $68 = HEAP32[$30>>2]|0;
   $69 = HEAP32[$55>>2]|0;
   __vorbis_apply_window($62,$53,$5,$67,$68,$69);
   $70 = HEAP32[$30>>2]|0;
   $71 = (((($7)) + 12|0) + ($70<<2)|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = HEAP32[$72>>2]|0;
   $74 = HEAP32[$66>>2]|0;
   _mdct_forward($73,$62,$74);
   $75 = HEAP32[$30>>2]|0;
   $76 = (((($7)) + 20|0) + (($75*12)|0)|0);
   _drft_forward($76,$62);
   $77 = HEAP32[$62>>2]|0;
   $78 = $77 & 2147483647;
   $79 = (+($78>>>0));
   $80 = $79 * 7.1771142984289327E-7;
   $81 = $56 + $80;
   $82 = $81;
   $83 = $82 + 0.34499999999999997;
   $84 = $83;
   HEAPF32[$62>>2] = $84;
   $85 = (($27) + ($i$038<<2)|0);
   HEAPF32[$85>>2] = $84;
   if ($58) {
    $105 = $84;$j$033 = 1;
    while(1) {
     $86 = (($62) + ($j$033<<2)|0);
     $87 = +HEAPF32[$86>>2];
     $88 = $87 * $87;
     $89 = (($j$033) + 1)|0;
     $90 = (($62) + ($89<<2)|0);
     $91 = +HEAPF32[$90>>2];
     $92 = $91 * $91;
     $93 = $92 + $88;
     $94 = (HEAPF32[tempDoublePtr>>2]=$93,HEAP32[tempDoublePtr>>2]|0);
     $95 = $94 & 2147483647;
     $96 = (+($95>>>0));
     $97 = $96 * 3.5885571492144663E-7;
     $98 = $59 + $97;
     $99 = $98;
     $100 = $99 + 0.34499999999999997;
     $101 = $100;
     $102 = $89 >> 1;
     $103 = (($62) + ($102<<2)|0);
     HEAPF32[$103>>2] = $101;
     $104 = $101 > $105;
     if ($104) {
      HEAPF32[$85>>2] = $101;
      $597 = $101;
     } else {
      $597 = $105;
     }
     $106 = (($j$033) + 2)|0;
     $107 = ($106|0)<($57|0);
     if ($107) {
      $105 = $597;$j$033 = $106;
     } else {
      $109 = $597;
      break;
     }
    }
   } else {
    $109 = $84;
   }
   $108 = $109 > 0.0;
   if ($108) {
    HEAPF32[$85>>2] = 0.0;
    $111 = 0.0;
   } else {
    $111 = $109;
   }
   $110 = $111 > $global_ampmax$037;
   $global_ampmax$1 = $110 ? $111 : $global_ampmax$037;
   $112 = (($i$038) + 1)|0;
   $113 = HEAP32[$12>>2]|0;
   $114 = ($112|0)<($113|0);
   if ($114) {
    $global_ampmax$037 = $global_ampmax$1;$i$038 = $112;
   } else {
    $$pre$phi53Z2D = $45;$$pre$phiZ2D = $44;$global_ampmax$0$lcssa = $global_ampmax$1;
    break;
   }
  }
 } else {
  $$pre51 = (($11|0) / 2)&-1;
  $$pre52 = $$pre51 << 2;
  $$pre$phi53Z2D = $$pre52;$$pre$phiZ2D = $$pre51;$global_ampmax$0$lcssa = $24;
 }
 $115 = (__vorbis_block_alloc($vb,$$pre$phi53Z2D)|0);
 $116 = (__vorbis_block_alloc($vb,$$pre$phi53Z2D)|0);
 $117 = HEAP32[$12>>2]|0;
 $118 = ($117|0)>(0);
 L17: do {
  if ($118) {
   $119 = ($11|0)>(1);
   $120 = ((($7)) + 48|0);
   if ($119) {
    $i$129$us = 0;
   } else {
    $i$129 = 0;
    while(1) {
     $316 = (((($33)) + 4|0) + ($i$129<<2)|0);
     $317 = HEAP32[$316>>2]|0;
     $318 = (($16) + ($i$129<<2)|0);
     $319 = HEAP32[$318>>2]|0;
     $320 = HEAP32[$vb>>2]|0;
     $321 = (($320) + ($i$129<<2)|0);
     $322 = HEAP32[$321>>2]|0;
     $323 = (($322) + ($$pre$phiZ2D<<2)|0);
     HEAP32[$39>>2] = $31;
     $324 = (__vorbis_block_alloc($vb,60)|0);
     $325 = (($22) + ($i$129<<2)|0);
     HEAP32[$325>>2] = $324;
     dest=$324; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
     __vp_noisemask($38,$323,$115);
     $326 = (($27) + ($i$129<<2)|0);
     $327 = +HEAPF32[$326>>2];
     __vp_tonemask($38,$322,$116,$global_ampmax$0$lcssa,$327);
     __vp_offset_and_mix($38,$115,$116,1,$322,$319,$323);
     $328 = (((($33)) + 1028|0) + ($317<<2)|0);
     $329 = HEAP32[$328>>2]|0;
     $330 = (((($5)) + 800|0) + ($329<<2)|0);
     $331 = HEAP32[$330>>2]|0;
     $332 = ($331|0)==(1);
     if (!($332)) {
      $$0 = -1;
      break;
     }
     $333 = HEAP32[$120>>2]|0;
     $334 = (($333) + ($329<<2)|0);
     $335 = HEAP32[$334>>2]|0;
     $336 = (_floor1_fit($vb,$335,$323,$322)|0);
     $337 = HEAP32[$325>>2]|0;
     $338 = ((($337)) + 28|0);
     HEAP32[$338>>2] = $336;
     $339 = (_vorbis_bitrate_managed($vb)|0);
     $340 = ($339|0)==(0);
     if (!($340)) {
      $341 = HEAP32[$325>>2]|0;
      $342 = ((($341)) + 28|0);
      $343 = HEAP32[$342>>2]|0;
      $344 = ($343|0)==(0|0);
      if (!($344)) {
       __vp_offset_and_mix($38,$115,$116,2,$322,$319,$323);
       $345 = HEAP32[$328>>2]|0;
       $346 = HEAP32[$120>>2]|0;
       $347 = (($346) + ($345<<2)|0);
       $348 = HEAP32[$347>>2]|0;
       $349 = (_floor1_fit($vb,$348,$323,$322)|0);
       $350 = HEAP32[$325>>2]|0;
       $351 = ((($350)) + 56|0);
       HEAP32[$351>>2] = $349;
       __vp_offset_and_mix($38,$115,$116,0,$322,$319,$323);
       $352 = HEAP32[$328>>2]|0;
       $353 = HEAP32[$120>>2]|0;
       $354 = (($353) + ($352<<2)|0);
       $355 = HEAP32[$354>>2]|0;
       $356 = (_floor1_fit($vb,$355,$323,$322)|0);
       $357 = HEAP32[$325>>2]|0;
       HEAP32[$357>>2] = $356;
       $358 = HEAP32[$328>>2]|0;
       $359 = HEAP32[$120>>2]|0;
       $360 = (($359) + ($358<<2)|0);
       $361 = HEAP32[$360>>2]|0;
       $362 = HEAP32[$325>>2]|0;
       $363 = HEAP32[$362>>2]|0;
       $364 = ((($362)) + 28|0);
       $365 = HEAP32[$364>>2]|0;
       $366 = (_floor1_interpolate_fit($vb,$361,$363,$365,9362)|0);
       $367 = HEAP32[$325>>2]|0;
       $368 = ((($367)) + 4|0);
       HEAP32[$368>>2] = $366;
       $369 = HEAP32[$328>>2]|0;
       $370 = HEAP32[$120>>2]|0;
       $371 = (($370) + ($369<<2)|0);
       $372 = HEAP32[$371>>2]|0;
       $373 = HEAP32[$325>>2]|0;
       $374 = HEAP32[$373>>2]|0;
       $375 = ((($373)) + 28|0);
       $376 = HEAP32[$375>>2]|0;
       $377 = (_floor1_interpolate_fit($vb,$372,$374,$376,18724)|0);
       $378 = HEAP32[$325>>2]|0;
       $379 = ((($378)) + 8|0);
       HEAP32[$379>>2] = $377;
       $380 = HEAP32[$328>>2]|0;
       $381 = HEAP32[$120>>2]|0;
       $382 = (($381) + ($380<<2)|0);
       $383 = HEAP32[$382>>2]|0;
       $384 = HEAP32[$325>>2]|0;
       $385 = HEAP32[$384>>2]|0;
       $386 = ((($384)) + 28|0);
       $387 = HEAP32[$386>>2]|0;
       $388 = (_floor1_interpolate_fit($vb,$383,$385,$387,28086)|0);
       $389 = HEAP32[$325>>2]|0;
       $390 = ((($389)) + 12|0);
       HEAP32[$390>>2] = $388;
       $391 = HEAP32[$328>>2]|0;
       $392 = HEAP32[$120>>2]|0;
       $393 = (($392) + ($391<<2)|0);
       $394 = HEAP32[$393>>2]|0;
       $395 = HEAP32[$325>>2]|0;
       $396 = HEAP32[$395>>2]|0;
       $397 = ((($395)) + 28|0);
       $398 = HEAP32[$397>>2]|0;
       $399 = (_floor1_interpolate_fit($vb,$394,$396,$398,37449)|0);
       $400 = HEAP32[$325>>2]|0;
       $401 = ((($400)) + 16|0);
       HEAP32[$401>>2] = $399;
       $402 = HEAP32[$328>>2]|0;
       $403 = HEAP32[$120>>2]|0;
       $404 = (($403) + ($402<<2)|0);
       $405 = HEAP32[$404>>2]|0;
       $406 = HEAP32[$325>>2]|0;
       $407 = HEAP32[$406>>2]|0;
       $408 = ((($406)) + 28|0);
       $409 = HEAP32[$408>>2]|0;
       $410 = (_floor1_interpolate_fit($vb,$405,$407,$409,46811)|0);
       $411 = HEAP32[$325>>2]|0;
       $412 = ((($411)) + 20|0);
       HEAP32[$412>>2] = $410;
       $413 = HEAP32[$328>>2]|0;
       $414 = HEAP32[$120>>2]|0;
       $415 = (($414) + ($413<<2)|0);
       $416 = HEAP32[$415>>2]|0;
       $417 = HEAP32[$325>>2]|0;
       $418 = HEAP32[$417>>2]|0;
       $419 = ((($417)) + 28|0);
       $420 = HEAP32[$419>>2]|0;
       $421 = (_floor1_interpolate_fit($vb,$416,$418,$420,56173)|0);
       $422 = HEAP32[$325>>2]|0;
       $423 = ((($422)) + 24|0);
       HEAP32[$423>>2] = $421;
       $424 = HEAP32[$328>>2]|0;
       $425 = HEAP32[$120>>2]|0;
       $426 = (($425) + ($424<<2)|0);
       $427 = HEAP32[$426>>2]|0;
       $428 = HEAP32[$325>>2]|0;
       $429 = ((($428)) + 28|0);
       $430 = HEAP32[$429>>2]|0;
       $431 = ((($428)) + 56|0);
       $432 = HEAP32[$431>>2]|0;
       $433 = (_floor1_interpolate_fit($vb,$427,$430,$432,9362)|0);
       $434 = HEAP32[$325>>2]|0;
       $435 = ((($434)) + 32|0);
       HEAP32[$435>>2] = $433;
       $436 = HEAP32[$328>>2]|0;
       $437 = HEAP32[$120>>2]|0;
       $438 = (($437) + ($436<<2)|0);
       $439 = HEAP32[$438>>2]|0;
       $440 = HEAP32[$325>>2]|0;
       $441 = ((($440)) + 28|0);
       $442 = HEAP32[$441>>2]|0;
       $443 = ((($440)) + 56|0);
       $444 = HEAP32[$443>>2]|0;
       $445 = (_floor1_interpolate_fit($vb,$439,$442,$444,18724)|0);
       $446 = HEAP32[$325>>2]|0;
       $447 = ((($446)) + 36|0);
       HEAP32[$447>>2] = $445;
       $448 = HEAP32[$328>>2]|0;
       $449 = HEAP32[$120>>2]|0;
       $450 = (($449) + ($448<<2)|0);
       $451 = HEAP32[$450>>2]|0;
       $452 = HEAP32[$325>>2]|0;
       $453 = ((($452)) + 28|0);
       $454 = HEAP32[$453>>2]|0;
       $455 = ((($452)) + 56|0);
       $456 = HEAP32[$455>>2]|0;
       $457 = (_floor1_interpolate_fit($vb,$451,$454,$456,28086)|0);
       $458 = HEAP32[$325>>2]|0;
       $459 = ((($458)) + 40|0);
       HEAP32[$459>>2] = $457;
       $460 = HEAP32[$328>>2]|0;
       $461 = HEAP32[$120>>2]|0;
       $462 = (($461) + ($460<<2)|0);
       $463 = HEAP32[$462>>2]|0;
       $464 = HEAP32[$325>>2]|0;
       $465 = ((($464)) + 28|0);
       $466 = HEAP32[$465>>2]|0;
       $467 = ((($464)) + 56|0);
       $468 = HEAP32[$467>>2]|0;
       $469 = (_floor1_interpolate_fit($vb,$463,$466,$468,37449)|0);
       $470 = HEAP32[$325>>2]|0;
       $471 = ((($470)) + 44|0);
       HEAP32[$471>>2] = $469;
       $472 = HEAP32[$328>>2]|0;
       $473 = HEAP32[$120>>2]|0;
       $474 = (($473) + ($472<<2)|0);
       $475 = HEAP32[$474>>2]|0;
       $476 = HEAP32[$325>>2]|0;
       $477 = ((($476)) + 28|0);
       $478 = HEAP32[$477>>2]|0;
       $479 = ((($476)) + 56|0);
       $480 = HEAP32[$479>>2]|0;
       $481 = (_floor1_interpolate_fit($vb,$475,$478,$480,46811)|0);
       $482 = HEAP32[$325>>2]|0;
       $483 = ((($482)) + 48|0);
       HEAP32[$483>>2] = $481;
       $484 = HEAP32[$328>>2]|0;
       $485 = HEAP32[$120>>2]|0;
       $486 = (($485) + ($484<<2)|0);
       $487 = HEAP32[$486>>2]|0;
       $488 = HEAP32[$325>>2]|0;
       $489 = ((($488)) + 28|0);
       $490 = HEAP32[$489>>2]|0;
       $491 = ((($488)) + 56|0);
       $492 = HEAP32[$491>>2]|0;
       $493 = (_floor1_interpolate_fit($vb,$487,$490,$492,56173)|0);
       $494 = HEAP32[$325>>2]|0;
       $495 = ((($494)) + 52|0);
       HEAP32[$495>>2] = $493;
      }
     }
     $496 = (($i$129) + 1)|0;
     $497 = HEAP32[$12>>2]|0;
     $498 = ($496|0)<($497|0);
     if ($498) {
      $i$129 = $496;
     } else {
      $$pre$phi55Z2D = $120;$500 = $497;
      break L17;
     }
    }
    STACKTOP = sp;return ($$0|0);
   }
   while(1) {
    $311 = (((($33)) + 4|0) + ($i$129$us<<2)|0);
    $127 = HEAP32[$311>>2]|0;
    $312 = (($16) + ($i$129$us<<2)|0);
    $125 = HEAP32[$312>>2]|0;
    $313 = HEAP32[$vb>>2]|0;
    $314 = (($313) + ($i$129$us<<2)|0);
    $124 = HEAP32[$314>>2]|0;
    $121 = (($124) + ($$pre$phiZ2D<<2)|0);
    HEAP32[$39>>2] = $31;
    $315 = (__vorbis_block_alloc($vb,60)|0);
    $137 = (($22) + ($i$129$us<<2)|0);
    HEAP32[$137>>2] = $315;
    dest=$315; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    $j$123$us = 0;
    while(1) {
     $299 = (($125) + ($j$123$us<<2)|0);
     $300 = HEAP32[$299>>2]|0;
     $301 = $300 & 2147483647;
     $302 = (+($301>>>0));
     $303 = $302 * 7.1771142984289327E-7;
     $304 = $303 + -764.6162109375;
     $305 = $304;
     $306 = $305 + 0.34499999999999997;
     $307 = $306;
     $$sum1$us = (($j$123$us) + ($$pre$phiZ2D))|0;
     $308 = (($124) + ($$sum1$us<<2)|0);
     HEAPF32[$308>>2] = $307;
     $309 = (($j$123$us) + 1)|0;
     $310 = ($309|0)<($$pre$phiZ2D|0);
     if ($310) {
      $j$123$us = $309;
     } else {
      break;
     }
    }
    __vp_noisemask($38,$121,$115);
    $122 = (($27) + ($i$129$us<<2)|0);
    $123 = +HEAPF32[$122>>2];
    __vp_tonemask($38,$124,$116,$global_ampmax$0$lcssa,$123);
    __vp_offset_and_mix($38,$115,$116,1,$124,$125,$121);
    $126 = (((($33)) + 1028|0) + ($127<<2)|0);
    $128 = HEAP32[$126>>2]|0;
    $129 = (((($5)) + 800|0) + ($128<<2)|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = ($130|0)==(1);
    if (!($131)) {
     $$0 = -1;
     break;
    }
    $132 = HEAP32[$120>>2]|0;
    $133 = (($132) + ($128<<2)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = (_floor1_fit($vb,$134,$121,$124)|0);
    $136 = HEAP32[$137>>2]|0;
    $138 = ((($136)) + 28|0);
    HEAP32[$138>>2] = $135;
    $139 = (_vorbis_bitrate_managed($vb)|0);
    $140 = ($139|0)==(0);
    if (!($140)) {
     $141 = HEAP32[$137>>2]|0;
     $142 = ((($141)) + 28|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($143|0)==(0|0);
     if (!($144)) {
      __vp_offset_and_mix($38,$115,$116,2,$124,$125,$121);
      $145 = HEAP32[$126>>2]|0;
      $146 = HEAP32[$120>>2]|0;
      $147 = (($146) + ($145<<2)|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = (_floor1_fit($vb,$148,$121,$124)|0);
      $150 = HEAP32[$137>>2]|0;
      $151 = ((($150)) + 56|0);
      HEAP32[$151>>2] = $149;
      __vp_offset_and_mix($38,$115,$116,0,$124,$125,$121);
      $152 = HEAP32[$126>>2]|0;
      $153 = HEAP32[$120>>2]|0;
      $154 = (($153) + ($152<<2)|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = (_floor1_fit($vb,$155,$121,$124)|0);
      $157 = HEAP32[$137>>2]|0;
      HEAP32[$157>>2] = $156;
      $158 = HEAP32[$126>>2]|0;
      $159 = HEAP32[$120>>2]|0;
      $160 = (($159) + ($158<<2)|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = HEAP32[$137>>2]|0;
      $163 = HEAP32[$162>>2]|0;
      $164 = ((($162)) + 28|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = (_floor1_interpolate_fit($vb,$161,$163,$165,9362)|0);
      $167 = HEAP32[$137>>2]|0;
      $168 = ((($167)) + 4|0);
      HEAP32[$168>>2] = $166;
      $169 = HEAP32[$126>>2]|0;
      $170 = HEAP32[$120>>2]|0;
      $171 = (($170) + ($169<<2)|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = HEAP32[$137>>2]|0;
      $174 = HEAP32[$173>>2]|0;
      $175 = ((($173)) + 28|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = (_floor1_interpolate_fit($vb,$172,$174,$176,18724)|0);
      $178 = HEAP32[$137>>2]|0;
      $179 = ((($178)) + 8|0);
      HEAP32[$179>>2] = $177;
      $180 = HEAP32[$126>>2]|0;
      $181 = HEAP32[$120>>2]|0;
      $182 = (($181) + ($180<<2)|0);
      $183 = HEAP32[$182>>2]|0;
      $184 = HEAP32[$137>>2]|0;
      $185 = HEAP32[$184>>2]|0;
      $186 = ((($184)) + 28|0);
      $187 = HEAP32[$186>>2]|0;
      $188 = (_floor1_interpolate_fit($vb,$183,$185,$187,28086)|0);
      $189 = HEAP32[$137>>2]|0;
      $190 = ((($189)) + 12|0);
      HEAP32[$190>>2] = $188;
      $191 = HEAP32[$126>>2]|0;
      $192 = HEAP32[$120>>2]|0;
      $193 = (($192) + ($191<<2)|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = HEAP32[$137>>2]|0;
      $196 = HEAP32[$195>>2]|0;
      $197 = ((($195)) + 28|0);
      $198 = HEAP32[$197>>2]|0;
      $199 = (_floor1_interpolate_fit($vb,$194,$196,$198,37449)|0);
      $200 = HEAP32[$137>>2]|0;
      $201 = ((($200)) + 16|0);
      HEAP32[$201>>2] = $199;
      $202 = HEAP32[$126>>2]|0;
      $203 = HEAP32[$120>>2]|0;
      $204 = (($203) + ($202<<2)|0);
      $205 = HEAP32[$204>>2]|0;
      $206 = HEAP32[$137>>2]|0;
      $207 = HEAP32[$206>>2]|0;
      $208 = ((($206)) + 28|0);
      $209 = HEAP32[$208>>2]|0;
      $210 = (_floor1_interpolate_fit($vb,$205,$207,$209,46811)|0);
      $211 = HEAP32[$137>>2]|0;
      $212 = ((($211)) + 20|0);
      HEAP32[$212>>2] = $210;
      $213 = HEAP32[$126>>2]|0;
      $214 = HEAP32[$120>>2]|0;
      $215 = (($214) + ($213<<2)|0);
      $216 = HEAP32[$215>>2]|0;
      $217 = HEAP32[$137>>2]|0;
      $218 = HEAP32[$217>>2]|0;
      $219 = ((($217)) + 28|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = (_floor1_interpolate_fit($vb,$216,$218,$220,56173)|0);
      $222 = HEAP32[$137>>2]|0;
      $223 = ((($222)) + 24|0);
      HEAP32[$223>>2] = $221;
      $224 = HEAP32[$126>>2]|0;
      $225 = HEAP32[$120>>2]|0;
      $226 = (($225) + ($224<<2)|0);
      $227 = HEAP32[$226>>2]|0;
      $228 = HEAP32[$137>>2]|0;
      $229 = ((($228)) + 28|0);
      $230 = HEAP32[$229>>2]|0;
      $231 = ((($228)) + 56|0);
      $232 = HEAP32[$231>>2]|0;
      $233 = (_floor1_interpolate_fit($vb,$227,$230,$232,9362)|0);
      $234 = HEAP32[$137>>2]|0;
      $235 = ((($234)) + 32|0);
      HEAP32[$235>>2] = $233;
      $236 = HEAP32[$126>>2]|0;
      $237 = HEAP32[$120>>2]|0;
      $238 = (($237) + ($236<<2)|0);
      $239 = HEAP32[$238>>2]|0;
      $240 = HEAP32[$137>>2]|0;
      $241 = ((($240)) + 28|0);
      $242 = HEAP32[$241>>2]|0;
      $243 = ((($240)) + 56|0);
      $244 = HEAP32[$243>>2]|0;
      $245 = (_floor1_interpolate_fit($vb,$239,$242,$244,18724)|0);
      $246 = HEAP32[$137>>2]|0;
      $247 = ((($246)) + 36|0);
      HEAP32[$247>>2] = $245;
      $248 = HEAP32[$126>>2]|0;
      $249 = HEAP32[$120>>2]|0;
      $250 = (($249) + ($248<<2)|0);
      $251 = HEAP32[$250>>2]|0;
      $252 = HEAP32[$137>>2]|0;
      $253 = ((($252)) + 28|0);
      $254 = HEAP32[$253>>2]|0;
      $255 = ((($252)) + 56|0);
      $256 = HEAP32[$255>>2]|0;
      $257 = (_floor1_interpolate_fit($vb,$251,$254,$256,28086)|0);
      $258 = HEAP32[$137>>2]|0;
      $259 = ((($258)) + 40|0);
      HEAP32[$259>>2] = $257;
      $260 = HEAP32[$126>>2]|0;
      $261 = HEAP32[$120>>2]|0;
      $262 = (($261) + ($260<<2)|0);
      $263 = HEAP32[$262>>2]|0;
      $264 = HEAP32[$137>>2]|0;
      $265 = ((($264)) + 28|0);
      $266 = HEAP32[$265>>2]|0;
      $267 = ((($264)) + 56|0);
      $268 = HEAP32[$267>>2]|0;
      $269 = (_floor1_interpolate_fit($vb,$263,$266,$268,37449)|0);
      $270 = HEAP32[$137>>2]|0;
      $271 = ((($270)) + 44|0);
      HEAP32[$271>>2] = $269;
      $272 = HEAP32[$126>>2]|0;
      $273 = HEAP32[$120>>2]|0;
      $274 = (($273) + ($272<<2)|0);
      $275 = HEAP32[$274>>2]|0;
      $276 = HEAP32[$137>>2]|0;
      $277 = ((($276)) + 28|0);
      $278 = HEAP32[$277>>2]|0;
      $279 = ((($276)) + 56|0);
      $280 = HEAP32[$279>>2]|0;
      $281 = (_floor1_interpolate_fit($vb,$275,$278,$280,46811)|0);
      $282 = HEAP32[$137>>2]|0;
      $283 = ((($282)) + 48|0);
      HEAP32[$283>>2] = $281;
      $284 = HEAP32[$126>>2]|0;
      $285 = HEAP32[$120>>2]|0;
      $286 = (($285) + ($284<<2)|0);
      $287 = HEAP32[$286>>2]|0;
      $288 = HEAP32[$137>>2]|0;
      $289 = ((($288)) + 28|0);
      $290 = HEAP32[$289>>2]|0;
      $291 = ((($288)) + 56|0);
      $292 = HEAP32[$291>>2]|0;
      $293 = (_floor1_interpolate_fit($vb,$287,$290,$292,56173)|0);
      $294 = HEAP32[$137>>2]|0;
      $295 = ((($294)) + 52|0);
      HEAP32[$295>>2] = $293;
     }
    }
    $296 = (($i$129$us) + 1)|0;
    $297 = HEAP32[$12>>2]|0;
    $298 = ($296|0)<($297|0);
    if ($298) {
     $i$129$us = $296;
    } else {
     $$pre$phi55Z2D = $120;$500 = $297;
     break L17;
    }
   }
   STACKTOP = sp;return ($$0|0);
  } else {
   $$pre54 = ((($7)) + 48|0);
   $$pre$phi55Z2D = $$pre54;$500 = $117;
  }
 } while(0);
 HEAPF32[$23>>2] = $global_ampmax$0$lcssa;
 $499 = $500 << 2;
 $$alloca_mul3 = $499;
 $501 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul3)|0)+15)&-16)|0;;
 $$alloca_mul5 = $499;
 $502 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul5)|0)+15)&-16)|0;;
 $503 = (_vorbis_bitrate_managed($vb)|0);
 $504 = ($503|0)!=(0);
 $505 = $504 ? 0 : 7;
 $506 = ((($7)) + 44|0);
 $507 = ((($vb)) + 24|0);
 $508 = ((($vb)) + 32|0);
 $509 = ((($5)) + 2868|0);
 $510 = ((($7)) + 52|0);
 $k$222 = $505;
 while(1) {
  $511 = (((($9)) + 12|0) + ($k$222<<2)|0);
  $512 = HEAP32[$511>>2]|0;
  _oggpack_write($512,0,1);
  $513 = HEAP32[$506>>2]|0;
  _oggpack_write($512,$31,$513);
  $514 = HEAP32[$30>>2]|0;
  $515 = ($514|0)==(0);
  if (!($515)) {
   $516 = HEAP32[$507>>2]|0;
   _oggpack_write($512,$516,1);
   $517 = HEAP32[$508>>2]|0;
   _oggpack_write($512,$517,1);
  }
  $518 = HEAP32[$12>>2]|0;
  $519 = ($518|0)>(0);
  if ($519) {
   $i$25 = 0;
   while(1) {
    $520 = (((($33)) + 4|0) + ($i$25<<2)|0);
    $521 = HEAP32[$520>>2]|0;
    $522 = (($19) + ($i$25<<2)|0);
    $523 = HEAP32[$522>>2]|0;
    $524 = (((($33)) + 1028|0) + ($521<<2)|0);
    $525 = HEAP32[$524>>2]|0;
    $526 = HEAP32[$$pre$phi55Z2D>>2]|0;
    $527 = (($526) + ($525<<2)|0);
    $528 = HEAP32[$527>>2]|0;
    $529 = (($22) + ($i$25<<2)|0);
    $530 = HEAP32[$529>>2]|0;
    $531 = (($530) + ($k$222<<2)|0);
    $532 = HEAP32[$531>>2]|0;
    $533 = (_floor1_encode($512,$vb,$528,$532,$523)|0);
    $534 = (($15) + ($i$25<<2)|0);
    HEAP32[$534>>2] = $533;
    $535 = (($i$25) + 1)|0;
    $536 = HEAP32[$12>>2]|0;
    $537 = ($535|0)<($536|0);
    if ($537) {
     $i$25 = $535;
    } else {
     $$lcssa = $536;
     break;
    }
   }
  } else {
   $$lcssa = $518;
  }
  $538 = HEAP32[$30>>2]|0;
  $539 = ((((($5)) + 3240|0) + (($538*60)|0)|0) + ($k$222<<2)|0);
  $540 = HEAP32[$539>>2]|0;
  __vp_couple_quantize_normalize($k$222,$509,$38,$33,$16,$19,$15,$540,$$lcssa);
  $541 = HEAP32[$33>>2]|0;
  $542 = ($541|0)>(0);
  if ($542) {
   $i$318 = 0;
   while(1) {
    $543 = (((($33)) + 1092|0) + ($i$318<<2)|0);
    $544 = HEAP32[$543>>2]|0;
    $545 = HEAP32[$12>>2]|0;
    $546 = ($545|0)>(0);
    if ($546) {
     $598 = $545;$ch_in_bundle$07 = 0;$j$26 = 0;
     while(1) {
      $547 = (((($33)) + 4|0) + ($j$26<<2)|0);
      $548 = HEAP32[$547>>2]|0;
      $549 = ($548|0)==($i$318|0);
      if ($549) {
       $550 = (($502) + ($ch_in_bundle$07<<2)|0);
       $551 = (($15) + ($j$26<<2)|0);
       $552 = HEAP32[$551>>2]|0;
       $not$ = ($552|0)!=(0);
       $$ = $not$&1;
       HEAP32[$550>>2] = $$;
       $553 = (($19) + ($j$26<<2)|0);
       $554 = HEAP32[$553>>2]|0;
       $555 = (($ch_in_bundle$07) + 1)|0;
       $556 = (($501) + ($ch_in_bundle$07<<2)|0);
       HEAP32[$556>>2] = $554;
       $$pre = HEAP32[$12>>2]|0;
       $559 = $$pre;$ch_in_bundle$1 = $555;
      } else {
       $559 = $598;$ch_in_bundle$1 = $ch_in_bundle$07;
      }
      $557 = (($j$26) + 1)|0;
      $558 = ($557|0)<($559|0);
      if ($558) {
       $598 = $559;$ch_in_bundle$07 = $ch_in_bundle$1;$j$26 = $557;
      } else {
       $ch_in_bundle$0$lcssa = $ch_in_bundle$1;
       break;
      }
     }
    } else {
     $ch_in_bundle$0$lcssa = 0;
    }
    $560 = (((($5)) + 1312|0) + ($544<<2)|0);
    $561 = HEAP32[$560>>2]|0;
    $562 = (25648 + ($561<<2)|0);
    $563 = HEAP32[$562>>2]|0;
    $564 = ((($563)) + 20|0);
    $565 = HEAP32[$564>>2]|0;
    $566 = HEAP32[$510>>2]|0;
    $567 = (($566) + ($544<<2)|0);
    $568 = HEAP32[$567>>2]|0;
    $569 = (FUNCTION_TABLE_iiiiii[$565 & 7]($vb,$568,$501,$502,$ch_in_bundle$0$lcssa)|0);
    $570 = HEAP32[$12>>2]|0;
    $571 = ($570|0)>(0);
    if ($571) {
     $ch_in_bundle$213 = 0;$j$312 = 0;
     while(1) {
      $572 = (((($33)) + 4|0) + ($j$312<<2)|0);
      $573 = HEAP32[$572>>2]|0;
      $574 = ($573|0)==($i$318|0);
      if ($574) {
       $575 = (($19) + ($j$312<<2)|0);
       $576 = HEAP32[$575>>2]|0;
       $577 = (($ch_in_bundle$213) + 1)|0;
       $578 = (($501) + ($ch_in_bundle$213<<2)|0);
       HEAP32[$578>>2] = $576;
       $ch_in_bundle$3 = $577;
      } else {
       $ch_in_bundle$3 = $ch_in_bundle$213;
      }
      $579 = (($j$312) + 1)|0;
      $580 = ($579|0)<($570|0);
      if ($580) {
       $ch_in_bundle$213 = $ch_in_bundle$3;$j$312 = $579;
      } else {
       $ch_in_bundle$2$lcssa = $ch_in_bundle$3;
       break;
      }
     }
    } else {
     $ch_in_bundle$2$lcssa = 0;
    }
    $581 = HEAP32[$560>>2]|0;
    $582 = (25648 + ($581<<2)|0);
    $583 = HEAP32[$582>>2]|0;
    $584 = ((($583)) + 24|0);
    $585 = HEAP32[$584>>2]|0;
    $586 = HEAP32[$510>>2]|0;
    $587 = (($586) + ($544<<2)|0);
    $588 = HEAP32[$587>>2]|0;
    (FUNCTION_TABLE_iiiiiiiii[$585 & 3]($512,$vb,$588,$501,$502,$ch_in_bundle$2$lcssa,$569,$i$318)|0);
    $589 = (($i$318) + 1)|0;
    $590 = HEAP32[$33>>2]|0;
    $591 = ($589|0)<($590|0);
    if ($591) {
     $i$318 = $589;
    } else {
     break;
    }
   }
  }
  $592 = (($k$222) + 1)|0;
  $593 = (_vorbis_bitrate_managed($vb)|0);
  $594 = ($593|0)!=(0);
  $595 = $594 ? 14 : 7;
  $596 = ($k$222|0)<($595|0);
  if ($596) {
   $k$222 = $592;
  } else {
   $$0 = 0;
   break;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _mapping0_inverse($vb,$l) {
 $vb = $vb|0;
 $l = $l|0;
 var $$ = 0, $$2 = 0, $$alloca_mul = 0, $$alloca_mul1 = 0, $$alloca_mul3 = 0, $$alloca_mul5 = 0, $$lcssa = 0, $$pre31 = 0, $$pre32 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0;
 var $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ch_in_bundle$0$lcssa = 0;
 var $ch_in_bundle$018 = 0, $ch_in_bundle$1 = 0, $i$027 = 0, $i$124 = 0, $i$222 = 0, $i$315 = 0, $i$315$in = 0, $i$49 = 0, $i$58 = 0, $j$019 = 0, $j$111 = 0, $not$ = 0, $not$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vb)) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 104|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($vb)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($5) + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($vb)) + 36|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($3)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 << 2;
 $$alloca_mul = $15;
 $16 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
 $$alloca_mul1 = $15;
 $17 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul1)|0)+15)&-16)|0;;
 $$alloca_mul3 = $15;
 $18 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul3)|0)+15)&-16)|0;;
 $$alloca_mul5 = $15;
 $19 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul5)|0)+15)&-16)|0;;
 $20 = HEAP32[$13>>2]|0;
 $21 = ($20|0)>(0);
 if ($21) {
  $22 = ((($l)) + 4|0);
  $23 = ((($l)) + 1028|0);
  $24 = ((($7)) + 48|0);
  $25 = $11 << 1;
  $26 = $25 & 2147483646;
  $i$027 = 0;
  while(1) {
   $32 = (($22) + ($i$027<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($23) + ($33<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (((($5)) + 800|0) + ($35<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (25640 + ($37<<2)|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($39)) + 20|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = HEAP32[$24>>2]|0;
   $43 = (($42) + ($35<<2)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (FUNCTION_TABLE_iii[$41 & 15]($vb,$44)|0);
   $46 = (($19) + ($i$027<<2)|0);
   HEAP32[$46>>2] = $45;
   $47 = (($18) + ($i$027<<2)|0);
   $not$3 = ($45|0)!=(0|0);
   $$ = $not$3&1;
   HEAP32[$47>>2] = $$;
   $48 = HEAP32[$vb>>2]|0;
   $49 = (($48) + ($i$027<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   _memset(($50|0),0,($26|0))|0;
   $51 = (($i$027) + 1)|0;
   $52 = HEAP32[$13>>2]|0;
   $53 = ($51|0)<($52|0);
   if ($53) {
    $i$027 = $51;
   } else {
    $167 = $52;
    break;
   }
  }
 } else {
  $167 = $20;
 }
 $27 = ((($l)) + 1156|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)>(0);
 if ($29) {
  $30 = ((($l)) + 1160|0);
  $31 = ((($l)) + 2184|0);
  $i$124 = 0;
  while(1) {
   $59 = (($30) + ($i$124<<2)|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($18) + ($60<<2)|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($62|0)==(0);
   $64 = (($31) + ($i$124<<2)|0);
   $65 = HEAP32[$64>>2]|0;
   if ($63) {
    $66 = (($18) + ($65<<2)|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = ($67|0)==(0);
    if (!($68)) {
     label = 10;
    }
   } else {
    label = 10;
   }
   if ((label|0) == 10) {
    label = 0;
    HEAP32[$61>>2] = 1;
    $69 = (($18) + ($65<<2)|0);
    HEAP32[$69>>2] = 1;
   }
   $70 = (($i$124) + 1)|0;
   $71 = ($70|0)<($28|0);
   if ($71) {
    $i$124 = $70;
   } else {
    break;
   }
  }
 }
 $54 = HEAP32[$l>>2]|0;
 $55 = ($54|0)>(0);
 if ($55) {
  $56 = ((($l)) + 1092|0);
  $57 = ((($7)) + 52|0);
  $58 = ((($l)) + 4|0);
  $72 = $167;$i$222 = 0;
  while(1) {
   $73 = ($72|0)>(0);
   if ($73) {
    $168 = $72;$ch_in_bundle$018 = 0;$j$019 = 0;
    while(1) {
     $74 = (($58) + ($j$019<<2)|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = ($75|0)==($i$222|0);
     if ($76) {
      $77 = (($18) + ($j$019<<2)|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = (($17) + ($ch_in_bundle$018<<2)|0);
      $not$ = ($78|0)!=(0);
      $$2 = $not$&1;
      HEAP32[$79>>2] = $$2;
      $80 = HEAP32[$vb>>2]|0;
      $81 = (($80) + ($j$019<<2)|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = (($ch_in_bundle$018) + 1)|0;
      $84 = (($16) + ($ch_in_bundle$018<<2)|0);
      HEAP32[$84>>2] = $82;
      $$pre32 = HEAP32[$13>>2]|0;
      $87 = $$pre32;$ch_in_bundle$1 = $83;
     } else {
      $87 = $168;$ch_in_bundle$1 = $ch_in_bundle$018;
     }
     $85 = (($j$019) + 1)|0;
     $86 = ($85|0)<($87|0);
     if ($86) {
      $168 = $87;$ch_in_bundle$018 = $ch_in_bundle$1;$j$019 = $85;
     } else {
      $ch_in_bundle$0$lcssa = $ch_in_bundle$1;
      break;
     }
    }
   } else {
    $ch_in_bundle$0$lcssa = 0;
   }
   $88 = (($56) + ($i$222<<2)|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = (((($5)) + 1312|0) + ($89<<2)|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = (25648 + ($91<<2)|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ((($93)) + 28|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = HEAP32[$57>>2]|0;
   $97 = (($96) + ($89<<2)|0);
   $98 = HEAP32[$97>>2]|0;
   (FUNCTION_TABLE_iiiiii[$95 & 7]($vb,$98,$16,$17,$ch_in_bundle$0$lcssa)|0);
   $99 = (($i$222) + 1)|0;
   $100 = HEAP32[$l>>2]|0;
   $101 = ($99|0)<($100|0);
   if (!($101)) {
    break;
   }
   $$pre31 = HEAP32[$13>>2]|0;
   $72 = $$pre31;$i$222 = $99;
  }
  $$pre33 = HEAP32[$27>>2]|0;
  $102 = $$pre33;
 } else {
  $102 = $28;
 }
 $103 = ($102|0)>(0);
 if ($103) {
  $104 = ((($l)) + 1160|0);
  $105 = HEAP32[$vb>>2]|0;
  $106 = ((($l)) + 2184|0);
  $107 = (($11|0) / 2)&-1;
  $108 = ($11|0)>(1);
  $i$315$in = $102;
  while(1) {
   $i$315 = (($i$315$in) + -1)|0;
   $115 = (($104) + ($i$315<<2)|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (($105) + ($116<<2)|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = (($106) + ($i$315<<2)|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (($105) + ($120<<2)|0);
   $122 = HEAP32[$121>>2]|0;
   if ($108) {
    $j$111 = 0;
    while(1) {
     $123 = (($118) + ($j$111<<2)|0);
     $124 = +HEAPF32[$123>>2];
     $125 = (($122) + ($j$111<<2)|0);
     $126 = +HEAPF32[$125>>2];
     $127 = $124 > 0.0;
     $128 = $126 > 0.0;
     do {
      if ($127) {
       if ($128) {
        HEAPF32[$123>>2] = $124;
        $129 = $124 - $126;
        HEAPF32[$125>>2] = $129;
        break;
       } else {
        HEAPF32[$125>>2] = $124;
        $130 = $126 + $124;
        HEAPF32[$123>>2] = $130;
        break;
       }
      } else {
       if ($128) {
        HEAPF32[$123>>2] = $124;
        $131 = $126 + $124;
        HEAPF32[$125>>2] = $131;
        break;
       } else {
        HEAPF32[$125>>2] = $124;
        $132 = $124 - $126;
        HEAPF32[$123>>2] = $132;
        break;
       }
      }
     } while(0);
     $133 = (($j$111) + 1)|0;
     $134 = ($133|0)<($107|0);
     if ($134) {
      $j$111 = $133;
     } else {
      break;
     }
    }
   }
   $109 = ($i$315$in|0)>(1);
   if ($109) {
    $i$315$in = $i$315;
   } else {
    break;
   }
  }
 }
 $110 = HEAP32[$13>>2]|0;
 $111 = ($110|0)>(0);
 if (!($111)) {
  STACKTOP = sp;return 0;
 }
 $112 = ((($l)) + 4|0);
 $113 = ((($l)) + 1028|0);
 $114 = ((($7)) + 48|0);
 $i$49 = 0;
 while(1) {
  $136 = HEAP32[$vb>>2]|0;
  $137 = (($136) + ($i$49<<2)|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = (($112) + ($i$49<<2)|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = (($113) + ($140<<2)|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = (((($5)) + 800|0) + ($142<<2)|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = (25640 + ($144<<2)|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = ((($146)) + 24|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = HEAP32[$114>>2]|0;
  $150 = (($149) + ($142<<2)|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = (($19) + ($i$49<<2)|0);
  $153 = HEAP32[$152>>2]|0;
  (FUNCTION_TABLE_iiiii[$148 & 3]($vb,$151,$153,$138)|0);
  $154 = (($i$49) + 1)|0;
  $155 = HEAP32[$13>>2]|0;
  $156 = ($154|0)<($155|0);
  if ($156) {
   $i$49 = $154;
  } else {
   $$lcssa = $155;
   break;
  }
 }
 $135 = ($$lcssa|0)>(0);
 if (!($135)) {
  STACKTOP = sp;return 0;
 }
 $i$58 = 0;
 while(1) {
  $157 = HEAP32[$vb>>2]|0;
  $158 = (($157) + ($i$58<<2)|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = HEAP32[$8>>2]|0;
  $161 = (((($7)) + 12|0) + ($160<<2)|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = HEAP32[$162>>2]|0;
  _mdct_backward($163,$159,$159);
  $164 = (($i$58) + 1)|0;
  $165 = HEAP32[$13>>2]|0;
  $166 = ($164|0)<($165|0);
  if ($166) {
   $i$58 = $164;
  } else {
   break;
  }
 }
 STACKTOP = sp;return 0;
}
function _mdct_init($lookup,$n) {
 $lookup = $lookup|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0, $acc$03 = 0, $acc$1 = 0, $acc$1$lcssa = 0, $i$07 = 0, $i$15 = 0, $i1$04 = 0, $j$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($n|0) / 4)&-1;
 $1 = $0 << 2;
 $2 = (_malloc($1)|0);
 $3 = (($0) + ($n))|0;
 $4 = $3 << 2;
 $5 = (_malloc($4)|0);
 $6 = $n >> 1;
 $7 = (+($n|0));
 $8 = $7;
 $9 = (+Math_log((+$8)));
 $10 = $9 * 1.4426950408889634;
 $11 = (+_rint($10));
 $12 = (~~(($11)));
 $13 = ((($lookup)) + 4|0);
 HEAP32[$13>>2] = $12;
 HEAP32[$lookup>>2] = $n;
 $14 = ((($lookup)) + 8|0);
 HEAP32[$14>>2] = $5;
 $15 = ((($lookup)) + 12|0);
 HEAP32[$15>>2] = $2;
 $16 = ($n|0)>(3);
 if (!($16)) {
  $89 = 4.0 / $7;
  $90 = ((($lookup)) + 16|0);
  HEAPF32[$90>>2] = $89;
  return;
 }
 $17 = (+($n|0));
 $18 = 3.1415926535897931 / $17;
 $19 = $n << 1;
 $20 = (+($19|0));
 $21 = 3.1415926535897931 / $20;
 $i$07 = 0;
 while(1) {
  $26 = $i$07 << 2;
  $27 = (+($26|0));
  $28 = $18 * $27;
  $29 = (+Math_cos((+$28)));
  $30 = $29;
  $31 = $i$07 << 1;
  $32 = (($5) + ($31<<2)|0);
  HEAPF32[$32>>2] = $30;
  $33 = (+Math_sin((+$28)));
  $34 = $33;
  $35 = -$34;
  $36 = $31 | 1;
  $37 = (($5) + ($36<<2)|0);
  HEAPF32[$37>>2] = $35;
  $38 = (+($36|0));
  $39 = $21 * $38;
  $40 = (+Math_cos((+$39)));
  $41 = $40;
  $42 = (($31) + ($6))|0;
  $43 = (($5) + ($42<<2)|0);
  HEAPF32[$43>>2] = $41;
  $44 = (+Math_sin((+$39)));
  $45 = $44;
  $46 = (($42) + 1)|0;
  $47 = (($5) + ($46<<2)|0);
  HEAPF32[$47>>2] = $45;
  $48 = (($i$07) + 1)|0;
  $49 = ($48|0)<($0|0);
  if ($49) {
   $i$07 = $48;
  } else {
   break;
  }
 }
 $22 = (($n|0) / 8)&-1;
 $23 = ($n|0)>(7);
 if (!($23)) {
  $89 = 4.0 / $7;
  $90 = ((($lookup)) + 16|0);
  HEAPF32[$90>>2] = $89;
  return;
 }
 $24 = (+($n|0));
 $25 = 3.1415926535897931 / $24;
 $i$15 = 0;
 while(1) {
  $50 = $i$15 << 2;
  $51 = $50 | 2;
  $52 = (+($51|0));
  $53 = $25 * $52;
  $54 = (+Math_cos((+$53)));
  $55 = $54 * 0.5;
  $56 = $55;
  $57 = $i$15 << 1;
  $58 = (($57) + ($n))|0;
  $59 = (($5) + ($58<<2)|0);
  HEAPF32[$59>>2] = $56;
  $60 = (+Math_sin((+$53)));
  $61 = $60 * -0.5;
  $62 = $61;
  $63 = (($58) + 1)|0;
  $64 = (($5) + ($63<<2)|0);
  HEAPF32[$64>>2] = $62;
  $65 = (($i$15) + 1)|0;
  $66 = ($65|0)<($22|0);
  if ($66) {
   $i$15 = $65;
  } else {
   break;
  }
 }
 $67 = (($12) + -1)|0;
 $68 = 1 << $67;
 $69 = (($68) + -1)|0;
 $70 = (($12) + -2)|0;
 $71 = 1 << $70;
 if ($23) {
  $i1$04 = 0;
 } else {
  $89 = 4.0 / $7;
  $90 = ((($lookup)) + 16|0);
  HEAPF32[$90>>2] = $89;
  return;
 }
 while(1) {
  $73 = $71;$acc$03 = 0;$j$02 = 0;
  while(1) {
   $72 = $73 & $i1$04;
   $74 = ($72|0)==(0);
   $75 = 1 << $j$02;
   $76 = $74 ? 0 : $75;
   $acc$1 = $76 | $acc$03;
   $77 = (($j$02) + 1)|0;
   $78 = $71 >> $77;
   $79 = ($78|0)==(0);
   if ($79) {
    $acc$1$lcssa = $acc$1;
    break;
   } else {
    $73 = $78;$acc$03 = $acc$1;$j$02 = $77;
   }
  }
  $80 = $acc$1$lcssa ^ -1;
  $81 = $69 & $80;
  $82 = (($81) + -1)|0;
  $83 = $i1$04 << 1;
  $84 = (($2) + ($83<<2)|0);
  HEAP32[$84>>2] = $82;
  $85 = $83 | 1;
  $86 = (($2) + ($85<<2)|0);
  HEAP32[$86>>2] = $acc$1$lcssa;
  $87 = (($i1$04) + 1)|0;
  $88 = ($87|0)<($22|0);
  if ($88) {
   $i1$04 = $87;
  } else {
   break;
  }
 }
 $89 = 4.0 / $7;
 $90 = ((($lookup)) + 16|0);
 HEAPF32[$90>>2] = $89;
 return;
}
function _mdct_clear($l) {
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($l|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($l)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  _free($2);
 }
 $4 = ((($l)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  _free($5);
 }
 ;HEAP32[$l>>2]=0|0;HEAP32[$l+4>>2]=0|0;HEAP32[$l+8>>2]=0|0;HEAP32[$l+12>>2]=0|0;HEAP32[$l+16>>2]=0|0;
 return;
}
function _mdct_backward($init,$in,$out) {
 $init = $init|0;
 $in = $in|0;
 $out = $out|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0;
 var $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0;
 var $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0.0, $149 = 0.0;
 var $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0.0;
 var $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0;
 var $186 = 0, $187 = 0.0, $188 = 0, $189 = 0.0, $19 = 0.0, $190 = 0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0.0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0.0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0;
 var $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0;
 var $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0;
 var $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0;
 var $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0.0, $T$0 = 0;
 var $T$1 = 0, $T$2 = 0, $iX$0 = 0, $iX$1 = 0, $iX1$0 = 0, $iX1$1 = 0, $iX1$2 = 0, $init$idx = 0, $init$idx$val = 0, $init$idx4$val = 0, $init$idx5$val = 0, $init$idx6 = 0, $init$idx6$val = 0, $oX$0 = 0, $oX$1 = 0, $oX1$0 = 0, $oX1$1 = 0, $oX1$2 = 0, $oX2$0 = 0, $oX2$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$init>>2]|0;
 $1 = $0 >> 1;
 $2 = $0 >> 2;
 $$sum = (($1) + -7)|0;
 $3 = (($in) + ($$sum<<2)|0);
 $$sum1 = (($1) + ($2))|0;
 $4 = (($out) + ($$sum1<<2)|0);
 $5 = ((($init)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($2<<2)|0);
 $T$0 = $7;$iX$0 = $3;$oX$0 = $4;
 while(1) {
  $8 = ((($oX$0)) + -16|0);
  $9 = ((($iX$0)) + 8|0);
  $10 = +HEAPF32[$9>>2];
  $11 = ((($T$0)) + 12|0);
  $12 = +HEAPF32[$11>>2];
  $13 = $10 * $12;
  $14 = -$13;
  $15 = +HEAPF32[$iX$0>>2];
  $16 = ((($T$0)) + 8|0);
  $17 = +HEAPF32[$16>>2];
  $18 = $17 * $15;
  $19 = $14 - $18;
  HEAPF32[$8>>2] = $19;
  $20 = +HEAPF32[$iX$0>>2];
  $21 = +HEAPF32[$11>>2];
  $22 = $21 * $20;
  $23 = +HEAPF32[$9>>2];
  $24 = +HEAPF32[$16>>2];
  $25 = $24 * $23;
  $26 = $22 - $25;
  $27 = ((($oX$0)) + -12|0);
  HEAPF32[$27>>2] = $26;
  $28 = ((($iX$0)) + 24|0);
  $29 = +HEAPF32[$28>>2];
  $30 = ((($T$0)) + 4|0);
  $31 = +HEAPF32[$30>>2];
  $32 = $29 * $31;
  $33 = -$32;
  $34 = ((($iX$0)) + 16|0);
  $35 = +HEAPF32[$34>>2];
  $36 = +HEAPF32[$T$0>>2];
  $37 = $36 * $35;
  $38 = $33 - $37;
  $39 = ((($oX$0)) + -8|0);
  HEAPF32[$39>>2] = $38;
  $40 = +HEAPF32[$34>>2];
  $41 = +HEAPF32[$30>>2];
  $42 = $41 * $40;
  $43 = +HEAPF32[$28>>2];
  $44 = +HEAPF32[$T$0>>2];
  $45 = $44 * $43;
  $46 = $42 - $45;
  $47 = ((($oX$0)) + -4|0);
  HEAPF32[$47>>2] = $46;
  $48 = ((($iX$0)) + -32|0);
  $49 = ((($T$0)) + 16|0);
  $50 = ($48>>>0)<($in>>>0);
  if ($50) {
   break;
  } else {
   $T$0 = $49;$iX$0 = $48;$oX$0 = $8;
  }
 }
 $51 = (($out) + ($1<<2)|0);
 $$sum2 = (($1) + -8)|0;
 $52 = (($in) + ($$sum2<<2)|0);
 $T$1 = $7;$iX$1 = $52;$oX$1 = $4;
 while(1) {
  $53 = ((($T$1)) + -16|0);
  $54 = ((($iX$1)) + 16|0);
  $55 = +HEAPF32[$54>>2];
  $56 = ((($T$1)) + -4|0);
  $57 = +HEAPF32[$56>>2];
  $58 = $57 * $55;
  $59 = ((($iX$1)) + 24|0);
  $60 = +HEAPF32[$59>>2];
  $61 = ((($T$1)) + -8|0);
  $62 = +HEAPF32[$61>>2];
  $63 = $62 * $60;
  $64 = $63 + $58;
  HEAPF32[$oX$1>>2] = $64;
  $65 = +HEAPF32[$54>>2];
  $66 = +HEAPF32[$61>>2];
  $67 = $66 * $65;
  $68 = +HEAPF32[$59>>2];
  $69 = +HEAPF32[$56>>2];
  $70 = $69 * $68;
  $71 = $67 - $70;
  $72 = ((($oX$1)) + 4|0);
  HEAPF32[$72>>2] = $71;
  $73 = +HEAPF32[$iX$1>>2];
  $74 = ((($T$1)) + -12|0);
  $75 = +HEAPF32[$74>>2];
  $76 = $75 * $73;
  $77 = ((($iX$1)) + 8|0);
  $78 = +HEAPF32[$77>>2];
  $79 = +HEAPF32[$53>>2];
  $80 = $79 * $78;
  $81 = $80 + $76;
  $82 = ((($oX$1)) + 8|0);
  HEAPF32[$82>>2] = $81;
  $83 = +HEAPF32[$iX$1>>2];
  $84 = +HEAPF32[$53>>2];
  $85 = $84 * $83;
  $86 = +HEAPF32[$77>>2];
  $87 = +HEAPF32[$74>>2];
  $88 = $87 * $86;
  $89 = $85 - $88;
  $90 = ((($oX$1)) + 12|0);
  HEAPF32[$90>>2] = $89;
  $91 = ((($iX$1)) + -32|0);
  $92 = ((($oX$1)) + 16|0);
  $93 = ($91>>>0)<($in>>>0);
  if ($93) {
   break;
  } else {
   $T$1 = $53;$iX$1 = $91;$oX$1 = $92;
  }
 }
 $init$idx = ((($init)) + 4|0);
 $init$idx$val = HEAP32[$init$idx>>2]|0;
 _mdct_butterflies($init$idx$val,$6,$51,$1);
 $init$idx4$val = HEAP32[$init>>2]|0;
 $init$idx5$val = HEAP32[$5>>2]|0;
 $init$idx6 = ((($init)) + 12|0);
 $init$idx6$val = HEAP32[$init$idx6>>2]|0;
 _mdct_bitreverse($init$idx4$val,$init$idx5$val,$init$idx6$val,$out);
 $94 = HEAP32[$5>>2]|0;
 $95 = (($94) + ($1<<2)|0);
 $T$2 = $95;$iX1$0 = $out;$oX1$0 = $4;$oX2$0 = $4;
 while(1) {
  $96 = ((($oX1$0)) + -16|0);
  $97 = +HEAPF32[$iX1$0>>2];
  $98 = ((($T$2)) + 4|0);
  $99 = +HEAPF32[$98>>2];
  $100 = $99 * $97;
  $101 = ((($iX1$0)) + 4|0);
  $102 = +HEAPF32[$101>>2];
  $103 = +HEAPF32[$T$2>>2];
  $104 = $103 * $102;
  $105 = $100 - $104;
  $106 = ((($oX1$0)) + -4|0);
  HEAPF32[$106>>2] = $105;
  $107 = +HEAPF32[$iX1$0>>2];
  $108 = +HEAPF32[$T$2>>2];
  $109 = $108 * $107;
  $110 = +HEAPF32[$101>>2];
  $111 = +HEAPF32[$98>>2];
  $112 = $111 * $110;
  $113 = $109 + $112;
  $114 = -$113;
  HEAPF32[$oX2$0>>2] = $114;
  $115 = ((($iX1$0)) + 8|0);
  $116 = +HEAPF32[$115>>2];
  $117 = ((($T$2)) + 12|0);
  $118 = +HEAPF32[$117>>2];
  $119 = $118 * $116;
  $120 = ((($iX1$0)) + 12|0);
  $121 = +HEAPF32[$120>>2];
  $122 = ((($T$2)) + 8|0);
  $123 = +HEAPF32[$122>>2];
  $124 = $123 * $121;
  $125 = $119 - $124;
  $126 = ((($oX1$0)) + -8|0);
  HEAPF32[$126>>2] = $125;
  $127 = +HEAPF32[$115>>2];
  $128 = +HEAPF32[$122>>2];
  $129 = $128 * $127;
  $130 = +HEAPF32[$120>>2];
  $131 = +HEAPF32[$117>>2];
  $132 = $131 * $130;
  $133 = $129 + $132;
  $134 = -$133;
  $135 = ((($oX2$0)) + 4|0);
  HEAPF32[$135>>2] = $134;
  $136 = ((($iX1$0)) + 16|0);
  $137 = +HEAPF32[$136>>2];
  $138 = ((($T$2)) + 20|0);
  $139 = +HEAPF32[$138>>2];
  $140 = $139 * $137;
  $141 = ((($iX1$0)) + 20|0);
  $142 = +HEAPF32[$141>>2];
  $143 = ((($T$2)) + 16|0);
  $144 = +HEAPF32[$143>>2];
  $145 = $144 * $142;
  $146 = $140 - $145;
  $147 = ((($oX1$0)) + -12|0);
  HEAPF32[$147>>2] = $146;
  $148 = +HEAPF32[$136>>2];
  $149 = +HEAPF32[$143>>2];
  $150 = $149 * $148;
  $151 = +HEAPF32[$141>>2];
  $152 = +HEAPF32[$138>>2];
  $153 = $152 * $151;
  $154 = $150 + $153;
  $155 = -$154;
  $156 = ((($oX2$0)) + 8|0);
  HEAPF32[$156>>2] = $155;
  $157 = ((($iX1$0)) + 24|0);
  $158 = +HEAPF32[$157>>2];
  $159 = ((($T$2)) + 28|0);
  $160 = +HEAPF32[$159>>2];
  $161 = $160 * $158;
  $162 = ((($iX1$0)) + 28|0);
  $163 = +HEAPF32[$162>>2];
  $164 = ((($T$2)) + 24|0);
  $165 = +HEAPF32[$164>>2];
  $166 = $165 * $163;
  $167 = $161 - $166;
  HEAPF32[$96>>2] = $167;
  $168 = +HEAPF32[$157>>2];
  $169 = +HEAPF32[$164>>2];
  $170 = $169 * $168;
  $171 = +HEAPF32[$162>>2];
  $172 = +HEAPF32[$159>>2];
  $173 = $172 * $171;
  $174 = $170 + $173;
  $175 = -$174;
  $176 = ((($oX2$0)) + 12|0);
  HEAPF32[$176>>2] = $175;
  $177 = ((($oX2$0)) + 16|0);
  $178 = ((($iX1$0)) + 32|0);
  $179 = ((($T$2)) + 32|0);
  $180 = ($178>>>0)<($96>>>0);
  if ($180) {
   $T$2 = $179;$iX1$0 = $178;$oX1$0 = $96;$oX2$0 = $177;
  } else {
   break;
  }
 }
 $181 = (($out) + ($2<<2)|0);
 $iX1$1 = $4;$oX1$1 = $181;$oX2$1 = $181;
 while(1) {
  $182 = ((($oX1$1)) + -16|0);
  $183 = ((($iX1$1)) + -16|0);
  $184 = ((($iX1$1)) + -4|0);
  $185 = +HEAPF32[$184>>2];
  $186 = ((($oX1$1)) + -4|0);
  HEAPF32[$186>>2] = $185;
  $187 = -$185;
  HEAPF32[$oX2$1>>2] = $187;
  $188 = ((($iX1$1)) + -8|0);
  $189 = +HEAPF32[$188>>2];
  $190 = ((($oX1$1)) + -8|0);
  HEAPF32[$190>>2] = $189;
  $191 = -$189;
  $192 = ((($oX2$1)) + 4|0);
  HEAPF32[$192>>2] = $191;
  $193 = ((($iX1$1)) + -12|0);
  $194 = +HEAPF32[$193>>2];
  $195 = ((($oX1$1)) + -12|0);
  HEAPF32[$195>>2] = $194;
  $196 = -$194;
  $197 = ((($oX2$1)) + 8|0);
  HEAPF32[$197>>2] = $196;
  $198 = +HEAPF32[$183>>2];
  HEAPF32[$182>>2] = $198;
  $199 = -$198;
  $200 = ((($oX2$1)) + 12|0);
  HEAPF32[$200>>2] = $199;
  $201 = ((($oX2$1)) + 16|0);
  $202 = ($201>>>0)<($183>>>0);
  if ($202) {
   $iX1$1 = $183;$oX1$1 = $182;$oX2$1 = $201;
  } else {
   $iX1$2 = $4;$oX1$2 = $4;
   break;
  }
 }
 while(1) {
  $203 = ((($oX1$2)) + -16|0);
  $204 = ((($iX1$2)) + 12|0);
  $205 = HEAP32[$204>>2]|0;
  HEAP32[$203>>2] = $205;
  $206 = ((($iX1$2)) + 8|0);
  $207 = HEAP32[$206>>2]|0;
  $208 = ((($oX1$2)) + -12|0);
  HEAP32[$208>>2] = $207;
  $209 = ((($iX1$2)) + 4|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = ((($oX1$2)) + -8|0);
  HEAP32[$211>>2] = $210;
  $212 = HEAP32[$iX1$2>>2]|0;
  $213 = ((($oX1$2)) + -4|0);
  HEAP32[$213>>2] = $212;
  $214 = ((($iX1$2)) + 16|0);
  $215 = ($203>>>0)>($51>>>0);
  if ($215) {
   $iX1$2 = $214;$oX1$2 = $203;
  } else {
   break;
  }
 }
 return;
}
function _mdct_forward($init,$in,$out) {
 $init = $init|0;
 $in = $in|0;
 $out = $out|0;
 var $$alloca_mul = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum51 = 0, $$sum6 = 0, $$sum7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0.0;
 var $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0;
 var $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0;
 var $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0;
 var $99 = 0.0, $T$0$lcssa = 0, $T$035 = 0, $T$1$lcssa = 0, $T$126 = 0, $T$219 = 0, $T$315 = 0, $exitcond = 0, $i$0$lcssa = 0, $i$036 = 0, $i$1$lcssa = 0, $i$127 = 0, $i$220 = 0, $i$316 = 0, $init$idx = 0, $init$idx$val = 0, $init$idx10$val = 0, $init$idx11 = 0, $init$idx11$val = 0, $init$idx9$val = 0;
 var $scevgep = 0, $scevgep48 = 0, $scevgep49 = 0, $scevgep50 = 0, $w$013 = 0, $x0$0$lcssa = 0, $x0$033 = 0, $x0$124 = 0, $x0$217 = 0, $x0$314 = 0, $x1$034 = 0, $x1$1$lcssa = 0, $x1$125 = 0, $x1$218 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$init>>2]|0;
 $1 = $0 >> 1;
 $2 = $0 >> 2;
 $3 = $0 >> 3;
 $4 = $0 << 2;
 $$alloca_mul = $4;
 $5 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
 $6 = (($5) + ($1<<2)|0);
 $$sum = (($1) + ($2))|0;
 $7 = (($in) + ($$sum<<2)|0);
 $8 = ((($init)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($1<<2)|0);
 $11 = ($3|0)>(0);
 if ($11) {
  $$sum1 = (($$sum) + 1)|0;
  $12 = (($in) + ($$sum1<<2)|0);
  $13 = (($3) + -1)|0;
  $14 = $13 >>> 1;
  $15 = $14 << 1;
  $16 = (($1) + -2)|0;
  $17 = (($16) - ($15))|0;
  $18 = (($$sum) + -4)|0;
  $19 = $14 << 2;
  $20 = (($18) - ($19))|0;
  $T$035 = $10;$i$036 = 0;$x0$033 = $7;$x1$034 = $12;
  while(1) {
   $21 = ((($x0$033)) + -16|0);
   $22 = ((($T$035)) + -8|0);
   $23 = ((($x0$033)) + -8|0);
   $24 = +HEAPF32[$23>>2];
   $25 = +HEAPF32[$x1$034>>2];
   $26 = $25 + $24;
   $27 = +HEAPF32[$21>>2];
   $28 = ((($x1$034)) + 8|0);
   $29 = +HEAPF32[$28>>2];
   $30 = $29 + $27;
   $31 = ((($T$035)) + -4|0);
   $32 = +HEAPF32[$31>>2];
   $33 = $30 * $32;
   $34 = +HEAPF32[$22>>2];
   $35 = $34 * $26;
   $36 = $35 + $33;
   $$sum6 = (($i$036) + ($1))|0;
   $37 = (($5) + ($$sum6<<2)|0);
   HEAPF32[$37>>2] = $36;
   $38 = +HEAPF32[$22>>2];
   $39 = $38 * $30;
   $40 = +HEAPF32[$31>>2];
   $41 = $40 * $26;
   $42 = $39 - $41;
   $43 = $i$036 | 1;
   $$sum7 = (($43) + ($1))|0;
   $44 = (($5) + ($$sum7<<2)|0);
   HEAPF32[$44>>2] = $42;
   $45 = ((($x1$034)) + 16|0);
   $46 = (($i$036) + 2)|0;
   $47 = ($46|0)<($3|0);
   if ($47) {
    $T$035 = $22;$i$036 = $46;$x0$033 = $21;$x1$034 = $45;
   } else {
    break;
   }
  }
  $48 = (($15) + 2)|0;
  $scevgep49 = (($9) + ($17<<2)|0);
  $scevgep50 = (($in) + ($20<<2)|0);
  $89 = $17;$T$0$lcssa = $scevgep49;$i$0$lcssa = $48;$x0$0$lcssa = $scevgep50;
 } else {
  $89 = $1;$T$0$lcssa = $10;$i$0$lcssa = 0;$x0$0$lcssa = $7;
 }
 $49 = ((($in)) + 4|0);
 $50 = (($1) - ($3))|0;
 $51 = ($i$0$lcssa|0)<($50|0);
 if ($51) {
  $52 = (($1) + -1)|0;
  $53 = (($52) - ($i$0$lcssa))|0;
  $54 = (($53) - ($3))|0;
  $55 = $54 >>> 1;
  $56 = $55 << 1;
  $57 = (($i$0$lcssa) + ($56))|0;
  $58 = $55 << 2;
  $59 = (($58) + 5)|0;
  $60 = (-2 - ($56))|0;
  $T$126 = $T$0$lcssa;$i$127 = $i$0$lcssa;$x0$124 = $x0$0$lcssa;$x1$125 = $49;
  while(1) {
   $61 = ((($T$126)) + -8|0);
   $62 = ((($x0$124)) + -16|0);
   $63 = ((($x0$124)) + -8|0);
   $64 = +HEAPF32[$63>>2];
   $65 = +HEAPF32[$x1$125>>2];
   $66 = $64 - $65;
   $67 = +HEAPF32[$62>>2];
   $68 = ((($x1$125)) + 8|0);
   $69 = +HEAPF32[$68>>2];
   $70 = $67 - $69;
   $71 = ((($T$126)) + -4|0);
   $72 = +HEAPF32[$71>>2];
   $73 = $70 * $72;
   $74 = +HEAPF32[$61>>2];
   $75 = $74 * $66;
   $76 = $75 + $73;
   $$sum4 = (($i$127) + ($1))|0;
   $77 = (($5) + ($$sum4<<2)|0);
   HEAPF32[$77>>2] = $76;
   $78 = +HEAPF32[$61>>2];
   $79 = $78 * $70;
   $80 = +HEAPF32[$71>>2];
   $81 = $80 * $66;
   $82 = $79 - $81;
   $83 = $i$127 | 1;
   $$sum5 = (($83) + ($1))|0;
   $84 = (($5) + ($$sum5<<2)|0);
   HEAPF32[$84>>2] = $82;
   $85 = ((($x1$125)) + 16|0);
   $86 = (($i$127) + 2)|0;
   $87 = ($86|0)<($50|0);
   if ($87) {
    $T$126 = $61;$i$127 = $86;$x0$124 = $62;$x1$125 = $85;
   } else {
    break;
   }
  }
  $88 = (($57) + 2)|0;
  $scevgep = (($in) + ($59<<2)|0);
  $$sum51 = (($89) + ($60))|0;
  $scevgep48 = (($9) + ($$sum51<<2)|0);
  $T$1$lcssa = $scevgep48;$i$1$lcssa = $88;$x1$1$lcssa = $scevgep;
 } else {
  $T$1$lcssa = $T$0$lcssa;$i$1$lcssa = $i$0$lcssa;$x1$1$lcssa = $49;
 }
 $90 = ($i$1$lcssa|0)<($1|0);
 if ($90) {
  $91 = (($in) + ($0<<2)|0);
  $T$219 = $T$1$lcssa;$i$220 = $i$1$lcssa;$x0$217 = $91;$x1$218 = $x1$1$lcssa;
  while(1) {
   $92 = ((($T$219)) + -8|0);
   $93 = ((($x0$217)) + -16|0);
   $94 = ((($x0$217)) + -8|0);
   $95 = +HEAPF32[$94>>2];
   $96 = -$95;
   $97 = +HEAPF32[$x1$218>>2];
   $98 = $96 - $97;
   $99 = +HEAPF32[$93>>2];
   $100 = -$99;
   $101 = ((($x1$218)) + 8|0);
   $102 = +HEAPF32[$101>>2];
   $103 = $100 - $102;
   $104 = ((($T$219)) + -4|0);
   $105 = +HEAPF32[$104>>2];
   $106 = $103 * $105;
   $107 = +HEAPF32[$92>>2];
   $108 = $107 * $98;
   $109 = $108 + $106;
   $$sum2 = (($i$220) + ($1))|0;
   $110 = (($5) + ($$sum2<<2)|0);
   HEAPF32[$110>>2] = $109;
   $111 = +HEAPF32[$92>>2];
   $112 = $111 * $103;
   $113 = +HEAPF32[$104>>2];
   $114 = $113 * $98;
   $115 = $112 - $114;
   $116 = $i$220 | 1;
   $$sum3 = (($116) + ($1))|0;
   $117 = (($5) + ($$sum3<<2)|0);
   HEAPF32[$117>>2] = $115;
   $118 = ((($x1$218)) + 16|0);
   $119 = (($i$220) + 2)|0;
   $120 = ($119|0)<($1|0);
   if ($120) {
    $T$219 = $92;$i$220 = $119;$x0$217 = $93;$x1$218 = $118;
   } else {
    break;
   }
  }
 }
 $init$idx = ((($init)) + 4|0);
 $init$idx$val = HEAP32[$init$idx>>2]|0;
 _mdct_butterflies($init$idx$val,$9,$6,$1);
 $init$idx9$val = HEAP32[$init>>2]|0;
 $init$idx10$val = HEAP32[$8>>2]|0;
 $init$idx11 = ((($init)) + 12|0);
 $init$idx11$val = HEAP32[$init$idx11>>2]|0;
 _mdct_bitreverse($init$idx9$val,$init$idx10$val,$init$idx11$val,$5);
 $121 = ($2|0)>(0);
 if (!($121)) {
  STACKTOP = sp;return;
 }
 $122 = (($out) + ($1<<2)|0);
 $123 = HEAP32[$8>>2]|0;
 $124 = (($123) + ($1<<2)|0);
 $125 = ((($init)) + 16|0);
 $T$315 = $124;$i$316 = 0;$w$013 = $5;$x0$314 = $122;
 while(1) {
  $126 = ((($x0$314)) + -4|0);
  $127 = +HEAPF32[$w$013>>2];
  $128 = +HEAPF32[$T$315>>2];
  $129 = $128 * $127;
  $130 = ((($w$013)) + 4|0);
  $131 = +HEAPF32[$130>>2];
  $132 = ((($T$315)) + 4|0);
  $133 = +HEAPF32[$132>>2];
  $134 = $133 * $131;
  $135 = $134 + $129;
  $136 = +HEAPF32[$125>>2];
  $137 = $135 * $136;
  $138 = (($out) + ($i$316<<2)|0);
  HEAPF32[$138>>2] = $137;
  $139 = +HEAPF32[$w$013>>2];
  $140 = +HEAPF32[$132>>2];
  $141 = $140 * $139;
  $142 = +HEAPF32[$130>>2];
  $143 = +HEAPF32[$T$315>>2];
  $144 = $143 * $142;
  $145 = $141 - $144;
  $146 = +HEAPF32[$125>>2];
  $147 = $145 * $146;
  HEAPF32[$126>>2] = $147;
  $148 = ((($w$013)) + 8|0);
  $149 = ((($T$315)) + 8|0);
  $150 = (($i$316) + 1)|0;
  $exitcond = ($150|0)==($2|0);
  if ($exitcond) {
   break;
  } else {
   $T$315 = $149;$i$316 = $150;$w$013 = $148;$x0$314 = $126;
  }
 }
 STACKTOP = sp;return;
}
function _mdct_butterflies($init$0$1$val,$init$0$2$val,$x,$points) {
 $init$0$1$val = $init$0$1$val|0;
 $init$0$2$val = $init$0$2$val|0;
 $x = $x|0;
 $points = $points|0;
 var $$0$i = 0, $$0$i5 = 0, $$sum = 0, $$sum$i = 0, $$sum$i1 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i2 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum2$i = 0;
 var $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum3$i = 0, $$sum30 = 0, $$sum31 = 0, $$sum32 = 0, $$sum4 = 0, $$sum45$i = 0, $$sum5 = 0, $$sum6 = 0, $$sum6$i = 0;
 var $$sum7 = 0, $$sum7$i = 0, $$sum8 = 0, $$sum8$i = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0;
 var $13 = 0.0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0;
 var $148 = 0.0, $149 = 0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0;
 var $166 = 0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0.0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0.0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0;
 var $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0, $190 = 0.0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0.0, $200 = 0.0;
 var $201 = 0.0, $202 = 0.0, $203 = 0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0.0, $224 = 0, $225 = 0.0, $226 = 0.0, $227 = 0, $228 = 0.0, $229 = 0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0, $235 = 0.0, $236 = 0, $237 = 0.0;
 var $238 = 0.0, $239 = 0, $24 = 0.0, $240 = 0.0, $241 = 0, $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0.0, $254 = 0, $255 = 0.0;
 var $256 = 0.0, $257 = 0, $258 = 0.0, $259 = 0, $26 = 0.0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0.0, $27 = 0.0, $270 = 0, $271 = 0.0, $272 = 0.0, $273 = 0;
 var $274 = 0.0, $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0.0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0, $287 = 0.0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0;
 var $292 = 0.0, $293 = 0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0, $299 = 0.0, $3 = 0, $30 = 0.0, $300 = 0, $301 = 0.0, $302 = 0.0, $303 = 0, $304 = 0.0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0;
 var $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0, $317 = 0.0, $318 = 0, $319 = 0.0, $32 = 0.0, $320 = 0.0, $321 = 0, $322 = 0.0, $323 = 0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0;
 var $328 = 0.0, $329 = 0.0, $33 = 0.0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0, $334 = 0.0, $335 = 0.0, $336 = 0, $337 = 0.0, $338 = 0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0;
 var $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0.0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0;
 var $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0.0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0.0, $380 = 0.0, $381 = 0.0;
 var $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0.0, $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $4 = 0;
 var $40 = 0.0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0.0, $404 = 0.0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0.0, $41 = 0.0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0;
 var $418 = 0.0, $419 = 0.0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0.0, $430 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0.0, $435 = 0.0;
 var $436 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0.0, $440 = 0.0, $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0.0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0, $450 = 0.0, $451 = 0.0, $452 = 0.0, $453 = 0.0;
 var $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0.0, $458 = 0.0, $459 = 0.0, $46 = 0.0, $460 = 0.0, $461 = 0.0, $462 = 0.0, $463 = 0.0, $464 = 0.0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0.0, $470 = 0.0, $471 = 0.0;
 var $472 = 0.0, $473 = 0.0, $474 = 0.0, $475 = 0.0, $476 = 0.0, $477 = 0.0, $478 = 0.0, $479 = 0.0, $48 = 0.0, $480 = 0.0, $481 = 0, $482 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0;
 var $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0;
 var $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0.0;
 var $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $exitcond = 0, $i$038 = 0, $j$035 = 0, $j$134 = 0, $x1$0$i = 0, $x1$0$i4 = 0, $x2$0$i = 0, $x2$0$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($init$0$1$val) + -6)|0;
 $1 = ($init$0$1$val|0)>(6);
 if ($1) {
  $$sum$i = (($points) + -8)|0;
  $2 = (($x) + ($$sum$i<<2)|0);
  $3 = $points >> 1;
  $$sum1$i = (($3) + -8)|0;
  $4 = (($x) + ($$sum1$i<<2)|0);
  $$0$i = $init$0$2$val;$x1$0$i = $2;$x2$0$i = $4;
  while(1) {
   $5 = ((($x1$0$i)) + 24|0);
   $6 = +HEAPF32[$5>>2];
   $7 = ((($x2$0$i)) + 24|0);
   $8 = +HEAPF32[$7>>2];
   $9 = $6 - $8;
   $10 = ((($x1$0$i)) + 28|0);
   $11 = +HEAPF32[$10>>2];
   $12 = ((($x2$0$i)) + 28|0);
   $13 = +HEAPF32[$12>>2];
   $14 = $11 - $13;
   $15 = $8 + $6;
   HEAPF32[$5>>2] = $15;
   $16 = +HEAPF32[$12>>2];
   $17 = $16 + $11;
   HEAPF32[$10>>2] = $17;
   $18 = ((($$0$i)) + 4|0);
   $19 = +HEAPF32[$18>>2];
   $20 = $19 * $14;
   $21 = +HEAPF32[$$0$i>>2];
   $22 = $21 * $9;
   $23 = $22 + $20;
   HEAPF32[$7>>2] = $23;
   $24 = +HEAPF32[$$0$i>>2];
   $25 = $24 * $14;
   $26 = +HEAPF32[$18>>2];
   $27 = $26 * $9;
   $28 = $25 - $27;
   HEAPF32[$12>>2] = $28;
   $29 = ((($x1$0$i)) + 16|0);
   $30 = +HEAPF32[$29>>2];
   $31 = ((($x2$0$i)) + 16|0);
   $32 = +HEAPF32[$31>>2];
   $33 = $30 - $32;
   $34 = ((($x1$0$i)) + 20|0);
   $35 = +HEAPF32[$34>>2];
   $36 = ((($x2$0$i)) + 20|0);
   $37 = +HEAPF32[$36>>2];
   $38 = $35 - $37;
   $39 = $32 + $30;
   HEAPF32[$29>>2] = $39;
   $40 = +HEAPF32[$36>>2];
   $41 = $40 + $35;
   HEAPF32[$34>>2] = $41;
   $42 = ((($$0$i)) + 20|0);
   $43 = +HEAPF32[$42>>2];
   $44 = $43 * $38;
   $45 = ((($$0$i)) + 16|0);
   $46 = +HEAPF32[$45>>2];
   $47 = $46 * $33;
   $48 = $47 + $44;
   HEAPF32[$31>>2] = $48;
   $49 = +HEAPF32[$45>>2];
   $50 = $49 * $38;
   $51 = +HEAPF32[$42>>2];
   $52 = $51 * $33;
   $53 = $50 - $52;
   HEAPF32[$36>>2] = $53;
   $54 = ((($x1$0$i)) + 8|0);
   $55 = +HEAPF32[$54>>2];
   $56 = ((($x2$0$i)) + 8|0);
   $57 = +HEAPF32[$56>>2];
   $58 = $55 - $57;
   $59 = ((($x1$0$i)) + 12|0);
   $60 = +HEAPF32[$59>>2];
   $61 = ((($x2$0$i)) + 12|0);
   $62 = +HEAPF32[$61>>2];
   $63 = $60 - $62;
   $64 = $57 + $55;
   HEAPF32[$54>>2] = $64;
   $65 = +HEAPF32[$61>>2];
   $66 = $65 + $60;
   HEAPF32[$59>>2] = $66;
   $67 = ((($$0$i)) + 36|0);
   $68 = +HEAPF32[$67>>2];
   $69 = $68 * $63;
   $70 = ((($$0$i)) + 32|0);
   $71 = +HEAPF32[$70>>2];
   $72 = $71 * $58;
   $73 = $72 + $69;
   HEAPF32[$56>>2] = $73;
   $74 = +HEAPF32[$70>>2];
   $75 = $74 * $63;
   $76 = +HEAPF32[$67>>2];
   $77 = $76 * $58;
   $78 = $75 - $77;
   HEAPF32[$61>>2] = $78;
   $79 = +HEAPF32[$x1$0$i>>2];
   $80 = +HEAPF32[$x2$0$i>>2];
   $81 = $79 - $80;
   $82 = ((($x1$0$i)) + 4|0);
   $83 = +HEAPF32[$82>>2];
   $84 = ((($x2$0$i)) + 4|0);
   $85 = +HEAPF32[$84>>2];
   $86 = $83 - $85;
   $87 = $80 + $79;
   HEAPF32[$x1$0$i>>2] = $87;
   $88 = +HEAPF32[$84>>2];
   $89 = $88 + $83;
   HEAPF32[$82>>2] = $89;
   $90 = ((($$0$i)) + 52|0);
   $91 = +HEAPF32[$90>>2];
   $92 = $91 * $86;
   $93 = ((($$0$i)) + 48|0);
   $94 = +HEAPF32[$93>>2];
   $95 = $94 * $81;
   $96 = $95 + $92;
   HEAPF32[$x2$0$i>>2] = $96;
   $97 = +HEAPF32[$93>>2];
   $98 = $97 * $86;
   $99 = +HEAPF32[$90>>2];
   $100 = $99 * $81;
   $101 = $98 - $100;
   HEAPF32[$84>>2] = $101;
   $102 = ((($x1$0$i)) + -32|0);
   $103 = ((($x2$0$i)) + -32|0);
   $104 = ((($$0$i)) + 64|0);
   $105 = ($103>>>0)<($x>>>0);
   if ($105) {
    break;
   } else {
    $$0$i = $104;$x1$0$i = $102;$x2$0$i = $103;
   }
  }
 }
 $106 = ($0|0)>(1);
 if ($106) {
  $i$038 = 1;
  while(1) {
   $107 = 1 << $i$038;
   $108 = ($i$038|0)==(31);
   if (!($108)) {
    $109 = $points >> $i$038;
    $110 = 4 << $i$038;
    $$sum$i1 = (($109) + -8)|0;
    $111 = $109 >> 1;
    $$sum1$i2 = (($111) + -8)|0;
    $$sum2$i = (($110) + 1)|0;
    $$sum3$i = $110 << 1;
    $$sum45$i = $$sum3$i | 1;
    $$sum6$i = ($110*3)|0;
    $$sum7$i = (($$sum6$i) + 1)|0;
    $$sum8$i = $110 << 2;
    $j$035 = 0;
    while(1) {
     $113 = Math_imul($j$035, $109)|0;
     $114 = (($x) + ($113<<2)|0);
     $$sum = (($$sum$i1) + ($113))|0;
     $115 = (($x) + ($$sum<<2)|0);
     $$sum32 = (($$sum1$i2) + ($113))|0;
     $116 = (($x) + ($$sum32<<2)|0);
     $$0$i5 = $init$0$2$val;$x1$0$i4 = $115;$x2$0$i3 = $116;
     while(1) {
      $117 = ((($x1$0$i4)) + 24|0);
      $118 = +HEAPF32[$117>>2];
      $119 = ((($x2$0$i3)) + 24|0);
      $120 = +HEAPF32[$119>>2];
      $121 = $118 - $120;
      $122 = ((($x1$0$i4)) + 28|0);
      $123 = +HEAPF32[$122>>2];
      $124 = ((($x2$0$i3)) + 28|0);
      $125 = +HEAPF32[$124>>2];
      $126 = $123 - $125;
      $127 = $120 + $118;
      HEAPF32[$117>>2] = $127;
      $128 = +HEAPF32[$124>>2];
      $129 = $128 + $123;
      HEAPF32[$122>>2] = $129;
      $130 = ((($$0$i5)) + 4|0);
      $131 = +HEAPF32[$130>>2];
      $132 = $131 * $126;
      $133 = +HEAPF32[$$0$i5>>2];
      $134 = $133 * $121;
      $135 = $134 + $132;
      HEAPF32[$119>>2] = $135;
      $136 = +HEAPF32[$$0$i5>>2];
      $137 = $136 * $126;
      $138 = +HEAPF32[$130>>2];
      $139 = $138 * $121;
      $140 = $137 - $139;
      HEAPF32[$124>>2] = $140;
      $141 = (($$0$i5) + ($110<<2)|0);
      $142 = ((($x1$0$i4)) + 16|0);
      $143 = +HEAPF32[$142>>2];
      $144 = ((($x2$0$i3)) + 16|0);
      $145 = +HEAPF32[$144>>2];
      $146 = $143 - $145;
      $147 = ((($x1$0$i4)) + 20|0);
      $148 = +HEAPF32[$147>>2];
      $149 = ((($x2$0$i3)) + 20|0);
      $150 = +HEAPF32[$149>>2];
      $151 = $148 - $150;
      $152 = $145 + $143;
      HEAPF32[$142>>2] = $152;
      $153 = +HEAPF32[$149>>2];
      $154 = $153 + $148;
      HEAPF32[$147>>2] = $154;
      $155 = (($$0$i5) + ($$sum2$i<<2)|0);
      $156 = +HEAPF32[$155>>2];
      $157 = $156 * $151;
      $158 = +HEAPF32[$141>>2];
      $159 = $158 * $146;
      $160 = $159 + $157;
      HEAPF32[$144>>2] = $160;
      $161 = +HEAPF32[$141>>2];
      $162 = $161 * $151;
      $163 = +HEAPF32[$155>>2];
      $164 = $163 * $146;
      $165 = $162 - $164;
      HEAPF32[$149>>2] = $165;
      $166 = (($$0$i5) + ($$sum3$i<<2)|0);
      $167 = ((($x1$0$i4)) + 8|0);
      $168 = +HEAPF32[$167>>2];
      $169 = ((($x2$0$i3)) + 8|0);
      $170 = +HEAPF32[$169>>2];
      $171 = $168 - $170;
      $172 = ((($x1$0$i4)) + 12|0);
      $173 = +HEAPF32[$172>>2];
      $174 = ((($x2$0$i3)) + 12|0);
      $175 = +HEAPF32[$174>>2];
      $176 = $173 - $175;
      $177 = $170 + $168;
      HEAPF32[$167>>2] = $177;
      $178 = +HEAPF32[$174>>2];
      $179 = $178 + $173;
      HEAPF32[$172>>2] = $179;
      $180 = (($$0$i5) + ($$sum45$i<<2)|0);
      $181 = +HEAPF32[$180>>2];
      $182 = $181 * $176;
      $183 = +HEAPF32[$166>>2];
      $184 = $183 * $171;
      $185 = $184 + $182;
      HEAPF32[$169>>2] = $185;
      $186 = +HEAPF32[$166>>2];
      $187 = $186 * $176;
      $188 = +HEAPF32[$180>>2];
      $189 = $188 * $171;
      $190 = $187 - $189;
      HEAPF32[$174>>2] = $190;
      $191 = (($$0$i5) + ($$sum6$i<<2)|0);
      $192 = +HEAPF32[$x1$0$i4>>2];
      $193 = +HEAPF32[$x2$0$i3>>2];
      $194 = $192 - $193;
      $195 = ((($x1$0$i4)) + 4|0);
      $196 = +HEAPF32[$195>>2];
      $197 = ((($x2$0$i3)) + 4|0);
      $198 = +HEAPF32[$197>>2];
      $199 = $196 - $198;
      $200 = $193 + $192;
      HEAPF32[$x1$0$i4>>2] = $200;
      $201 = +HEAPF32[$197>>2];
      $202 = $201 + $196;
      HEAPF32[$195>>2] = $202;
      $203 = (($$0$i5) + ($$sum7$i<<2)|0);
      $204 = +HEAPF32[$203>>2];
      $205 = $204 * $199;
      $206 = +HEAPF32[$191>>2];
      $207 = $206 * $194;
      $208 = $207 + $205;
      HEAPF32[$x2$0$i3>>2] = $208;
      $209 = +HEAPF32[$191>>2];
      $210 = $209 * $199;
      $211 = +HEAPF32[$203>>2];
      $212 = $211 * $194;
      $213 = $210 - $212;
      HEAPF32[$197>>2] = $213;
      $214 = (($$0$i5) + ($$sum8$i<<2)|0);
      $215 = ((($x1$0$i4)) + -32|0);
      $216 = ((($x2$0$i3)) + -32|0);
      $217 = ($216>>>0)<($114>>>0);
      if ($217) {
       break;
      } else {
       $$0$i5 = $214;$x1$0$i4 = $215;$x2$0$i3 = $216;
      }
     }
     $218 = (($j$035) + 1)|0;
     $219 = ($218|0)<($107|0);
     if ($219) {
      $j$035 = $218;
     } else {
      break;
     }
    }
   }
   $220 = (($i$038) + 1)|0;
   $exitcond = ($220|0)==($0|0);
   if ($exitcond) {
    break;
   } else {
    $i$038 = $220;
   }
  }
 }
 $112 = ($points|0)>(0);
 if ($112) {
  $j$134 = 0;
 } else {
  return;
 }
 while(1) {
  $221 = (($x) + ($j$134<<2)|0);
  $$sum1 = $j$134 | 30;
  $222 = (($x) + ($$sum1<<2)|0);
  $223 = +HEAPF32[$222>>2];
  $$sum2 = $j$134 | 14;
  $224 = (($x) + ($$sum2<<2)|0);
  $225 = +HEAPF32[$224>>2];
  $226 = $223 - $225;
  $$sum3 = $j$134 | 31;
  $227 = (($x) + ($$sum3<<2)|0);
  $228 = +HEAPF32[$227>>2];
  $$sum4 = $j$134 | 15;
  $229 = (($x) + ($$sum4<<2)|0);
  $230 = +HEAPF32[$229>>2];
  $231 = $228 - $230;
  $232 = $225 + $223;
  HEAPF32[$222>>2] = $232;
  $233 = $230 + $228;
  HEAPF32[$227>>2] = $233;
  HEAPF32[$224>>2] = $226;
  HEAPF32[$229>>2] = $231;
  $$sum5 = $j$134 | 28;
  $234 = (($x) + ($$sum5<<2)|0);
  $235 = +HEAPF32[$234>>2];
  $$sum6 = $j$134 | 12;
  $236 = (($x) + ($$sum6<<2)|0);
  $237 = +HEAPF32[$236>>2];
  $238 = $235 - $237;
  $$sum7 = $j$134 | 29;
  $239 = (($x) + ($$sum7<<2)|0);
  $240 = +HEAPF32[$239>>2];
  $$sum8 = $j$134 | 13;
  $241 = (($x) + ($$sum8<<2)|0);
  $242 = +HEAPF32[$241>>2];
  $243 = $240 - $242;
  $244 = $237 + $235;
  HEAPF32[$234>>2] = $244;
  $245 = $242 + $240;
  HEAPF32[$239>>2] = $245;
  $246 = $238 * 0.92387950420379638;
  $247 = $243 * 0.38268342614173889;
  $248 = $246 - $247;
  HEAPF32[$236>>2] = $248;
  $249 = $238 * 0.38268342614173889;
  $250 = $243 * 0.92387950420379638;
  $251 = $250 + $249;
  HEAPF32[$241>>2] = $251;
  $$sum9 = $j$134 | 26;
  $252 = (($x) + ($$sum9<<2)|0);
  $253 = +HEAPF32[$252>>2];
  $$sum10 = $j$134 | 10;
  $254 = (($x) + ($$sum10<<2)|0);
  $255 = +HEAPF32[$254>>2];
  $256 = $253 - $255;
  $$sum11 = $j$134 | 27;
  $257 = (($x) + ($$sum11<<2)|0);
  $258 = +HEAPF32[$257>>2];
  $$sum12 = $j$134 | 11;
  $259 = (($x) + ($$sum12<<2)|0);
  $260 = +HEAPF32[$259>>2];
  $261 = $258 - $260;
  $262 = $255 + $253;
  HEAPF32[$252>>2] = $262;
  $263 = $260 + $258;
  HEAPF32[$257>>2] = $263;
  $264 = $256 - $261;
  $265 = $264 * 0.70710676908493042;
  HEAPF32[$254>>2] = $265;
  $266 = $261 + $256;
  $267 = $266 * 0.70710676908493042;
  HEAPF32[$259>>2] = $267;
  $$sum13 = $j$134 | 24;
  $268 = (($x) + ($$sum13<<2)|0);
  $269 = +HEAPF32[$268>>2];
  $$sum14 = $j$134 | 8;
  $270 = (($x) + ($$sum14<<2)|0);
  $271 = +HEAPF32[$270>>2];
  $272 = $269 - $271;
  $$sum15 = $j$134 | 25;
  $273 = (($x) + ($$sum15<<2)|0);
  $274 = +HEAPF32[$273>>2];
  $$sum16 = $j$134 | 9;
  $275 = (($x) + ($$sum16<<2)|0);
  $276 = +HEAPF32[$275>>2];
  $277 = $274 - $276;
  $278 = $271 + $269;
  HEAPF32[$268>>2] = $278;
  $279 = $276 + $274;
  HEAPF32[$273>>2] = $279;
  $280 = $272 * 0.38268342614173889;
  $281 = $277 * 0.92387950420379638;
  $282 = $280 - $281;
  $283 = $277 * 0.38268342614173889;
  $284 = $272 * 0.92387950420379638;
  $285 = $283 + $284;
  $$sum17 = $j$134 | 22;
  $286 = (($x) + ($$sum17<<2)|0);
  $287 = +HEAPF32[$286>>2];
  $$sum18 = $j$134 | 6;
  $288 = (($x) + ($$sum18<<2)|0);
  $289 = +HEAPF32[$288>>2];
  $290 = $287 - $289;
  $$sum19 = $j$134 | 7;
  $291 = (($x) + ($$sum19<<2)|0);
  $292 = +HEAPF32[$291>>2];
  $$sum20 = $j$134 | 23;
  $293 = (($x) + ($$sum20<<2)|0);
  $294 = +HEAPF32[$293>>2];
  $295 = $292 - $294;
  $296 = $289 + $287;
  HEAPF32[$286>>2] = $296;
  $297 = $294 + $292;
  HEAPF32[$293>>2] = $297;
  HEAPF32[$288>>2] = $295;
  HEAPF32[$291>>2] = $290;
  $$sum21 = $j$134 | 4;
  $298 = (($x) + ($$sum21<<2)|0);
  $299 = +HEAPF32[$298>>2];
  $$sum22 = $j$134 | 20;
  $300 = (($x) + ($$sum22<<2)|0);
  $301 = +HEAPF32[$300>>2];
  $302 = $299 - $301;
  $$sum23 = $j$134 | 5;
  $303 = (($x) + ($$sum23<<2)|0);
  $304 = +HEAPF32[$303>>2];
  $$sum24 = $j$134 | 21;
  $305 = (($x) + ($$sum24<<2)|0);
  $306 = +HEAPF32[$305>>2];
  $307 = $304 - $306;
  $308 = $301 + $299;
  HEAPF32[$300>>2] = $308;
  $309 = $306 + $304;
  HEAPF32[$305>>2] = $309;
  $310 = $307 * 0.92387950420379638;
  $311 = $302 * 0.38268342614173889;
  $312 = $310 + $311;
  $313 = $307 * 0.38268342614173889;
  $314 = $302 * 0.92387950420379638;
  $315 = $313 - $314;
  $$sum25 = $j$134 | 2;
  $316 = (($x) + ($$sum25<<2)|0);
  $317 = +HEAPF32[$316>>2];
  $$sum26 = $j$134 | 18;
  $318 = (($x) + ($$sum26<<2)|0);
  $319 = +HEAPF32[$318>>2];
  $320 = $317 - $319;
  $$sum27 = $j$134 | 3;
  $321 = (($x) + ($$sum27<<2)|0);
  $322 = +HEAPF32[$321>>2];
  $$sum28 = $j$134 | 19;
  $323 = (($x) + ($$sum28<<2)|0);
  $324 = +HEAPF32[$323>>2];
  $325 = $322 - $324;
  $326 = $319 + $317;
  HEAPF32[$318>>2] = $326;
  $327 = $324 + $322;
  HEAPF32[$323>>2] = $327;
  $328 = $325 + $320;
  $329 = $328 * 0.70710676908493042;
  $330 = $325 - $320;
  $331 = $330 * 0.70710676908493042;
  $332 = +HEAPF32[$221>>2];
  $$sum29 = $j$134 | 16;
  $333 = (($x) + ($$sum29<<2)|0);
  $334 = +HEAPF32[$333>>2];
  $335 = $332 - $334;
  $$sum30 = $j$134 | 1;
  $336 = (($x) + ($$sum30<<2)|0);
  $337 = +HEAPF32[$336>>2];
  $$sum31 = $j$134 | 17;
  $338 = (($x) + ($$sum31<<2)|0);
  $339 = +HEAPF32[$338>>2];
  $340 = $337 - $339;
  $341 = $334 + $332;
  HEAPF32[$333>>2] = $341;
  $342 = $339 + $337;
  HEAPF32[$338>>2] = $342;
  $343 = $340 * 0.38268342614173889;
  $344 = $335 * 0.92387950420379638;
  $345 = $343 + $344;
  $346 = $340 * 0.92387950420379638;
  $347 = $335 * 0.38268342614173889;
  $348 = $346 - $347;
  $349 = $348 - $285;
  $350 = $345 - $282;
  $351 = $345 + $282;
  $352 = $348 + $285;
  $353 = $350 + $349;
  $354 = $349 - $350;
  $355 = +HEAPF32[$259>>2];
  $356 = $331 - $355;
  $357 = +HEAPF32[$254>>2];
  $358 = $357 - $329;
  $359 = $357 + $329;
  $360 = $355 + $331;
  $361 = +HEAPF32[$236>>2];
  $362 = $361 - $312;
  $363 = +HEAPF32[$241>>2];
  $364 = $363 - $315;
  $365 = $361 + $312;
  $366 = $363 + $315;
  $367 = $362 - $364;
  $368 = $364 + $362;
  $369 = +HEAPF32[$224>>2];
  $370 = $369 - $295;
  $371 = +HEAPF32[$229>>2];
  $372 = $371 - $290;
  $373 = $295 + $369;
  $374 = $290 + $371;
  $375 = $370 + $356;
  $376 = $370 - $356;
  $377 = $367 + $353;
  $378 = $377 * 0.70710676908493042;
  $379 = $367 - $353;
  $380 = $379 * 0.70710676908493042;
  $381 = $378 + $375;
  HEAPF32[$288>>2] = $381;
  $382 = $375 - $378;
  HEAPF32[$298>>2] = $382;
  $383 = $368 - $354;
  $384 = $383 * 0.70710676908493042;
  $385 = $372 - $358;
  $386 = $384 + $376;
  HEAPF32[$221>>2] = $386;
  $387 = $376 - $384;
  HEAPF32[$316>>2] = $387;
  $388 = $368 + $354;
  $389 = $388 * 0.70710676908493042;
  $390 = $372 + $358;
  $391 = $385 + $380;
  HEAPF32[$321>>2] = $391;
  $392 = $385 - $380;
  HEAPF32[$336>>2] = $392;
  $393 = $390 + $389;
  HEAPF32[$291>>2] = $393;
  $394 = $390 - $389;
  HEAPF32[$303>>2] = $394;
  $395 = $373 + $359;
  $396 = $373 - $359;
  $397 = $351 + $365;
  $398 = $365 - $351;
  $399 = $395 + $397;
  HEAPF32[$224>>2] = $399;
  $400 = $395 - $397;
  HEAPF32[$236>>2] = $400;
  $401 = $366 - $352;
  $402 = $374 - $360;
  $403 = $396 + $401;
  HEAPF32[$270>>2] = $403;
  $404 = $396 - $401;
  HEAPF32[$254>>2] = $404;
  $405 = $366 + $352;
  $406 = $374 + $360;
  $407 = $402 + $398;
  HEAPF32[$259>>2] = $407;
  $408 = $402 - $398;
  HEAPF32[$275>>2] = $408;
  $409 = $406 + $405;
  HEAPF32[$229>>2] = $409;
  $410 = $406 - $405;
  HEAPF32[$241>>2] = $410;
  $411 = +HEAPF32[$273>>2];
  $412 = $342 - $411;
  $413 = +HEAPF32[$268>>2];
  $414 = $341 - $413;
  $415 = $413 + $341;
  $416 = $411 + $342;
  $417 = $414 + $412;
  $418 = $412 - $414;
  $419 = +HEAPF32[$323>>2];
  $420 = +HEAPF32[$257>>2];
  $421 = $419 - $420;
  $422 = +HEAPF32[$252>>2];
  $423 = +HEAPF32[$318>>2];
  $424 = $422 - $423;
  $425 = $423 + $422;
  $426 = $420 + $419;
  $427 = +HEAPF32[$234>>2];
  $428 = +HEAPF32[$300>>2];
  $429 = $427 - $428;
  $430 = +HEAPF32[$239>>2];
  $431 = +HEAPF32[$305>>2];
  $432 = $430 - $431;
  $433 = $428 + $427;
  $434 = $431 + $430;
  $435 = $429 - $432;
  $436 = $432 + $429;
  $437 = +HEAPF32[$222>>2];
  $438 = +HEAPF32[$286>>2];
  $439 = $437 - $438;
  $440 = +HEAPF32[$227>>2];
  $441 = +HEAPF32[$293>>2];
  $442 = $440 - $441;
  $443 = $438 + $437;
  $444 = $441 + $440;
  $445 = $439 + $421;
  $446 = $439 - $421;
  $447 = $435 + $417;
  $448 = $447 * 0.70710676908493042;
  $449 = $435 - $417;
  $450 = $449 * 0.70710676908493042;
  $451 = $448 + $445;
  HEAPF32[$286>>2] = $451;
  $452 = $445 - $448;
  HEAPF32[$300>>2] = $452;
  $453 = $436 - $418;
  $454 = $453 * 0.70710676908493042;
  $455 = $442 - $424;
  $456 = $454 + $446;
  HEAPF32[$333>>2] = $456;
  $457 = $446 - $454;
  HEAPF32[$318>>2] = $457;
  $458 = $436 + $418;
  $459 = $458 * 0.70710676908493042;
  $460 = $442 + $424;
  $461 = $455 + $450;
  HEAPF32[$323>>2] = $461;
  $462 = $455 - $450;
  HEAPF32[$338>>2] = $462;
  $463 = $460 + $459;
  HEAPF32[$293>>2] = $463;
  $464 = $460 - $459;
  HEAPF32[$305>>2] = $464;
  $465 = $443 + $425;
  $466 = $443 - $425;
  $467 = $433 + $415;
  $468 = $433 - $415;
  $469 = $465 + $467;
  HEAPF32[$222>>2] = $469;
  $470 = $465 - $467;
  HEAPF32[$234>>2] = $470;
  $471 = $434 - $416;
  $472 = $444 - $426;
  $473 = $466 + $471;
  HEAPF32[$268>>2] = $473;
  $474 = $466 - $471;
  HEAPF32[$252>>2] = $474;
  $475 = $434 + $416;
  $476 = $444 + $426;
  $477 = $472 + $468;
  HEAPF32[$257>>2] = $477;
  $478 = $472 - $468;
  HEAPF32[$273>>2] = $478;
  $479 = $476 + $475;
  HEAPF32[$227>>2] = $479;
  $480 = $476 - $475;
  HEAPF32[$239>>2] = $480;
  $481 = (($j$134) + 32)|0;
  $482 = ($481|0)<($points|0);
  if ($482) {
   $j$134 = $481;
  } else {
   break;
  }
 }
 return;
}
function _mdct_bitreverse($init$0$0$val,$init$0$2$val,$init$0$3$val,$x) {
 $init$0$0$val = $init$0$0$val|0;
 $init$0$2$val = $init$0$2$val|0;
 $init$0$3$val = $init$0$3$val|0;
 $x = $x|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0;
 var $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0;
 var $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $8 = 0, $9 = 0.0, $T$0 = 0, $bit$0 = 0, $w0$0 = 0, $w1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $init$0$0$val >> 1;
 $1 = (($x) + ($0<<2)|0);
 $2 = (($init$0$2$val) + ($init$0$0$val<<2)|0);
 $T$0 = $2;$bit$0 = $init$0$3$val;$w0$0 = $x;$w1$0 = $1;
 while(1) {
  $3 = HEAP32[$bit$0>>2]|0;
  $$sum = (($3) + ($0))|0;
  $4 = (($x) + ($$sum<<2)|0);
  $5 = ((($bit$0)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $$sum1 = (($6) + ($0))|0;
  $7 = (($x) + ($$sum1<<2)|0);
  $$sum2 = (($$sum) + 1)|0;
  $8 = (($x) + ($$sum2<<2)|0);
  $9 = +HEAPF32[$8>>2];
  $$sum3 = (($$sum1) + 1)|0;
  $10 = (($x) + ($$sum3<<2)|0);
  $11 = +HEAPF32[$10>>2];
  $12 = $9 - $11;
  $13 = +HEAPF32[$4>>2];
  $14 = +HEAPF32[$7>>2];
  $15 = $14 + $13;
  $16 = +HEAPF32[$T$0>>2];
  $17 = $15 * $16;
  $18 = ((($T$0)) + 4|0);
  $19 = +HEAPF32[$18>>2];
  $20 = $19 * $12;
  $21 = $20 + $17;
  $22 = $19 * $15;
  $23 = $16 * $12;
  $24 = $22 - $23;
  $25 = ((($w1$0)) + -16|0);
  $26 = $11 + $9;
  $27 = $26 * 0.5;
  $28 = $13 - $14;
  $29 = $28 * 0.5;
  $30 = $21 + $27;
  HEAPF32[$w0$0>>2] = $30;
  $31 = $27 - $21;
  $32 = ((($w1$0)) + -8|0);
  HEAPF32[$32>>2] = $31;
  $33 = $24 + $29;
  $34 = ((($w0$0)) + 4|0);
  HEAPF32[$34>>2] = $33;
  $35 = $24 - $29;
  $36 = ((($w1$0)) + -4|0);
  HEAPF32[$36>>2] = $35;
  $37 = ((($bit$0)) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $$sum4 = (($38) + ($0))|0;
  $39 = (($x) + ($$sum4<<2)|0);
  $40 = ((($bit$0)) + 12|0);
  $41 = HEAP32[$40>>2]|0;
  $$sum5 = (($41) + ($0))|0;
  $42 = (($x) + ($$sum5<<2)|0);
  $$sum6 = (($$sum4) + 1)|0;
  $43 = (($x) + ($$sum6<<2)|0);
  $44 = +HEAPF32[$43>>2];
  $$sum7 = (($$sum5) + 1)|0;
  $45 = (($x) + ($$sum7<<2)|0);
  $46 = +HEAPF32[$45>>2];
  $47 = $44 - $46;
  $48 = +HEAPF32[$39>>2];
  $49 = +HEAPF32[$42>>2];
  $50 = $49 + $48;
  $51 = ((($T$0)) + 8|0);
  $52 = +HEAPF32[$51>>2];
  $53 = $50 * $52;
  $54 = ((($T$0)) + 12|0);
  $55 = +HEAPF32[$54>>2];
  $56 = $55 * $47;
  $57 = $56 + $53;
  $58 = $55 * $50;
  $59 = $52 * $47;
  $60 = $58 - $59;
  $61 = $46 + $44;
  $62 = $61 * 0.5;
  $63 = $48 - $49;
  $64 = $63 * 0.5;
  $65 = $57 + $62;
  $66 = ((($w0$0)) + 8|0);
  HEAPF32[$66>>2] = $65;
  $67 = $62 - $57;
  HEAPF32[$25>>2] = $67;
  $68 = $60 + $64;
  $69 = ((($w0$0)) + 12|0);
  HEAPF32[$69>>2] = $68;
  $70 = $60 - $64;
  $71 = ((($w1$0)) + -12|0);
  HEAPF32[$71>>2] = $70;
  $72 = ((($T$0)) + 16|0);
  $73 = ((($bit$0)) + 16|0);
  $74 = ((($w0$0)) + 16|0);
  $75 = ($74>>>0)<($25>>>0);
  if ($75) {
   $T$0 = $72;$bit$0 = $73;$w0$0 = $74;$w1$0 = $25;
  } else {
   break;
  }
 }
 return;
}
function __vp_global_look($vi) {
 $vi = $vi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vi)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 2868|0);
 $3 = (_calloc(1,36)|0);
 $4 = ((($vi)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 4|0);
 HEAP32[$6>>2] = $5;
 HEAPF32[$3>>2] = -9999.0;
 $7 = ((($3)) + 8|0);
 HEAP32[$7>>2] = $2;
 return ($3|0);
}
function __vp_global_free($look) {
 $look = $look|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($look|0)==(0|0);
 if ($0) {
  return;
 }
 _free($look);
 return;
}
function __vi_psy_free($i) {
 $i = $i|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($i|0)==(0|0);
 if (!($0)) {
  _free($i);
 }
 return;
}
function __vp_psy_init($p,$vi,$gi,$n,$rate) {
 $p = $p|0;
 $vi = $vi|0;
 $gi = $gi|0;
 $n = $n|0;
 $rate = $rate|0;
 var $$inv = 0, $$lcssa = 0, $$lcssa85 = 0, $$not = 0, $$not75 = 0, $$phi$trans$insert = 0, $$phi$trans$insert52 = 0, $$pre = 0, $$pre$phiZ2D = 0.0, $$pre51 = 0, $$pre53 = 0, $$pre54 = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0;
 var $123 = 0.0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0;
 var $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0;
 var $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0.0;
 var $196 = 0, $197 = 0.0, $198 = 0, $199 = 0.0, $2 = 0.0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0;
 var $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0, $225 = 0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0.0, $230 = 0.0;
 var $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0.0, $249 = 0.0;
 var $25 = 0.0, $250 = 0.0, $251 = 0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0;
 var $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0;
 var $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $base$032 = 0.0, $brmerge = 0, $exitcond = 0, $exitcond46 = 0, $exitcond47 = 0, $exitcond48 = 0, $exitcond50 = 0, $halfoc$0 = 0.0, $halfoc$1 = 0.0;
 var $hi$024 = 0, $hi$1$lcssa = 0, $hi$120 = 0, $i$0$ph$ph74 = 0, $i$070 = 0, $i$070$lcssa = 0, $i$126 = 0, $i$212 = 0, $i$410 = 0, $j$0$ph$ph$lcssa = 0, $j$0$ph$ph73 = 0, $j$133 = 0, $j$328 = 0, $lo$025 = 0, $lo$1$lcssa = 0, $lo$115 = 0, $umax = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 dest=$p; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = HEAP32[$gi>>2]|0;
 $1 = ((($p)) + 36|0);
 HEAP32[$1>>2] = $0;
 $2 = (+($0|0));
 $3 = $2 * 8.0;
 $4 = $3;
 $5 = (+Math_log((+$4)));
 $6 = $5 * 1.4426950408889634;
 $7 = (+_rint($6));
 $8 = $7 + -1.0;
 $9 = (~~(($8)));
 $10 = ((($p)) + 32|0);
 HEAP32[$10>>2] = $9;
 $11 = (+($rate|0));
 $12 = $11 * 0.25;
 $13 = $12;
 $14 = $13 * 0.5;
 $15 = (+($n|0));
 $16 = $14 / $15;
 $17 = (+Math_log((+$16)));
 $18 = $17 * 1.4426950216293335;
 $19 = $18 + -5.9657840728759766;
 $20 = (($9) + 1)|0;
 $21 = 1 << $20;
 $22 = (+($21|0));
 $23 = $22 * $19;
 $24 = (+($0|0));
 $25 = $23 - $24;
 $26 = (~~(($25)));
 $27 = ((($p)) + 28|0);
 HEAP32[$27>>2] = $26;
 $28 = (+($n|0));
 $29 = $28 + 0.25;
 $30 = $29 * $11;
 $31 = $30;
 $32 = $31 * 0.5;
 $33 = $32 / $15;
 $34 = (+Math_log((+$33)));
 $35 = $34 * 1.4426950216293335;
 $36 = $35 + -5.9657840728759766;
 $37 = $22 * $36;
 $38 = $37 + 0.5;
 $39 = (~~(($38)));
 $40 = (1 - ($26))|0;
 $41 = (($40) + ($39))|0;
 $42 = ((($p)) + 40|0);
 HEAP32[$42>>2] = $41;
 $43 = $n << 2;
 $44 = (_malloc($43)|0);
 $45 = ((($p)) + 16|0);
 HEAP32[$45>>2] = $44;
 $46 = (_malloc($43)|0);
 $47 = ((($p)) + 20|0);
 HEAP32[$47>>2] = $46;
 $48 = (_malloc($43)|0);
 $49 = ((($p)) + 24|0);
 HEAP32[$49>>2] = $48;
 $50 = ((($p)) + 4|0);
 HEAP32[$50>>2] = $vi;
 HEAP32[$p>>2] = $n;
 $51 = ((($p)) + 44|0);
 HEAP32[$51>>2] = $rate;
 $52 = ((($p)) + 48|0);
 HEAPF32[$52>>2] = 1.0;
 $53 = ($rate|0)<(26000);
 do {
  if ($53) {
   HEAPF32[$52>>2] = 0.0;
  } else {
   $54 = ($rate|0)<(38000);
   if ($54) {
    HEAPF32[$52>>2] = 0.93999999761581421;
    break;
   }
   $55 = ($rate|0)>(46000);
   if ($55) {
    HEAPF32[$52>>2] = 1.2749999761581421;
   }
  }
 } while(0);
 $56 = $15 * 2.0;
 $57 = (+($rate|0));
 $58 = ($n|0)>(0);
 $62 = $58;$i$0$ph$ph74 = 0;$j$0$ph$ph73 = 0;
 L9: while(1) {
  $$not75 = $62 ^ 1;
  $i$070 = $i$0$ph$ph74;
  while(1) {
   $64 = (($i$070) + 1)|0;
   $65 = (+($64|0));
   $66 = $65 * 0.08664337545633316;
   $67 = $66 + 2.7488713472395148;
   $68 = (+Math_exp((+$67)));
   $69 = $56 * $68;
   $70 = $69 / $57;
   $71 = (+_rint($70));
   $72 = (~~(($71)));
   $$not = ($72|0)<=($j$0$ph$ph73|0);
   $brmerge = $$not | $$not75;
   if (!($brmerge)) {
    $$lcssa = $64;$$lcssa85 = $72;$i$070$lcssa = $i$070;
    break;
   }
   $73 = ($64|0)<(87);
   if ($73) {
    $i$070 = $64;
   } else {
    $j$0$ph$ph$lcssa = $j$0$ph$ph73;
    break L9;
   }
  }
  $74 = (1272 + ($i$070$lcssa<<2)|0);
  $75 = +HEAPF32[$74>>2];
  $76 = (1272 + ($$lcssa<<2)|0);
  $77 = +HEAPF32[$76>>2];
  $78 = $77 - $75;
  $79 = (($$lcssa85) - ($j$0$ph$ph73))|0;
  $80 = (+($79|0));
  $81 = $78 / $80;
  $82 = (($j$0$ph$ph73) - ($$lcssa85))|0;
  $83 = (($j$0$ph$ph73) - ($n))|0;
  $84 = ($82>>>0)>($83>>>0);
  $umax = $84 ? $82 : $83;
  $59 = (($j$0$ph$ph73) - ($umax))|0;
  $base$032 = $75;$j$133 = $j$0$ph$ph73;
  while(1) {
   $85 = $base$032 + 100.0;
   $86 = (($44) + ($j$133<<2)|0);
   HEAPF32[$86>>2] = $85;
   $87 = $base$032 + $81;
   $88 = (($j$133) + 1)|0;
   $exitcond50 = ($88|0)==($59|0);
   if ($exitcond50) {
    break;
   } else {
    $base$032 = $87;$j$133 = $88;
   }
  }
  $60 = ($59|0)<($n|0);
  $61 = ($$lcssa|0)<(87);
  if ($61) {
   $62 = $60;$i$0$ph$ph74 = $$lcssa;$j$0$ph$ph73 = $59;
  } else {
   $j$0$ph$ph$lcssa = $59;
   break;
  }
 }
 $63 = ($j$0$ph$ph$lcssa|0)<($n|0);
 if ($63) {
  $j$328 = $j$0$ph$ph$lcssa;
  while(1) {
   $97 = (($j$328) + -1)|0;
   $98 = (($44) + ($97<<2)|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = (($44) + ($j$328<<2)|0);
   HEAP32[$100>>2] = $99;
   $101 = (($j$328) + 1)|0;
   $exitcond48 = ($101|0)==($n|0);
   if ($exitcond48) {
    break;
   } else {
    $j$328 = $101;
   }
  }
 }
 $89 = ($n|0)>(0);
 if ($89) {
  $90 = $n << 1;
  $91 = (($rate|0) / ($90|0))&-1;
  $92 = ((($vi)) + 120|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ((($vi)) + 124|0);
  $95 = ((($vi)) + 116|0);
  $96 = ((($vi)) + 112|0);
  $hi$024 = 1;$i$126 = 0;$lo$025 = -99;
  while(1) {
   $107 = Math_imul($91, $i$126)|0;
   $108 = (+($107|0));
   $109 = $108 * 7.3999998858198524E-4;
   $110 = $109;
   $111 = (+Math_atan((+$110)));
   $112 = $111 * 13.100000381469727;
   $113 = Math_imul($107, $107)|0;
   $114 = (+($113|0));
   $115 = $114 * 1.8499999754340024E-8;
   $116 = $115;
   $117 = (+Math_atan((+$116)));
   $118 = $117 * 2.2400000095367432;
   $119 = $118 + $112;
   $120 = $108 * 9.9999997473787516E-5;
   $121 = $120;
   $122 = $119 + $121;
   $123 = $122;
   $124 = (($93) + ($lo$025))|0;
   $125 = ($124|0)<($i$126|0);
   L27: do {
    if ($125) {
     $126 = +HEAPF32[$96>>2];
     $127 = $123 - $126;
     $128 = $127;
     $lo$115 = $lo$025;
     while(1) {
      $129 = Math_imul($lo$115, $91)|0;
      $130 = (+($129|0));
      $131 = $130 * 7.3999998858198524E-4;
      $132 = $131;
      $133 = (+Math_atan((+$132)));
      $134 = $133 * 13.100000381469727;
      $135 = Math_imul($129, $129)|0;
      $136 = (+($135|0));
      $137 = $136 * 1.8499999754340024E-8;
      $138 = $137;
      $139 = (+Math_atan((+$138)));
      $140 = $139 * 2.2400000095367432;
      $141 = $130 * 9.9999997473787516E-5;
      $142 = $141;
      $143 = $134 + $142;
      $144 = $143 + $140;
      $145 = $144 < $128;
      if (!($145)) {
       $lo$1$lcssa = $lo$115;
       break L27;
      }
      $149 = (($lo$115) + 1)|0;
      $150 = (($93) + ($149))|0;
      $151 = ($150|0)<($i$126|0);
      if ($151) {
       $lo$115 = $149;
      } else {
       $lo$1$lcssa = $149;
       break;
      }
     }
    } else {
     $lo$1$lcssa = $lo$025;
    }
   } while(0);
   $146 = ($hi$024|0)>($n|0);
   L33: do {
    if ($146) {
     $hi$1$lcssa = $hi$024;
    } else {
     $147 = HEAP32[$94>>2]|0;
     $148 = (($147) + ($i$126))|0;
     $hi$120 = $hi$024;
     while(1) {
      $152 = ($hi$120|0)<($148|0);
      if (!($152)) {
       $153 = Math_imul($hi$120, $91)|0;
       $154 = (+($153|0));
       $155 = $154 * 7.3999998858198524E-4;
       $156 = $155;
       $157 = (+Math_atan((+$156)));
       $158 = $157 * 13.100000381469727;
       $159 = Math_imul($153, $153)|0;
       $160 = (+($159|0));
       $161 = $160 * 1.8499999754340024E-8;
       $162 = $161;
       $163 = (+Math_atan((+$162)));
       $164 = $163 * 2.2400000095367432;
       $165 = $154 * 9.9999997473787516E-5;
       $166 = $165;
       $167 = $158 + $166;
       $168 = $167 + $164;
       $169 = +HEAPF32[$95>>2];
       $170 = $169 + $123;
       $171 = $170;
       $172 = $168 < $171;
       if (!($172)) {
        $hi$1$lcssa = $hi$120;
        break L33;
       }
      }
      $173 = (($hi$120) + 1)|0;
      $174 = ($hi$120|0)<($n|0);
      if ($174) {
       $hi$120 = $173;
      } else {
       $hi$1$lcssa = $173;
       break;
      }
     }
    }
   } while(0);
   $175 = $lo$1$lcssa << 16;
   $176 = (($175) + -65537)|0;
   $177 = (($176) + ($hi$1$lcssa))|0;
   $178 = (($48) + ($i$126<<2)|0);
   HEAP32[$178>>2] = $177;
   $179 = (($i$126) + 1)|0;
   $exitcond47 = ($179|0)==($n|0);
   if ($exitcond47) {
    break;
   } else {
    $hi$024 = $hi$1$lcssa;$i$126 = $179;$lo$025 = $lo$1$lcssa;
   }
  }
  if ($89) {
   $102 = $57 * 0.5;
   $103 = HEAP32[$10>>2]|0;
   $104 = (($103) + 1)|0;
   $105 = 1 << $104;
   $106 = (+($105|0));
   $i$212 = 0;
   while(1) {
    $180 = (+($i$212|0));
    $181 = $180 + 0.25;
    $182 = $181;
    $183 = $102 * $182;
    $184 = $183 / $15;
    $185 = (+Math_log((+$184)));
    $186 = $185 * 1.4426950216293335;
    $187 = $186 + -5.9657840728759766;
    $188 = $106 * $187;
    $189 = $188 + 0.5;
    $190 = (~~(($189)));
    $191 = (($46) + ($i$212<<2)|0);
    HEAP32[$191>>2] = $190;
    $192 = (($i$212) + 1)|0;
    $exitcond46 = ($192|0)==($n|0);
    if ($exitcond46) {
     $$pre$phiZ2D = $102;
     break;
    } else {
     $i$212 = $192;
    }
   }
  } else {
   label = 19;
  }
 } else {
  label = 19;
 }
 if ((label|0) == 19) {
  $$pre54 = $57 * 0.5;
  $$pre$phiZ2D = $$pre54;
 }
 $193 = ((($vi)) + 36|0);
 $194 = $$pre$phiZ2D / $15;
 $195 = $194;
 $196 = ((($vi)) + 24|0);
 $197 = +HEAPF32[$196>>2];
 $198 = ((($vi)) + 28|0);
 $199 = +HEAPF32[$198>>2];
 $200 = (_setup_tone_curves($193,$195,$n,$197,$199)|0);
 $201 = ((($p)) + 8|0);
 HEAP32[$201>>2] = $200;
 $202 = (_malloc(12)|0);
 $203 = ((($p)) + 12|0);
 HEAP32[$203>>2] = $202;
 $204 = (_malloc($43)|0);
 HEAP32[$202>>2] = $204;
 $205 = (_malloc($43)|0);
 $206 = ((($202)) + 4|0);
 HEAP32[$206>>2] = $205;
 $207 = (_malloc($43)|0);
 $208 = ((($202)) + 8|0);
 HEAP32[$208>>2] = $207;
 if (!($89)) {
  return;
 }
 $209 = HEAP32[$50>>2]|0;
 $$pre = HEAP32[$202>>2]|0;
 $$phi$trans$insert = ((($202)) + 4|0);
 $$pre51 = HEAP32[$$phi$trans$insert>>2]|0;
 $$phi$trans$insert52 = ((($202)) + 8|0);
 $$pre53 = HEAP32[$$phi$trans$insert52>>2]|0;
 $i$410 = 0;
 while(1) {
  $210 = (+($i$410|0));
  $211 = $210 + 0.5;
  $212 = $211 * $57;
  $213 = $212 / $56;
  $214 = (+Math_log((+$213)));
  $215 = $214 * 2.885390043258667;
  $216 = $215 + -11.931568145751953;
  $217 = $216;
  $218 = $217 < 0.0;
  $halfoc$0 = $218 ? 0.0 : $217;
  $$inv = $halfoc$0 >= 16.0;
  $halfoc$1 = $$inv ? 16.0 : $halfoc$0;
  $219 = (~~(($halfoc$1)));
  $220 = (+($219|0));
  $221 = $halfoc$1 - $220;
  $222 = $221;
  $223 = 1.0 - $222;
  $224 = (($219) + 1)|0;
  $225 = (((($209)) + 132|0) + ($219<<2)|0);
  $226 = +HEAPF32[$225>>2];
  $227 = $226;
  $228 = $227 * $223;
  $229 = (((($209)) + 132|0) + ($224<<2)|0);
  $230 = +HEAPF32[$229>>2];
  $231 = $230 * $221;
  $232 = $231;
  $233 = $232 + $228;
  $234 = $233;
  $235 = (($$pre) + ($i$410<<2)|0);
  HEAPF32[$235>>2] = $234;
  $236 = (((($209)) + 200|0) + ($219<<2)|0);
  $237 = +HEAPF32[$236>>2];
  $238 = $237;
  $239 = $238 * $223;
  $240 = (((($209)) + 200|0) + ($224<<2)|0);
  $241 = +HEAPF32[$240>>2];
  $242 = $241 * $221;
  $243 = $242;
  $244 = $243 + $239;
  $245 = $244;
  $246 = (($$pre51) + ($i$410<<2)|0);
  HEAPF32[$246>>2] = $245;
  $247 = (((($209)) + 268|0) + ($219<<2)|0);
  $248 = +HEAPF32[$247>>2];
  $249 = $248;
  $250 = $249 * $223;
  $251 = (((($209)) + 268|0) + ($224<<2)|0);
  $252 = +HEAPF32[$251>>2];
  $253 = $252 * $221;
  $254 = $253;
  $255 = $254 + $250;
  $256 = $255;
  $257 = (($$pre53) + ($i$410<<2)|0);
  HEAPF32[$257>>2] = $256;
  $258 = (($i$410) + 1)|0;
  $exitcond = ($258|0)==($n|0);
  if ($exitcond) {
   break;
  } else {
   $i$410 = $258;
  }
 }
 return;
}
function __vp_psy_clear($p) {
 $p = $p|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$05 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($p)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  _free($2);
 }
 $4 = ((($p)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  _free($5);
 }
 $7 = ((($p)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  _free($8);
 }
 $10 = ((($p)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $14 = $11;$i$05 = 0;
  while(1) {
   $13 = (($14) + ($i$05<<2)|0);
   $15 = HEAP32[$13>>2]|0;
   $16 = HEAP32[$15>>2]|0;
   _free($16);
   $17 = HEAP32[$10>>2]|0;
   $18 = (($17) + ($i$05<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($19)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   _free($21);
   $22 = HEAP32[$10>>2]|0;
   $23 = (($22) + ($i$05<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($24)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   _free($26);
   $27 = HEAP32[$10>>2]|0;
   $28 = (($27) + ($i$05<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($29)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   _free($31);
   $32 = HEAP32[$10>>2]|0;
   $33 = (($32) + ($i$05<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($34)) + 16|0);
   $36 = HEAP32[$35>>2]|0;
   _free($36);
   $37 = HEAP32[$10>>2]|0;
   $38 = (($37) + ($i$05<<2)|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($39)) + 20|0);
   $41 = HEAP32[$40>>2]|0;
   _free($41);
   $42 = HEAP32[$10>>2]|0;
   $43 = (($42) + ($i$05<<2)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ((($44)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   _free($46);
   $47 = HEAP32[$10>>2]|0;
   $48 = (($47) + ($i$05<<2)|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ((($49)) + 28|0);
   $51 = HEAP32[$50>>2]|0;
   _free($51);
   $52 = HEAP32[$10>>2]|0;
   $53 = (($52) + ($i$05<<2)|0);
   $54 = HEAP32[$53>>2]|0;
   _free($54);
   $55 = (($i$05) + 1)|0;
   $exitcond = ($55|0)==(17);
   if ($exitcond) {
    break;
   }
   $$pre = HEAP32[$10>>2]|0;
   $14 = $$pre;$i$05 = $55;
  }
  $56 = HEAP32[$10>>2]|0;
  _free($56);
 }
 $57 = ((($p)) + 12|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($58|0)==(0|0);
 if (!($59)) {
  $60 = HEAP32[$58>>2]|0;
  _free($60);
  $61 = HEAP32[$57>>2]|0;
  $62 = ((($61)) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  _free($63);
  $64 = HEAP32[$57>>2]|0;
  $65 = ((($64)) + 8|0);
  $66 = HEAP32[$65>>2]|0;
  _free($66);
  $67 = HEAP32[$57>>2]|0;
  _free($67);
 }
 dest=$p; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 return;
}
function __vp_noisemask($p,$logmdct,$logmask) {
 $p = $p|0;
 $logmdct = $logmdct|0;
 $logmask = $logmask|0;
 var $$ = 0, $$$ = 0, $$alloca_mul = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0;
 var $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0;
 var $9 = 0.0, $exitcond = 0, $exitcond10 = 0, $exitcond9 = 0, $i$05 = 0, $i$12 = 0, $i$21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $1 = $0 << 2;
 $$alloca_mul = $1;
 $2 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
 $3 = ((($p)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 _bark_noise_hybridmp($0,$4,$logmdct,$logmask,140.0,-1);
 $5 = ($0|0)>(0);
 if ($5) {
  $i$05 = 0;
  while(1) {
   $6 = (($logmdct) + ($i$05<<2)|0);
   $7 = +HEAPF32[$6>>2];
   $8 = (($logmask) + ($i$05<<2)|0);
   $9 = +HEAPF32[$8>>2];
   $10 = $7 - $9;
   $11 = (($2) + ($i$05<<2)|0);
   HEAPF32[$11>>2] = $10;
   $12 = (($i$05) + 1)|0;
   $exitcond10 = ($12|0)==($0|0);
   if ($exitcond10) {
    break;
   } else {
    $i$05 = $12;
   }
  }
 }
 $13 = HEAP32[$3>>2]|0;
 $14 = ((($p)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 128|0);
 $17 = HEAP32[$16>>2]|0;
 _bark_noise_hybridmp($0,$13,$2,$logmask,0.0,$17);
 if ($5) {
  $i$12 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $19 = (($logmdct) + ($i$12<<2)|0);
  $20 = +HEAPF32[$19>>2];
  $21 = (($2) + ($i$12<<2)|0);
  $22 = +HEAPF32[$21>>2];
  $23 = $20 - $22;
  HEAPF32[$21>>2] = $23;
  $24 = (($i$12) + 1)|0;
  $exitcond9 = ($24|0)==($0|0);
  if ($exitcond9) {
   break;
  } else {
   $i$12 = $24;
  }
 }
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $18 = HEAP32[$14>>2]|0;
 $i$21 = 0;
 while(1) {
  $25 = (($logmask) + ($i$21<<2)|0);
  $26 = +HEAPF32[$25>>2];
  $27 = $26;
  $28 = $27 + 0.5;
  $29 = (~~(($28)));
  $30 = ($29|0)>(39);
  $$ = $30 ? 39 : $29;
  $31 = ($$|0)<(0);
  $$$ = $31 ? 0 : $$;
  $32 = (($2) + ($i$21<<2)|0);
  $33 = +HEAPF32[$32>>2];
  $34 = (((($18)) + 336|0) + ($$$<<2)|0);
  $35 = +HEAPF32[$34>>2];
  $36 = $35 + $33;
  HEAPF32[$25>>2] = $36;
  $37 = (($i$21) + 1)|0;
  $exitcond = ($37|0)==($0|0);
  if ($exitcond) {
   break;
  } else {
   $i$21 = $37;
  }
 }
 STACKTOP = sp;return;
}
function __vp_tonemask($p,$logfft,$logmask,$global_specmax,$local_specmax) {
 $p = $p|0;
 $logfft = $logfft|0;
 $logmask = $logmask|0;
 $global_specmax = +$global_specmax;
 $local_specmax = +$local_specmax;
 var $$$$i = 0, $$$i = 0, $$alloca_mul = 0, $$in$i = 0, $$in28$i = 0, $$lcssa = 0, $$lcssa33 = 0, $$lcssa68 = 0.0, $$lcssa73 = 0, $$phi$trans$insert$i = 0, $$phi$trans$insert37$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phiZ2D = 0, $$pre38$i = 0, $$sum$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0.0, $150 = 0, $151 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0.0, $91 = 0.0;
 var $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $att$0 = 0.0, $exitcond = 0, $exitcond36 = 0, $i$02$i$i = 0, $i$020 = 0, $i$04$i = 0, $i$1$i = 0, $i$1$i$lcssa = 0, $i$1$ph$i = 0, $i$118 = 0, $linpos$0$lcssa$i = 0, $linpos$023$i = 0;
 var $linpos$1$lcssa$i = 0, $linpos$116$i16 = 0, $linpos$27$i = 0, $max$0$ph$i = 0.0, $max$0$ph$i$lcssa = 0.0, $minV$0$ph$i = 0.0, $minV$0$ph3$lcssa$i = 0.0, $minV$0$ph313$i = 0.0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $pos$022$i = 0, $pos$1$lcssa$i = 0, $seedptr$01$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $1 = ((($p)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 << 2;
 $$alloca_mul = $3;
 $4 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
 $5 = ((($p)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $8 + $local_specmax;
 $10 = ($2|0)>(0);
 if ($10) {
  $i$020 = 0;
  while(1) {
   $11 = (($4) + ($i$020<<2)|0);
   HEAPF32[$11>>2] = -9999.0;
   $12 = (($i$020) + 1)|0;
   $13 = ($12|0)<($2|0);
   if ($13) {
    $i$020 = $12;
   } else {
    break;
   }
  }
 }
 $14 = ((($6)) + 8|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $9 < $15;
 $att$0 = $16 ? $15 : $9;
 $17 = ($0|0)>(0);
 if ($17) {
  $18 = ((($p)) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $i$118 = 0;
  while(1) {
   $20 = (($19) + ($i$118<<2)|0);
   $21 = +HEAPF32[$20>>2];
   $22 = $21 + $att$0;
   $23 = (($logmask) + ($i$118<<2)|0);
   HEAPF32[$23>>2] = $22;
   $24 = (($i$118) + 1)|0;
   $exitcond36 = ($24|0)==($0|0);
   if ($exitcond36) {
    break;
   } else {
    $i$118 = $24;
   }
  }
  $25 = ((($p)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($6)) + 496|0);
  $28 = +HEAPF32[$27>>2];
  $29 = $28 - $global_specmax;
  if ($17) {
   $30 = ((($p)) + 20|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($p)) + 32|0);
   $33 = ((($p)) + 36|0);
   $34 = ((($p)) + 28|0);
   $i$04$i = 0;
   while(1) {
    $35 = (($logfft) + ($i$04$i<<2)|0);
    $36 = +HEAPF32[$35>>2];
    $37 = (($31) + ($i$04$i<<2)|0);
    $38 = HEAP32[$37>>2]|0;
    $i$1$ph$i = $i$04$i;$max$0$ph$i = $36;
    L13: while(1) {
     $i$1$i = $i$1$ph$i;
     while(1) {
      $39 = (($i$1$i) + 1)|0;
      $40 = ($39|0)<($0|0);
      if (!($40)) {
       $$lcssa33 = 0;$$lcssa73 = $39;$i$1$i$lcssa = $i$1$i;$max$0$ph$i$lcssa = $max$0$ph$i;
       break L13;
      }
      $41 = (($31) + ($39<<2)|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = ($42|0)==($38|0);
      if (!($43)) {
       $$lcssa33 = 1;$$lcssa73 = $39;$i$1$i$lcssa = $i$1$i;$max$0$ph$i$lcssa = $max$0$ph$i;
       break L13;
      }
      $44 = (($logfft) + ($39<<2)|0);
      $45 = +HEAPF32[$44>>2];
      $46 = $45 > $max$0$ph$i;
      if ($46) {
       $i$1$ph$i = $39;$max$0$ph$i = $45;
       continue L13;
      } else {
       $i$1$i = $39;
      }
     }
    }
    $47 = $max$0$ph$i$lcssa + 6.0;
    $48 = (($logmask) + ($i$1$i$lcssa<<2)|0);
    $49 = +HEAPF32[$48>>2];
    $50 = $47 > $49;
    if ($50) {
     $51 = HEAP32[$32>>2]|0;
     $52 = $38 >> $51;
     $53 = ($52|0)>(16);
     $$$i = $53 ? 16 : $52;
     $54 = ($$$i|0)<(0);
     $$$$i = $54 ? 0 : $$$i;
     $55 = (($26) + ($$$$i<<2)|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = HEAP32[$33>>2]|0;
     $58 = $29 + $max$0$ph$i$lcssa;
     $59 = $58;
     $60 = $59 + -30.0;
     $61 = $60 * 0.10000000149011612;
     $62 = (~~(($61)));
     $63 = ($62|0)<(0);
     $64 = $63 ? 0 : $62;
     $65 = ($64|0)>(7);
     $66 = $65 ? 7 : $64;
     $67 = (($56) + ($66<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 4|0);
     $70 = +HEAPF32[$69>>2];
     $71 = (~~(($70)));
     $72 = +HEAPF32[$68>>2];
     $73 = (~~(($72)));
     $74 = ($73|0)<($71|0);
     if ($74) {
      $75 = (($31) + ($i$1$i$lcssa<<2)|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = HEAP32[$34>>2]|0;
      $78 = (($76) - ($77))|0;
      $79 = (+($78|0));
      $80 = $57 >> 1;
      $81 = (+($80|0));
      $82 = $72 + -16.0;
      $83 = (+($57|0));
      $84 = $82 * $83;
      $85 = $84 - $81;
      $86 = $85 + $79;
      $87 = (~~(($86)));
      $i$02$i$i = $73;$seedptr$01$i$i = $87;
      while(1) {
       $88 = ($seedptr$01$i$i|0)>(0);
       if ($88) {
        $$sum$i$i = (($i$02$i$i) + 2)|0;
        $89 = (($68) + ($$sum$i$i<<2)|0);
        $90 = +HEAPF32[$89>>2];
        $91 = $90 + $max$0$ph$i$lcssa;
        $92 = (($4) + ($seedptr$01$i$i<<2)|0);
        $93 = +HEAPF32[$92>>2];
        $94 = $93 < $91;
        if ($94) {
         HEAPF32[$92>>2] = $91;
        }
       }
       $95 = (($seedptr$01$i$i) + ($57))|0;
       $96 = ($95|0)<($2|0);
       $97 = (($i$02$i$i) + 1)|0;
       $98 = ($97|0)<($71|0);
       $or$cond$i$i = $98 & $96;
       if ($or$cond$i$i) {
        $i$02$i$i = $97;$seedptr$01$i$i = $95;
       } else {
        break;
       }
      }
     }
    }
    if ($$lcssa33) {
     $i$04$i = $$lcssa73;
    } else {
     $$pre$phiZ2D = $33;
     break;
    }
   }
  } else {
   label = 7;
  }
 } else {
  label = 7;
 }
 if ((label|0) == 7) {
  $$pre = ((($p)) + 36|0);
  $$pre$phiZ2D = $$pre;
 }
 $99 = HEAP32[$$pre$phiZ2D>>2]|0;
 _seed_chase($4,$99,$2);
 $100 = HEAP32[$p>>2]|0;
 $101 = ($100|0)>(1);
 L33: do {
  if ($101) {
   $102 = ((($p)) + 20|0);
   $103 = ((($p)) + 28|0);
   $104 = HEAP32[$102>>2]|0;
   $105 = HEAP32[$104>>2]|0;
   $106 = $99 >> 1;
   $107 = (($105) - ($106))|0;
   $108 = HEAP32[$103>>2]|0;
   $109 = (($107) - ($108))|0;
   $110 = HEAP32[$5>>2]|0;
   $111 = ((($110)) + 32|0);
   $117 = 1;$120 = $105;$linpos$023$i = 0;$pos$022$i = $109;
   while(1) {
    $114 = (($4) + ($pos$022$i<<2)|0);
    $115 = +HEAPF32[$114>>2];
    $116 = (($104) + ($117<<2)|0);
    $118 = HEAP32[$116>>2]|0;
    $119 = (($118) + ($120))|0;
    $121 = $119 >> 1;
    $122 = (($121) - ($108))|0;
    $123 = +HEAPF32[$111>>2];
    $124 = $115 > $123;
    $minV$0$ph$i = $124 ? $123 : $115;
    $125 = ($pos$022$i|0)<($122|0);
    L37: do {
     if ($125) {
      $$in$i = $pos$022$i;$minV$0$ph313$i = $minV$0$ph$i;
      while(1) {
       $126 = $minV$0$ph313$i == -9999.0;
       $$in28$i = $$in$i;
       while(1) {
        $127 = (($$in28$i) + 1)|0;
        $128 = (($4) + ($127<<2)|0);
        $129 = +HEAPF32[$128>>2];
        $130 = $129 > -9999.0;
        if ($130) {
         $131 = $129 < $minV$0$ph313$i;
         $or$cond$i = $126 | $131;
         if ($or$cond$i) {
          $$lcssa = $127;$$lcssa68 = $129;
          break;
         }
        } else {
         if ($126) {
          $$lcssa = $127;$$lcssa68 = $129;
          break;
         }
        }
        $132 = ($127|0)<($122|0);
        if ($132) {
         $$in28$i = $127;
        } else {
         $minV$0$ph3$lcssa$i = $minV$0$ph313$i;$pos$1$lcssa$i = $127;
         break L37;
        }
       }
       $133 = ($$lcssa|0)<($122|0);
       if ($133) {
        $$in$i = $$lcssa;$minV$0$ph313$i = $$lcssa68;
       } else {
        $minV$0$ph3$lcssa$i = $$lcssa68;$pos$1$lcssa$i = $$lcssa;
        break;
       }
      }
     } else {
      $minV$0$ph3$lcssa$i = $minV$0$ph$i;$pos$1$lcssa$i = $pos$022$i;
     }
    } while(0);
    $134 = (($pos$1$lcssa$i) + ($108))|0;
    $135 = ($linpos$023$i|0)>=($100|0);
    $136 = ($120|0)>($134|0);
    $or$cond = $135 | $136;
    L48: do {
     if ($or$cond) {
      $linpos$1$lcssa$i = $linpos$023$i;
     } else {
      $linpos$116$i16 = $linpos$023$i;
      while(1) {
       $137 = (($logmask) + ($linpos$116$i16<<2)|0);
       $138 = +HEAPF32[$137>>2];
       $139 = $138 < $minV$0$ph3$lcssa$i;
       if ($139) {
        HEAPF32[$137>>2] = $minV$0$ph3$lcssa$i;
       }
       $140 = (($linpos$116$i16) + 1)|0;
       $141 = ($140|0)<($100|0);
       if (!($141)) {
        $linpos$1$lcssa$i = $140;
        break L48;
       }
       $$phi$trans$insert37$i = (($104) + ($140<<2)|0);
       $$pre38$i = HEAP32[$$phi$trans$insert37$i>>2]|0;
       $142 = ($$pre38$i|0)>($134|0);
       if ($142) {
        $linpos$1$lcssa$i = $140;
        break;
       } else {
        $linpos$116$i16 = $140;
       }
      }
     }
    } while(0);
    $112 = (($linpos$1$lcssa$i) + 1)|0;
    $113 = ($112|0)<($100|0);
    if (!($113)) {
     $linpos$0$lcssa$i = $linpos$1$lcssa$i;
     break L33;
    }
    $$phi$trans$insert$i = (($104) + ($linpos$1$lcssa$i<<2)|0);
    $$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
    $117 = $112;$120 = $$pre$i;$linpos$023$i = $linpos$1$lcssa$i;$pos$022$i = $pos$1$lcssa$i;
   }
  } else {
   $linpos$0$lcssa$i = 0;
  }
 } while(0);
 $143 = HEAP32[$1>>2]|0;
 $144 = (($143) + -1)|0;
 $145 = (($4) + ($144<<2)|0);
 $146 = +HEAPF32[$145>>2];
 $147 = ($linpos$0$lcssa$i|0)<($100|0);
 if ($147) {
  $linpos$27$i = $linpos$0$lcssa$i;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $148 = (($logmask) + ($linpos$27$i<<2)|0);
  $149 = +HEAPF32[$148>>2];
  $150 = $149 < $146;
  if ($150) {
   HEAPF32[$148>>2] = $146;
  }
  $151 = (($linpos$27$i) + 1)|0;
  $exitcond = ($151|0)==($100|0);
  if ($exitcond) {
   break;
  } else {
   $linpos$27$i = $151;
  }
 }
 STACKTOP = sp;return;
}
function __vp_offset_and_mix($p,$noise,$tone,$offset_select,$logmask,$mdct,$logmdct) {
 $p = $p|0;
 $noise = $noise|0;
 $tone = $tone|0;
 $offset_select = $offset_select|0;
 $logmask = $logmask|0;
 $mdct = $mdct|0;
 $logmdct = $logmdct|0;
 var $$val$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0;
 var $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0;
 var $44 = 0.0, $45 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $de$0 = 0.0, $exitcond = 0, $i$01 = 0, $val$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (((($2)) + 12|0) + ($offset_select<<2)|0);
 $4 = +HEAPF32[$3>>2];
 $5 = ($0|0)>(0);
 if (!($5)) {
  return;
 }
 $6 = ((($p)) + 48|0);
 $7 = +HEAPF32[$6>>2];
 $8 = ((($p)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($offset_select<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($2)) + 108|0);
 $13 = ($offset_select|0)==(1);
 $14 = $7;
 $15 = $14 * 0.0050000000000000001;
 $16 = $14 * 2.9999999999999997E-4;
 $i$01 = 0;
 while(1) {
  $17 = (($noise) + ($i$01<<2)|0);
  $18 = +HEAPF32[$17>>2];
  $19 = (($11) + ($i$01<<2)|0);
  $20 = +HEAPF32[$19>>2];
  $21 = $20 + $18;
  $22 = +HEAPF32[$12>>2];
  $23 = $21 > $22;
  $val$0 = $23 ? $22 : $21;
  $24 = (($tone) + ($i$01<<2)|0);
  $25 = +HEAPF32[$24>>2];
  $26 = $25 + $4;
  $27 = $val$0 < $26;
  $$val$0 = $27 ? $26 : $val$0;
  $28 = (($logmask) + ($i$01<<2)|0);
  HEAPF32[$28>>2] = $$val$0;
  if ($13) {
   $29 = (($logmdct) + ($i$01<<2)|0);
   $30 = +HEAPF32[$29>>2];
   $31 = $val$0 - $30;
   $32 = $31 > -17.200000762939453;
   $33 = $31 + 17.200000762939453;
   $34 = $33;
   if ($32) {
    $35 = $15 * $34;
    $36 = 1.0 - $35;
    $37 = $36;
    $38 = $37 < 0.0;
    if ($38) {
     $de$0 = 9.9999997473787516E-5;
    } else {
     $de$0 = $37;
    }
   } else {
    $39 = $16 * $34;
    $40 = 1.0 - $39;
    $41 = $40;
    $de$0 = $41;
   }
   $42 = (($mdct) + ($i$01<<2)|0);
   $43 = +HEAPF32[$42>>2];
   $44 = $43 * $de$0;
   HEAPF32[$42>>2] = $44;
  }
  $45 = (($i$01) + 1)|0;
  $exitcond = ($45|0)==($0|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $45;
  }
 }
 return;
}
function __vp_ampmax_decay($amp,$vd) {
 $amp = +$amp;
 $vd = $vd|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vd)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($vd)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7|0) / 2)&-1;
 $9 = (+($8|0));
 $10 = ((($1)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (+($11|0));
 $13 = $9 / $12;
 $14 = ((($3)) + 2936|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $15 * $13;
 $17 = $16 + $amp;
 $18 = $17 < -9999.0;
 $$0 = $18 ? -9999.0 : $17;
 return (+$$0);
}
function __vp_couple_quantize_normalize($blobno,$g,$p,$vi,$mdct,$iwork,$nonzero,$sliding_lowpass,$ch) {
 $blobno = $blobno|0;
 $g = $g|0;
 $p = $p|0;
 $vi = $vi|0;
 $mdct = $mdct|0;
 $iwork = $iwork|0;
 $nonzero = $nonzero|0;
 $sliding_lowpass = $sliding_lowpass|0;
 $ch = $ch|0;
 var $$ = 0, $$$i = 0, $$alloca_mul = 0, $$alloca_mul1 = 0, $$alloca_mul11 = 0, $$alloca_mul13 = 0, $$alloca_mul15 = 0, $$alloca_mul3 = 0, $$alloca_mul5 = 0, $$alloca_mul7 = 0, $$alloca_mul9 = 0, $$phi$trans$insert67 = 0, $$pre = 0, $$pre$phi76Z2D = 0, $$pre$phiZ2D = 0, $$pre63 = 0, $$pre64 = 0, $$pre65 = 0, $$pre68 = 0, $$pre69 = 0;
 var $$pre70 = 0, $$pre71 = 0, $$pre72 = 0, $$pre75 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum14 = 0, $$sum5 = 0, $$v = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0.0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0.0, $179 = 0.0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0.0, $214 = 0.0;
 var $215 = 0, $216 = 0.0, $217 = 0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0, $224 = 0.0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0.0;
 var $exitcond = 0, $exitcond$i = 0, $exitcond50 = 0, $exitcond54 = 0, $exitcond56 = 0, $exitcond60 = 0, $exitcond61 = 0, $exitcond6189 = 0, $fabsf = 0.0, $fabsf$i = 0.0, $fabsf1 = 0.0, $fabsf2 = 0.0, $fabsf3 = 0.0, $fabsf4 = 0.0, $i$242 = 0, $i$320 = 0, $indvars$iv$next58 = 0, $indvars$iv57 = 0, $ispos = 0, $ispos7 = 0;
 var $ispos9 = 0, $j$01$i = 0, $j$022 = 0, $j$125 = 0, $j$227 = 0, $j$333 = 0, $k$030 = 0, $neg = 0, $neg10 = 0, $neg8 = 0, $not$$i = 0, $p$idx$val = 0, $p$idx13$val = 0, $postpoint$0$in = 0.0, $postpoint$0$in$in = 0, $smax59 = 0, $step$039 = 0, $stereo_threshholds_limited$stereo_threshholds = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 500|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $26 = 16;
 } else {
  $6 = ((($2)) + 508|0);
  $7 = HEAP32[$6>>2]|0;
  $26 = $7;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((((($g)) + 132|0) + (($8*60)|0)|0) + ($blobno<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (((($g)) + 252|0) + ($blobno<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (1624 + ($12<<3)|0);
 $14 = +HEAPF64[$13>>3];
 $15 = (((($g)) + 312|0) + ($blobno<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $ch << 2;
 $$alloca_mul = $17;
 $18 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
 $$alloca_mul1 = $17;
 $19 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul1)|0)+15)&-16)|0;;
 $$alloca_mul3 = $17;
 $20 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul3)|0)+15)&-16)|0;;
 $$alloca_mul5 = $17;
 $21 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul5)|0)+15)&-16)|0;;
 $$alloca_mul7 = $17;
 $22 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul7)|0)+15)&-16)|0;;
 $23 = ((($vi)) + 1156|0);
 $24 = ($0|0)>(1000);
 $stereo_threshholds_limited$stereo_threshholds = $24 ? 1696 : 1624;
 $postpoint$0$in$in = (($stereo_threshholds_limited$stereo_threshholds) + ($16<<3)|0);
 $postpoint$0$in = +HEAPF64[$postpoint$0$in$in>>3];
 $25 = Math_imul($17, $26)|0;
 $$alloca_mul9 = $25;
 $27 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul9)|0)+15)&-16)|0;;
 HEAP32[$18>>2] = $27;
 $$alloca_mul11 = $25;
 $28 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul11)|0)+15)&-16)|0;;
 HEAP32[$19>>2] = $28;
 $$alloca_mul13 = $25;
 $29 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul13)|0)+15)&-16)|0;;
 HEAP32[$20>>2] = $29;
 $$alloca_mul15 = $25;
 $30 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul15)|0)+15)&-16)|0;;
 HEAP32[$21>>2] = $30;
 $31 = ($ch|0)>(1);
 if ($31) {
  $32 = (($27) + ($26<<2)|0);
  $33 = ((($18)) + 4|0);
  HEAP32[$33>>2] = $32;
  $34 = (($28) + ($26<<2)|0);
  $35 = ((($19)) + 4|0);
  HEAP32[$35>>2] = $34;
  $36 = (($29) + ($26<<2)|0);
  $37 = ((($20)) + 4|0);
  HEAP32[$37>>2] = $36;
  $38 = (($30) + ($26<<2)|0);
  $39 = ((($21)) + 4|0);
  HEAP32[$39>>2] = $38;
  $exitcond6189 = ($ch|0)==(2);
  if (!($exitcond6189)) {
   $43 = 2;
   while(1) {
    $$pre = HEAP32[$18>>2]|0;
    $$pre63 = HEAP32[$19>>2]|0;
    $$pre64 = HEAP32[$20>>2]|0;
    $$pre65 = HEAP32[$21>>2]|0;
    $42 = Math_imul($43, $26)|0;
    $44 = (($$pre) + ($42<<2)|0);
    $45 = (($18) + ($43<<2)|0);
    HEAP32[$45>>2] = $44;
    $46 = (($$pre63) + ($42<<2)|0);
    $47 = (($19) + ($43<<2)|0);
    HEAP32[$47>>2] = $46;
    $48 = (($$pre64) + ($42<<2)|0);
    $49 = (($20) + ($43<<2)|0);
    HEAP32[$49>>2] = $48;
    $50 = (($$pre65) + ($42<<2)|0);
    $51 = (($21) + ($43<<2)|0);
    HEAP32[$51>>2] = $50;
    $52 = (($43) + 1)|0;
    $exitcond61 = ($52|0)==($ch|0);
    if ($exitcond61) {
     break;
    } else {
     $43 = $52;
    }
   }
  }
 }
 $40 = HEAP32[$23>>2]|0;
 $41 = ($0|0)>(0);
 if ($41) {
  $53 = HEAP32[$21>>2]|0;
  $54 = ($ch|0)>(0);
  $55 = $0 ^ -1;
  $56 = $26 ^ -1;
  $i$242 = 0;$indvars$iv57 = $55;
  while(1) {
   $59 = ($indvars$iv57|0)>($56|0);
   $smax59 = $59 ? $indvars$iv57 : $56;
   $60 = $smax59 ^ -1;
   $61 = (($0) - ($i$242))|0;
   $62 = ($26|0)>($61|0);
   $$ = $62 ? $61 : $26;
   _memcpy(($22|0),($nonzero|0),($17|0))|0;
   _memset(($53|0),0,($25|0))|0;
   if ($54) {
    $63 = ($$|0)>(0);
    $64 = (($10) - ($i$242))|0;
    $k$030 = 0;
    while(1) {
     $70 = (($iwork) + ($k$030<<2)|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = (($71) + ($i$242<<2)|0);
     $73 = (($22) + ($k$030<<2)|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = ($74|0)==(0);
     if ($75) {
      if ($63) {
       $78 = (($20) + ($k$030<<2)|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = (($18) + ($k$030<<2)|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = (($19) + ($k$030<<2)|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = (($21) + ($k$030<<2)|0);
       $85 = HEAP32[$84>>2]|0;
       $j$227 = 0;
       while(1) {
        $125 = (($79) + ($j$227<<2)|0);
        HEAPF32[$125>>2] = 1.000000013351432E-10;
        $126 = (($81) + ($j$227<<2)|0);
        HEAPF32[$126>>2] = 0.0;
        $127 = (($83) + ($j$227<<2)|0);
        HEAPF32[$127>>2] = 0.0;
        $128 = (($85) + ($j$227<<2)|0);
        HEAP32[$128>>2] = 0;
        $$sum11 = (($j$227) + ($i$242))|0;
        $129 = (($71) + ($$sum11<<2)|0);
        HEAP32[$129>>2] = 0;
        $130 = (($j$227) + 1)|0;
        $exitcond54 = ($130|0)==($60|0);
        if ($exitcond54) {
         break;
        } else {
         $j$227 = $130;
        }
       }
      }
     } else {
      $76 = (($20) + ($k$030<<2)|0);
      $77 = HEAP32[$76>>2]|0;
      if ($63) {
       $j$022 = 0;
       while(1) {
        $$sum12 = (($j$022) + ($i$242))|0;
        $86 = (($71) + ($$sum12<<2)|0);
        $87 = HEAP32[$86>>2]|0;
        $88 = (1768 + ($87<<2)|0);
        $89 = HEAP32[$88>>2]|0;
        $90 = (($77) + ($j$022<<2)|0);
        HEAP32[$90>>2] = $89;
        $91 = (($j$022) + 1)|0;
        $exitcond = ($91|0)==($60|0);
        if ($exitcond) {
         break;
        } else {
         $j$022 = $91;
        }
       }
       $92 = (($mdct) + ($k$030<<2)|0);
       $93 = HEAP32[$92>>2]|0;
       $94 = (($21) + ($k$030<<2)|0);
       $95 = HEAP32[$94>>2]|0;
       if ($63) {
        $j$01$i = 0;
        while(1) {
         $96 = ($j$01$i|0)>=($64|0);
         $$v = $96 ? $postpoint$0$in : $14;
         $97 = $$v;
         $$sum14 = (($j$01$i) + ($i$242))|0;
         $98 = (($93) + ($$sum14<<2)|0);
         $99 = +HEAPF32[$98>>2];
         $fabsf$i = (+Math_abs((+$99)));
         $100 = (($77) + ($j$01$i<<2)|0);
         $101 = +HEAPF32[$100>>2];
         $102 = $fabsf$i / $101;
         $103 = (($95) + ($j$01$i<<2)|0);
         $not$$i = !($102 < $97);
         $$$i = $not$$i&1;
         HEAP32[$103>>2] = $$$i;
         $104 = (($j$01$i) + 1)|0;
         $exitcond$i = ($104|0)==($$|0);
         if ($exitcond$i) {
          break;
         } else {
          $j$01$i = $104;
         }
        }
        if ($63) {
         $105 = (($18) + ($k$030<<2)|0);
         $106 = HEAP32[$105>>2]|0;
         $107 = (($19) + ($k$030<<2)|0);
         $108 = HEAP32[$107>>2]|0;
         $j$125 = 0;
         while(1) {
          $109 = (($j$125) + ($i$242))|0;
          $110 = (($93) + ($109<<2)|0);
          $111 = +HEAPF32[$110>>2];
          $112 = $111 * $111;
          $113 = (($106) + ($j$125<<2)|0);
          HEAPF32[$113>>2] = $112;
          $114 = (($108) + ($j$125<<2)|0);
          HEAPF32[$114>>2] = $112;
          $115 = +HEAPF32[$110>>2];
          $116 = $115 < 0.0;
          if ($116) {
           $117 = +HEAPF32[$113>>2];
           $118 = -$117;
           HEAPF32[$113>>2] = $118;
          }
          $119 = (($77) + ($j$125<<2)|0);
          $120 = +HEAPF32[$119>>2];
          $121 = $120 * $120;
          HEAPF32[$119>>2] = $121;
          $122 = (($j$125) + 1)|0;
          $exitcond50 = ($122|0)==($60|0);
          if ($exitcond50) {
           $$pre$phi76Z2D = $107;$124 = $106;
           break;
          } else {
           $j$125 = $122;
          }
         }
        } else {
         label = 21;
        }
       } else {
        label = 21;
       }
      } else {
       label = 21;
      }
      if ((label|0) == 21) {
       label = 0;
       $$phi$trans$insert67 = (($18) + ($k$030<<2)|0);
       $$pre68 = HEAP32[$$phi$trans$insert67>>2]|0;
       $$pre75 = (($19) + ($k$030<<2)|0);
       $$pre$phi76Z2D = $$pre75;$124 = $$pre68;
      }
      $123 = HEAP32[$$pre$phi76Z2D>>2]|0;
      $p$idx$val = HEAP32[$1>>2]|0;
      (+_noise_normalize($p$idx$val,$10,$124,$123,$77,0,$i$242,$$,$72));
     }
     $131 = (($k$030) + 1)|0;
     $exitcond56 = ($131|0)==($ch|0);
     if ($exitcond56) {
      break;
     } else {
      $k$030 = $131;
     }
    }
   }
   $65 = HEAP32[$23>>2]|0;
   $66 = ($65|0)>(0);
   if ($66) {
    $67 = ($$|0)>(0);
    $68 = (($sliding_lowpass) - ($i$242))|0;
    $69 = (($10) - ($i$242))|0;
    $249 = $65;$step$039 = 0;
    while(1) {
     $132 = (((($vi)) + 1160|0) + ($step$039<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = (((($vi)) + 2184|0) + ($step$039<<2)|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = (($iwork) + ($133<<2)|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = (($137) + ($i$242<<2)|0);
     $139 = (($iwork) + ($135<<2)|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = (($18) + ($133<<2)|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = (($18) + ($135<<2)|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = (($19) + ($133<<2)|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = (($19) + ($135<<2)|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (($20) + ($133<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = (($20) + ($135<<2)|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = (($21) + ($133<<2)|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($21) + ($135<<2)|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = (($22) + ($133<<2)|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($158|0)==(0);
     $160 = (($22) + ($135<<2)|0);
     if ($159) {
      $161 = HEAP32[$160>>2]|0;
      $162 = ($161|0)==(0);
      if ($162) {
       $229 = $249;
      } else {
       label = 31;
      }
     } else {
      label = 31;
     }
     if ((label|0) == 31) {
      label = 0;
      HEAP32[$160>>2] = 1;
      HEAP32[$157>>2] = 1;
      if ($67) {
       $j$333 = 0;
       while(1) {
        $163 = ($j$333|0)<($68|0);
        do {
         if ($163) {
          $164 = (($154) + ($j$333<<2)|0);
          $165 = HEAP32[$164>>2]|0;
          $166 = ($165|0)==(0);
          $167 = (($156) + ($j$333<<2)|0);
          if ($166) {
           $168 = HEAP32[$167>>2]|0;
           $169 = ($168|0)==(0);
           if ($169) {
            $203 = ($j$333|0)<($69|0);
            do {
             if ($203) {
              $204 = (($144) + ($j$333<<2)|0);
              $205 = +HEAPF32[$204>>2];
              $206 = (($142) + ($j$333<<2)|0);
              $207 = +HEAPF32[$206>>2];
              $208 = $207 + $205;
              HEAPF32[$206>>2] = $208;
              $fabsf2 = (+Math_abs((+$208)));
              $209 = (($146) + ($j$333<<2)|0);
              HEAPF32[$209>>2] = $fabsf2;
              $$pre$phiZ2D = $204;
             } else {
              $210 = (($142) + ($j$333<<2)|0);
              $211 = +HEAPF32[$210>>2];
              $212 = (($144) + ($j$333<<2)|0);
              $213 = +HEAPF32[$212>>2];
              $214 = $213 + $211;
              $215 = $214 < 0.0;
              $fabsf = (+Math_abs((+$211)));
              $fabsf1 = (+Math_abs((+$213)));
              $216 = $fabsf1 + $fabsf;
              $217 = (($146) + ($j$333<<2)|0);
              HEAPF32[$217>>2] = $216;
              if ($215) {
               $218 = -$216;
               HEAPF32[$210>>2] = $218;
               $$pre$phiZ2D = $212;
               break;
              } else {
               HEAPF32[$210>>2] = $216;
               $$pre$phiZ2D = $212;
               break;
              }
             }
            } while(0);
            $219 = (($148) + ($j$333<<2)|0);
            HEAPF32[$219>>2] = 0.0;
            HEAPF32[$$pre$phiZ2D>>2] = 0.0;
            HEAP32[$167>>2] = 1;
            $$sum = (($j$333) + ($i$242))|0;
            $220 = (($140) + ($$sum<<2)|0);
            HEAP32[$220>>2] = 0;
            break;
           }
          }
          $170 = (($142) + ($j$333<<2)|0);
          $171 = +HEAPF32[$170>>2];
          $fabsf3 = (+Math_abs((+$171)));
          $172 = (($144) + ($j$333<<2)|0);
          $173 = +HEAPF32[$172>>2];
          $fabsf4 = (+Math_abs((+$173)));
          $174 = $fabsf4 + $fabsf3;
          HEAPF32[$170>>2] = $174;
          $175 = (($146) + ($j$333<<2)|0);
          $176 = +HEAPF32[$175>>2];
          $177 = (($148) + ($j$333<<2)|0);
          $178 = +HEAPF32[$177>>2];
          $179 = $178 + $176;
          HEAPF32[$175>>2] = $179;
          HEAP32[$167>>2] = 1;
          HEAP32[$164>>2] = 1;
          $$sum5 = (($j$333) + ($i$242))|0;
          $180 = (($137) + ($$sum5<<2)|0);
          $181 = HEAP32[$180>>2]|0;
          $182 = (($140) + ($$sum5<<2)|0);
          $183 = HEAP32[$182>>2]|0;
          $ispos = ($181|0)>(-1);
          $neg = (0 - ($181))|0;
          $184 = $ispos ? $181 : $neg;
          $ispos7 = ($183|0)>(-1);
          $neg8 = (0 - ($183))|0;
          $185 = $ispos7 ? $183 : $neg8;
          $186 = ($184|0)>($185|0);
          if ($186) {
           $187 = ($181|0)>(0);
           $188 = (($181) - ($183))|0;
           $189 = (($183) - ($181))|0;
           $190 = $187 ? $188 : $189;
           HEAP32[$182>>2] = $190;
           $$pre70 = HEAP32[$180>>2]|0;
           $195 = $$pre70;$198 = $190;
          } else {
           $191 = ($183|0)>(0);
           $192 = (($181) - ($183))|0;
           $193 = (($183) - ($181))|0;
           $194 = $191 ? $192 : $193;
           HEAP32[$182>>2] = $194;
           HEAP32[$180>>2] = $183;
           $$pre69 = HEAP32[$182>>2]|0;
           $195 = $183;$198 = $$pre69;
          }
          $ispos9 = ($195|0)>(-1);
          $neg10 = (0 - ($195))|0;
          $196 = $ispos9 ? $195 : $neg10;
          $197 = $196 << 1;
          $199 = ($198|0)<($197|0);
          if (!($199)) {
           $200 = (0 - ($198))|0;
           HEAP32[$182>>2] = $200;
           $201 = HEAP32[$180>>2]|0;
           $202 = (0 - ($201))|0;
           HEAP32[$180>>2] = $202;
          }
         }
        } while(0);
        $221 = (($150) + ($j$333<<2)|0);
        $222 = +HEAPF32[$221>>2];
        $223 = (($152) + ($j$333<<2)|0);
        $224 = +HEAPF32[$223>>2];
        $225 = $224 + $222;
        HEAPF32[$223>>2] = $225;
        HEAPF32[$221>>2] = $225;
        $226 = (($j$333) + 1)|0;
        $exitcond60 = ($226|0)==($60|0);
        if ($exitcond60) {
         break;
        } else {
         $j$333 = $226;
        }
       }
      }
      $p$idx13$val = HEAP32[$1>>2]|0;
      (+_noise_normalize($p$idx13$val,$10,$142,$146,$150,$154,$i$242,$$,$138));
      $$pre71 = HEAP32[$23>>2]|0;
      $229 = $$pre71;
     }
     $227 = (($step$039) + 1)|0;
     $228 = ($227|0)<($229|0);
     if ($228) {
      $249 = $229;$step$039 = $227;
     } else {
      $248 = $229;
      break;
     }
    }
   } else {
    $248 = $65;
   }
   $230 = (($i$242) + ($26))|0;
   $231 = ($0|0)>($230|0);
   $indvars$iv$next58 = (($indvars$iv57) + ($26))|0;
   if ($231) {
    $i$242 = $230;$indvars$iv57 = $indvars$iv$next58;
   } else {
    $57 = $248;
    break;
   }
  }
 } else {
  $57 = $40;
 }
 $58 = ($57|0)>(0);
 if ($58) {
  $247 = $57;$i$320 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $232 = (((($vi)) + 1160|0) + ($i$320<<2)|0);
  $233 = HEAP32[$232>>2]|0;
  $234 = (($nonzero) + ($233<<2)|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = ($235|0)==(0);
  $237 = (((($vi)) + 2184|0) + ($i$320<<2)|0);
  if ($236) {
   $238 = HEAP32[$237>>2]|0;
   $239 = (($nonzero) + ($238<<2)|0);
   $240 = HEAP32[$239>>2]|0;
   $241 = ($240|0)==(0);
   if ($241) {
    $246 = $247;
   } else {
    label = 52;
   }
  } else {
   label = 52;
  }
  if ((label|0) == 52) {
   label = 0;
   HEAP32[$234>>2] = 1;
   $242 = HEAP32[$237>>2]|0;
   $243 = (($nonzero) + ($242<<2)|0);
   HEAP32[$243>>2] = 1;
   $$pre72 = HEAP32[$23>>2]|0;
   $246 = $$pre72;
  }
  $244 = (($i$320) + 1)|0;
  $245 = ($244|0)<($246|0);
  if ($245) {
   $247 = $246;$i$320 = $244;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _setup_tone_curves($curveatt_dB,$binHz,$n,$center_boost,$center_decay_rate) {
 $curveatt_dB = $curveatt_dB|0;
 $binHz = +$binHz;
 $n = $n|0;
 $center_boost = +$center_boost;
 $center_decay_rate = +$center_decay_rate;
 var $$$$us$us$us = 0.0, $$$$us68 = 0.0, $$$us$us$us = 0.0, $$$us$us81 = 0.0, $$5 = 0, $$6 = 0, $$8 = 0, $$alloca_mul = 0, $$op = 0.0, $$op$op$op = 0.0, $$op123 = 0, $$op124 = 0, $$op125 = 0, $$op126 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0;
 var $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0;
 var $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0, $26 = 0.0, $260 = 0.0, $261 = 0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0;
 var $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0.0, $285 = 0, $286 = 0, $287 = 0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0, $294 = 0, $295 = 0, $296 = 0.0, $297 = 0, $298 = 0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0.0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0.0, $318 = 0, $319 = 0;
 var $32 = 0.0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0.0, $324 = 0, $325 = 0, $326 = 0.0, $327 = 0, $328 = 0, $329 = 0.0, $33 = 0.0, $330 = 0, $331 = 0, $332 = 0.0, $333 = 0, $334 = 0, $335 = 0.0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0.0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0.0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0.0, $352 = 0, $353 = 0, $354 = 0, $36 = 0;
 var $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0;
 var $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ath = 0, $athc = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i11 = 0, $exitcond$i13 = 0, $exitcond$i16 = 0, $exitcond$i18 = 0, $exitcond104 = 0, $exitcond105 = 0, $exitcond106 = 0;
 var $exitcond107 = 0, $exitcond108 = 0, $exitcond109 = 0, $exitcond111 = 0, $exitcond113 = 0, $exitcond114 = 0, $exitcond115 = 0, $exitcond116 = 0, $exitcond117 = 0, $exitcond118 = 0, $exitcond119 = 0, $exitcond120 = 0, $exitcond121 = 0, $exitcond95 = 0, $exitcond96 = 0, $exitcond97 = 0, $hi_bin$0 = 0, $hi_bin3$0 = 0, $i$01$i = 0, $i$01$i10 = 0;
 var $i$01$i12 = 0, $i$01$i15 = 0, $i$01$i17 = 0, $i$088 = 0, $i$1$ = 0, $i$158 = 0, $ispos = 0, $ispos$us$us$us = 0, $ispos$us$us79 = 0, $ispos$us65 = 0, $j$061 = 0, $j$10$lcssa = 0, $j$1054 = 0, $j$269 = 0, $j$269$us = 0, $j$386 = 0, $j$487 = 0, $j$533 = 0, $j$638 = 0, $j$749 = 0;
 var $j$852 = 0, $j$9$lcssa = 0.0, $k$163 = 0, $k$163$us$us$us = 0, $k$163$us$us78 = 0, $k$163$us64 = 0, $k$241 = 0, $l$037 = 0, $l$2$lcssa = 0, $l$2$lcssa$lcssa = 0, $l$235 = 0, $l$339 = 0, $l1$048 = 0, $l1$2$lcssa = 0, $l1$2$lcssa$lcssa = 0, $l1$244 = 0, $l1$350 = 0, $lo_bin$1 = 0, $lo_bin$1$l$0 = 0, $lo_bin2$1 = 0;
 var $lo_bin2$1$l1$0 = 0, $lo_curve$1 = 0, $m$055 = 0, $min$1 = 0.0, $min$1$1 = 0.0, $min$1$2 = 0.0, $min$1$3 = 0.0, $n$hi_bin$0 = 0, $n$hi_bin3$0 = 0, $neg = 0, $neg$us$us$us = 0, $neg$us$us80 = 0, $neg$us66 = 0, $or$cond734 = 0, $or$cond943 = 0, $smax100 = 0, $smax102 = 0, $smax92 = 0, $smax94 = 0, $umax = 0;
 var $umax103 = 0, $workc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32480|0;
 $ath = sp + 32256|0;
 $workc = sp + 1792|0;
 $athc = sp;
 $0 = $n << 2;
 $$alloca_mul = $0;
 $1 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
 $2 = (_malloc(68)|0);
 _memset(($workc|0),0,30464)|0;
 $3 = $center_boost > 0.0;
 $4 = $center_boost < 0.0;
 $i$088 = 0;
 while(1) {
  $8 = $i$088 << 2;
  $j$061 = 0;
  while(1) {
   $23 = (($j$061) + ($8))|0;
   $24 = ($23|0)<(88);
   if ($24) {
    $25 = (1272 + ($23<<2)|0);
    $26 = +HEAPF32[$25>>2];
    $min$1 = $26;
   } else {
    $min$1 = -30.0;
   }
   $27 = (($23) + 1)|0;
   $28 = ($27|0)<(88);
   if ($28) {
    $338 = (1272 + ($27<<2)|0);
    $339 = +HEAPF32[$338>>2];
    $340 = $min$1 > $339;
    if ($340) {
     $min$1$1 = $339;
    } else {
     $min$1$1 = $min$1;
    }
   } else {
    $337 = $min$1 > -30.0;
    if ($337) {
     $min$1$1 = -30.0;
    } else {
     $min$1$1 = $min$1;
    }
   }
   $341 = (($23) + 2)|0;
   $342 = ($341|0)<(88);
   if ($342) {
    $344 = (1272 + ($341<<2)|0);
    $345 = +HEAPF32[$344>>2];
    $346 = $min$1$1 > $345;
    if ($346) {
     $min$1$2 = $345;
    } else {
     $min$1$2 = $min$1$1;
    }
   } else {
    $343 = $min$1$1 > -30.0;
    if ($343) {
     $min$1$2 = -30.0;
    } else {
     $min$1$2 = $min$1$1;
    }
   }
   $347 = (($23) + 3)|0;
   $348 = ($347|0)<(88);
   if ($348) {
    $350 = (1272 + ($347<<2)|0);
    $351 = +HEAPF32[$350>>2];
    $352 = $min$1$2 > $351;
    if ($352) {
     $min$1$3 = $351;
    } else {
     $min$1$3 = $min$1$2;
    }
   } else {
    $349 = $min$1$2 > -30.0;
    if ($349) {
     $min$1$3 = -30.0;
    } else {
     $min$1$3 = $min$1$2;
    }
   }
   $353 = (($ath) + ($j$061<<2)|0);
   HEAPF32[$353>>2] = $min$1$3;
   $354 = (($j$061) + 1)|0;
   $exitcond111 = ($354|0)==(56);
   if ($exitcond111) {
    break;
   } else {
    $j$061 = $354;
   }
  }
  $9 = (((($workc) + (($i$088*1792)|0)|0)) + 448|0);
  $10 = (2792 + (($i$088*1344)|0)|0);
  _memcpy(($9|0),($10|0),224)|0;
  $11 = (((($workc) + (($i$088*1792)|0)|0)) + 672|0);
  $12 = (((2792 + (($i$088*1344)|0)|0)) + 224|0);
  _memcpy(($11|0),($12|0),224)|0;
  $13 = (((($workc) + (($i$088*1792)|0)|0)) + 896|0);
  $14 = (((2792 + (($i$088*1344)|0)|0)) + 448|0);
  _memcpy(($13|0),($14|0),224)|0;
  $15 = (((($workc) + (($i$088*1792)|0)|0)) + 1120|0);
  $16 = (((2792 + (($i$088*1344)|0)|0)) + 672|0);
  _memcpy(($15|0),($16|0),224)|0;
  $17 = (((($workc) + (($i$088*1792)|0)|0)) + 1344|0);
  $18 = (((2792 + (($i$088*1344)|0)|0)) + 896|0);
  _memcpy(($17|0),($18|0),224)|0;
  $19 = (((($workc) + (($i$088*1792)|0)|0)) + 1568|0);
  $20 = (((2792 + (($i$088*1344)|0)|0)) + 1120|0);
  _memcpy(($19|0),($20|0),224)|0;
  $21 = (($workc) + (($i$088*1792)|0)|0);
  _memcpy(($21|0),($10|0),224)|0;
  $22 = (((($workc) + (($i$088*1792)|0)|0)) + 224|0);
  _memcpy(($22|0),($10|0),224)|0;
  if ($3) {
   $j$269$us = 0;
   while(1) {
    if ($4) {
     $k$163$us$us$us = 0;
     while(1) {
      $40 = (16 - ($k$163$us$us$us))|0;
      $ispos$us$us$us = ($40|0)>(-1);
      $neg$us$us$us = (0 - ($40))|0;
      $41 = $ispos$us$us$us ? $40 : $neg$us$us$us;
      $42 = (+($41|0));
      $43 = $42 * $center_decay_rate;
      $44 = $43 + $center_boost;
      $45 = $44 < 0.0;
      $$$us$us$us = $45 ? 0.0 : $44;
      $46 = $$$us$us$us > 0.0;
      $$$$us$us$us = $46 ? 0.0 : $$$us$us$us;
      $47 = (((($workc) + (($i$088*1792)|0)|0) + (($j$269$us*224)|0)|0) + ($k$163$us$us$us<<2)|0);
      $48 = +HEAPF32[$47>>2];
      $49 = $48 + $$$$us$us$us;
      HEAPF32[$47>>2] = $49;
      $50 = (($k$163$us$us$us) + 1)|0;
      $exitcond119 = ($50|0)==(56);
      if ($exitcond119) {
       break;
      } else {
       $k$163$us$us$us = $50;
      }
     }
    } else {
     $k$163$us$us78 = 0;
     while(1) {
      $30 = (16 - ($k$163$us$us78))|0;
      $ispos$us$us79 = ($30|0)>(-1);
      $neg$us$us80 = (0 - ($30))|0;
      $31 = $ispos$us$us79 ? $30 : $neg$us$us80;
      $32 = (+($31|0));
      $33 = $32 * $center_decay_rate;
      $34 = $33 + $center_boost;
      $35 = $34 < 0.0;
      $$$us$us81 = $35 ? 0.0 : $34;
      $36 = (((($workc) + (($i$088*1792)|0)|0) + (($j$269$us*224)|0)|0) + ($k$163$us$us78<<2)|0);
      $37 = +HEAPF32[$36>>2];
      $38 = $37 + $$$us$us81;
      HEAPF32[$36>>2] = $38;
      $39 = (($k$163$us$us78) + 1)|0;
      $exitcond118 = ($39|0)==(56);
      if ($exitcond118) {
       break;
      } else {
       $k$163$us$us78 = $39;
      }
     }
    }
    $29 = (($j$269$us) + 1)|0;
    $exitcond120 = ($29|0)==(8);
    if ($exitcond120) {
     break;
    } else {
     $j$269$us = $29;
    }
   }
  } else {
   $j$269 = 0;
   while(1) {
    if ($4) {
     $k$163$us64 = 0;
     while(1) {
      $54 = (16 - ($k$163$us64))|0;
      $ispos$us65 = ($54|0)>(-1);
      $neg$us66 = (0 - ($54))|0;
      $55 = $ispos$us65 ? $54 : $neg$us66;
      $56 = (+($55|0));
      $57 = $56 * $center_decay_rate;
      $58 = $57 + $center_boost;
      $59 = $58 > 0.0;
      $$$$us68 = $59 ? 0.0 : $58;
      $60 = (((($workc) + (($i$088*1792)|0)|0) + (($j$269*224)|0)|0) + ($k$163$us64<<2)|0);
      $61 = +HEAPF32[$60>>2];
      $62 = $61 + $$$$us68;
      HEAPF32[$60>>2] = $62;
      $63 = (($k$163$us64) + 1)|0;
      $exitcond114 = ($63|0)==(56);
      if ($exitcond114) {
       break;
      } else {
       $k$163$us64 = $63;
      }
     }
    } else {
     $k$163 = 0;
     while(1) {
      $64 = (16 - ($k$163))|0;
      $ispos = ($64|0)>(-1);
      $neg = (0 - ($64))|0;
      $65 = $ispos ? $64 : $neg;
      $66 = (+($65|0));
      $67 = $66 * $center_decay_rate;
      $68 = $67 + $center_boost;
      $69 = (((($workc) + (($i$088*1792)|0)|0) + (($j$269*224)|0)|0) + ($k$163<<2)|0);
      $70 = +HEAPF32[$69>>2];
      $71 = $70 + $68;
      HEAPF32[$69>>2] = $71;
      $72 = (($k$163) + 1)|0;
      $exitcond113 = ($72|0)==(56);
      if ($exitcond113) {
       break;
      } else {
       $k$163 = $72;
      }
     }
    }
    $73 = (($j$269) + 1)|0;
    $exitcond115 = ($73|0)==(8);
    if ($exitcond115) {
     break;
    } else {
     $j$269 = $73;
    }
   }
  }
  $51 = (($curveatt_dB) + ($i$088<<2)|0);
  $52 = +HEAPF32[$51>>2];
  $53 = $52;
  $j$386 = 0;
  while(1) {
   $74 = ($j$386|0)<(2);
   $75 = (+($j$386|0));
   $$op = $75 * 10.0;
   $$op$op$op = 70.0 - $$op;
   $76 = $74 ? 50.0 : $$op$op$op;
   $77 = $76 + $53;
   $78 = $77;
   $i$01$i = 0;
   while(1) {
    $79 = (((($workc) + (($i$088*1792)|0)|0) + (($j$386*224)|0)|0) + ($i$01$i<<2)|0);
    $80 = +HEAPF32[$79>>2];
    $81 = $80 + $78;
    HEAPF32[$79>>2] = $81;
    $82 = (($i$01$i) + 1)|0;
    $exitcond$i = ($82|0)==(56);
    if ($exitcond$i) {
     break;
    } else {
     $i$01$i = $82;
    }
   }
   $83 = (($athc) + (($j$386*224)|0)|0);
   _memcpy(($83|0),($ath|0),224)|0;
   $84 = (+($j$386|0));
   $85 = $84 * 10.0;
   $86 = 70.0 - $85;
   $i$01$i17 = 0;
   while(1) {
    $87 = ((($athc) + (($j$386*224)|0)|0) + ($i$01$i17<<2)|0);
    $88 = +HEAPF32[$87>>2];
    $89 = $86 + $88;
    HEAPF32[$87>>2] = $89;
    $90 = (($i$01$i17) + 1)|0;
    $exitcond$i18 = ($90|0)==(56);
    if ($exitcond$i18) {
     $i$01$i15 = 0;
     break;
    } else {
     $i$01$i17 = $90;
    }
   }
   while(1) {
    $91 = (((($workc) + (($i$088*1792)|0)|0) + (($j$386*224)|0)|0) + ($i$01$i15<<2)|0);
    $92 = +HEAPF32[$91>>2];
    $93 = ((($athc) + (($j$386*224)|0)|0) + ($i$01$i15<<2)|0);
    $94 = +HEAPF32[$93>>2];
    $95 = $92 > $94;
    if ($95) {
     HEAPF32[$93>>2] = $92;
    }
    $96 = (($i$01$i15) + 1)|0;
    $exitcond$i16 = ($96|0)==(56);
    if ($exitcond$i16) {
     break;
    } else {
     $i$01$i15 = $96;
    }
   }
   $97 = (($j$386) + 1)|0;
   $exitcond116 = ($97|0)==(8);
   if ($exitcond116) {
    $j$487 = 1;
    break;
   } else {
    $j$386 = $97;
   }
  }
  while(1) {
   $98 = (($j$487) + -1)|0;
   $i$01$i12 = 0;
   while(1) {
    $99 = ((($athc) + (($98*224)|0)|0) + ($i$01$i12<<2)|0);
    $100 = +HEAPF32[$99>>2];
    $101 = ((($athc) + (($j$487*224)|0)|0) + ($i$01$i12<<2)|0);
    $102 = +HEAPF32[$101>>2];
    $103 = $100 < $102;
    if ($103) {
     HEAPF32[$101>>2] = $100;
    }
    $104 = (($i$01$i12) + 1)|0;
    $exitcond$i13 = ($104|0)==(56);
    if ($exitcond$i13) {
     $i$01$i10 = 0;
     break;
    } else {
     $i$01$i12 = $104;
    }
   }
   while(1) {
    $105 = ((($athc) + (($j$487*224)|0)|0) + ($i$01$i10<<2)|0);
    $106 = +HEAPF32[$105>>2];
    $107 = (((($workc) + (($i$088*1792)|0)|0) + (($j$487*224)|0)|0) + ($i$01$i10<<2)|0);
    $108 = +HEAPF32[$107>>2];
    $109 = $106 < $108;
    if ($109) {
     HEAPF32[$107>>2] = $106;
    }
    $110 = (($i$01$i10) + 1)|0;
    $exitcond$i11 = ($110|0)==(56);
    if ($exitcond$i11) {
     break;
    } else {
     $i$01$i10 = $110;
    }
   }
   $111 = (($j$487) + 1)|0;
   $exitcond117 = ($111|0)==(8);
   if ($exitcond117) {
    break;
   } else {
    $j$487 = $111;
   }
  }
  $112 = (($i$088) + 1)|0;
  $exitcond121 = ($112|0)==(17);
  if ($exitcond121) {
   break;
  } else {
   $i$088 = $112;
  }
 }
 $5 = $binHz;
 $6 = ($n|0)>(0);
 $7 = $n ^ -1;
 $i$158 = 0;
 while(1) {
  $113 = (_malloc(32)|0);
  $114 = (($2) + ($i$158<<2)|0);
  HEAP32[$114>>2] = $113;
  $115 = (+($i$158|0));
  $116 = $115 * 0.5;
  $117 = $115 * 0.34657350182533264;
  $118 = $117 + 4.1351653545408453;
  $119 = (+Math_exp((+$118)));
  $120 = $119 / $5;
  $121 = (+Math_floor((+$120)));
  $122 = (~~(($121)));
  $123 = (+($122|0));
  $124 = $123 * $binHz;
  $125 = $124 + 1.0;
  $126 = $125;
  $127 = (+Math_log((+$126)));
  $128 = $127 * 2.885390043258667;
  $129 = $128 + -11.931568145751953;
  $130 = (+Math_ceil((+$129)));
  $131 = (~~(($130)));
  $132 = (($122) + 1)|0;
  $133 = (+($132|0));
  $134 = $133 * $binHz;
  $135 = $134;
  $136 = (+Math_log((+$135)));
  $137 = $136 * 2.885390043258667;
  $138 = $137 + -11.931568145751953;
  $139 = (+Math_floor((+$138)));
  $140 = (~~(($139)));
  $141 = ($131|0)>($i$158|0);
  $i$1$ = $141 ? $i$158 : $131;
  $142 = ($i$1$|0)<(0);
  $lo_curve$1 = $142 ? 0 : $i$1$;
  $143 = ($140|0)>(16);
  $$5 = $143 ? 16 : $140;
  $144 = ($lo_curve$1|0)>($$5|0);
  $145 = (($i$158) + 1)|0;
  $146 = ($145|0)<(17);
  $147 = $116 + 3.9657840728759766;
  $m$055 = 0;
  while(1) {
   $148 = (_malloc(232)|0);
   $149 = (($113) + ($m$055<<2)|0);
   HEAP32[$149>>2] = $148;
   if ($6) {
    $j$533 = 0;
    while(1) {
     $150 = (($1) + ($j$533<<2)|0);
     HEAPF32[$150>>2] = 999.0;
     $151 = (($j$533) + 1)|0;
     $exitcond = ($151|0)==($n|0);
     if ($exitcond) {
      break;
     } else {
      $j$533 = $151;
     }
    }
   }
   if (!($144)) {
    $k$241 = $lo_curve$1;
    while(1) {
     $152 = (+($k$241|0));
     $153 = $152 * 0.5;
     $j$638 = 0;$l$037 = 0;
     while(1) {
      $157 = (+($j$638|0));
      $158 = $157 * 0.125;
      $159 = $158 + $153;
      $160 = $159 + 3.9032840728759766;
      $161 = $160 * 0.69314700365066528;
      $162 = (+Math_exp((+$161)));
      $163 = $162 / $5;
      $164 = (~~(($163)));
      $165 = $159 + 4.0282840728759766;
      $166 = $165 * 0.69314700365066528;
      $167 = (+Math_exp((+$166)));
      $168 = $167 / $5;
      $169 = $168 + 1.0;
      $170 = (~~(($169)));
      $171 = ($164|0)<(0);
      $$6 = $171 ? 0 : $164;
      $172 = ($$6|0)>($n|0);
      $lo_bin$1 = $172 ? $n : $$6;
      $173 = ($lo_bin$1|0)<($l$037|0);
      $lo_bin$1$l$0 = $173 ? $lo_bin$1 : $l$037;
      $174 = ($170|0)<(0);
      $hi_bin$0 = $174 ? 0 : $170;
      $175 = ($hi_bin$0|0)>($n|0);
      $n$hi_bin$0 = $175 ? $n : $hi_bin$0;
      $176 = ($lo_bin$1$l$0|0)<($n$hi_bin$0|0);
      $177 = ($lo_bin$1$l$0|0)<($n|0);
      $or$cond734 = $176 & $177;
      if ($or$cond734) {
       $178 = (((($workc) + (($k$241*1792)|0)|0) + (($m$055*224)|0)|0) + ($j$638<<2)|0);
       $179 = +HEAPF32[$178>>2];
       $180 = ($l$037|0)<($n|0);
       $181 = $180 ? $l$037 : $n;
       $182 = $181 ^ -1;
       $183 = ($164|0)>(0);
       $$op125 = $164 ^ -1;
       $184 = $183 ? $$op125 : -1;
       $185 = ($184|0)<($182|0);
       $smax92 = $185 ? $182 : $184;
       $186 = $smax92 ^ -1;
       $187 = ($170|0)>(0);
       $$op126 = $170 ^ -1;
       $188 = $187 ? $$op126 : -1;
       $189 = ($188|0)<($7|0);
       $smax94 = $189 ? $7 : $188;
       $190 = (($smax94) - ($smax92))|0;
       $191 = (($smax92) + ($n))|0;
       $192 = $191 ^ -1;
       $193 = ($190>>>0)>($192>>>0);
       $umax = $193 ? $190 : $192;
       $194 = (($186) - ($umax))|0;
       $l$235 = $lo_bin$1$l$0;
       while(1) {
        $195 = (($1) + ($l$235<<2)|0);
        $196 = +HEAPF32[$195>>2];
        $197 = $196 > $179;
        if ($197) {
         HEAPF32[$195>>2] = $179;
        }
        $198 = (($l$235) + 1)|0;
        $exitcond95 = ($198|0)==($194|0);
        if ($exitcond95) {
         $l$2$lcssa = $194;
         break;
        } else {
         $l$235 = $198;
        }
       }
      } else {
       $l$2$lcssa = $lo_bin$1$l$0;
      }
      $199 = (($j$638) + 1)|0;
      $exitcond96 = ($199|0)==(56);
      if ($exitcond96) {
       $l$2$lcssa$lcssa = $l$2$lcssa;
       break;
      } else {
       $j$638 = $199;$l$037 = $l$2$lcssa;
      }
     }
     $154 = ($l$2$lcssa$lcssa|0)<($n|0);
     if ($154) {
      $155 = ((((($workc) + (($k$241*1792)|0)|0) + (($m$055*224)|0)|0)) + 220|0);
      $156 = +HEAPF32[$155>>2];
      $l$339 = $l$2$lcssa$lcssa;
      while(1) {
       $200 = (($1) + ($l$339<<2)|0);
       $201 = +HEAPF32[$200>>2];
       $202 = $201 > $156;
       if ($202) {
        HEAPF32[$200>>2] = $156;
       }
       $203 = (($l$339) + 1)|0;
       $exitcond97 = ($203|0)==($n|0);
       if ($exitcond97) {
        break;
       } else {
        $l$339 = $203;
       }
      }
     }
     $204 = (($k$241) + 1)|0;
     $205 = ($k$241|0)<($$5|0);
     if ($205) {
      $k$241 = $204;
     } else {
      break;
     }
    }
   }
   if ($146) {
    $j$749 = 0;$l1$048 = 0;
    while(1) {
     $212 = (+($j$749|0));
     $213 = $212 * 0.125;
     $214 = $213 + $116;
     $215 = $214 + 3.9032840728759766;
     $216 = $215 * 0.69314700365066528;
     $217 = (+Math_exp((+$216)));
     $218 = $217 / $5;
     $219 = (~~(($218)));
     $220 = $214 + 4.0282840728759766;
     $221 = $220 * 0.69314700365066528;
     $222 = (+Math_exp((+$221)));
     $223 = $222 / $5;
     $224 = $223 + 1.0;
     $225 = (~~(($224)));
     $226 = ($219|0)<(0);
     $$8 = $226 ? 0 : $219;
     $227 = ($$8|0)>($n|0);
     $lo_bin2$1 = $227 ? $n : $$8;
     $228 = ($lo_bin2$1|0)<($l1$048|0);
     $lo_bin2$1$l1$0 = $228 ? $lo_bin2$1 : $l1$048;
     $229 = ($225|0)<(0);
     $hi_bin3$0 = $229 ? 0 : $225;
     $230 = ($hi_bin3$0|0)>($n|0);
     $n$hi_bin3$0 = $230 ? $n : $hi_bin3$0;
     $231 = ($lo_bin2$1$l1$0|0)<($n$hi_bin3$0|0);
     $232 = ($lo_bin2$1$l1$0|0)<($n|0);
     $or$cond943 = $231 & $232;
     if ($or$cond943) {
      $233 = (((($workc) + (($145*1792)|0)|0) + (($m$055*224)|0)|0) + ($j$749<<2)|0);
      $234 = +HEAPF32[$233>>2];
      $235 = ($l1$048|0)<($n|0);
      $236 = $235 ? $l1$048 : $n;
      $237 = $236 ^ -1;
      $238 = ($219|0)>(0);
      $$op123 = $219 ^ -1;
      $239 = $238 ? $$op123 : -1;
      $240 = ($239|0)<($237|0);
      $smax100 = $240 ? $237 : $239;
      $241 = $smax100 ^ -1;
      $242 = ($225|0)>(0);
      $$op124 = $225 ^ -1;
      $243 = $242 ? $$op124 : -1;
      $244 = ($243|0)<($7|0);
      $smax102 = $244 ? $7 : $243;
      $245 = (($smax102) - ($smax100))|0;
      $246 = (($smax100) + ($n))|0;
      $247 = $246 ^ -1;
      $248 = ($245>>>0)>($247>>>0);
      $umax103 = $248 ? $245 : $247;
      $249 = (($241) - ($umax103))|0;
      $l1$244 = $lo_bin2$1$l1$0;
      while(1) {
       $250 = (($1) + ($l1$244<<2)|0);
       $251 = +HEAPF32[$250>>2];
       $252 = $251 > $234;
       if ($252) {
        HEAPF32[$250>>2] = $234;
       }
       $253 = (($l1$244) + 1)|0;
       $exitcond104 = ($253|0)==($249|0);
       if ($exitcond104) {
        $l1$2$lcssa = $249;
        break;
       } else {
        $l1$244 = $253;
       }
      }
     } else {
      $l1$2$lcssa = $lo_bin2$1$l1$0;
     }
     $254 = (($j$749) + 1)|0;
     $exitcond105 = ($254|0)==(56);
     if ($exitcond105) {
      $l1$2$lcssa$lcssa = $l1$2$lcssa;
      break;
     } else {
      $j$749 = $254;$l1$048 = $l1$2$lcssa;
     }
    }
    $209 = ($l1$2$lcssa$lcssa|0)<($n|0);
    if ($209) {
     $210 = ((((($workc) + (($145*1792)|0)|0) + (($m$055*224)|0)|0)) + 220|0);
     $211 = +HEAPF32[$210>>2];
     $l1$350 = $l1$2$lcssa$lcssa;
     while(1) {
      $255 = (($1) + ($l1$350<<2)|0);
      $256 = +HEAPF32[$255>>2];
      $257 = $256 > $211;
      if ($257) {
       HEAPF32[$255>>2] = $211;
      }
      $258 = (($l1$350) + 1)|0;
      $exitcond106 = ($258|0)==($n|0);
      if ($exitcond106) {
       break;
      } else {
       $l1$350 = $258;
      }
     }
    }
   }
   $206 = (($113) + ($m$055<<2)|0);
   $207 = (($113) + ($m$055<<2)|0);
   $208 = (($113) + ($m$055<<2)|0);
   $j$852 = 0;
   while(1) {
    $262 = (+($j$852|0));
    $263 = $262 * 0.125;
    $264 = $147 + $263;
    $265 = $264 * 0.69314700365066528;
    $266 = (+Math_exp((+$265)));
    $267 = $266 / $5;
    $268 = (~~(($267)));
    $269 = ($268|0)<(0);
    do {
     if ($269) {
      $270 = (($j$852) + 2)|0;
      $271 = HEAP32[$206>>2]|0;
      $272 = (($271) + ($270<<2)|0);
      HEAPF32[$272>>2] = -999.0;
     } else {
      $273 = ($268|0)<($n|0);
      if ($273) {
       $277 = (($1) + ($268<<2)|0);
       $278 = HEAP32[$277>>2]|0;
       $279 = (($j$852) + 2)|0;
       $280 = HEAP32[$207>>2]|0;
       $281 = (($280) + ($279<<2)|0);
       HEAP32[$281>>2] = $278;
       break;
      } else {
       $274 = (($j$852) + 2)|0;
       $275 = HEAP32[$208>>2]|0;
       $276 = (($275) + ($274<<2)|0);
       HEAPF32[$276>>2] = -999.0;
       break;
      }
     }
    } while(0);
    $282 = (($j$852) + 1)|0;
    $exitcond107 = ($282|0)==(56);
    if ($exitcond107) {
     break;
    } else {
     $j$852 = $282;
    }
   }
   $259 = ((($148)) + 8|0);
   $260 = +HEAPF32[$259>>2];
   $261 = $260 > -200.0;
   do {
    if ($261) {
     $j$9$lcssa = 0.0;
    } else {
     $283 = ((($148)) + 12|0);
     $284 = +HEAPF32[$283>>2];
     $285 = $284 > -200.0;
     if ($285) {
      $j$9$lcssa = 1.0;
     } else {
      $295 = ((($148)) + 16|0);
      $296 = +HEAPF32[$295>>2];
      $297 = $296 > -200.0;
      if ($297) {
       $j$9$lcssa = 2.0;
      } else {
       $298 = ((($148)) + 20|0);
       $299 = +HEAPF32[$298>>2];
       $300 = $299 > -200.0;
       if ($300) {
        $j$9$lcssa = 3.0;
       } else {
        $301 = ((($148)) + 24|0);
        $302 = +HEAPF32[$301>>2];
        $303 = $302 > -200.0;
        if ($303) {
         $j$9$lcssa = 4.0;
        } else {
         $304 = ((($148)) + 28|0);
         $305 = +HEAPF32[$304>>2];
         $306 = $305 > -200.0;
         if ($306) {
          $j$9$lcssa = 5.0;
         } else {
          $307 = ((($148)) + 32|0);
          $308 = +HEAPF32[$307>>2];
          $309 = $308 > -200.0;
          if ($309) {
           $j$9$lcssa = 6.0;
          } else {
           $310 = ((($148)) + 36|0);
           $311 = +HEAPF32[$310>>2];
           $312 = $311 > -200.0;
           if ($312) {
            $j$9$lcssa = 7.0;
           } else {
            $313 = ((($148)) + 40|0);
            $314 = +HEAPF32[$313>>2];
            $315 = $314 > -200.0;
            if ($315) {
             $j$9$lcssa = 8.0;
            } else {
             $316 = ((($148)) + 44|0);
             $317 = +HEAPF32[$316>>2];
             $318 = $317 > -200.0;
             if ($318) {
              $j$9$lcssa = 9.0;
             } else {
              $319 = ((($148)) + 48|0);
              $320 = +HEAPF32[$319>>2];
              $321 = $320 > -200.0;
              if ($321) {
               $j$9$lcssa = 10.0;
              } else {
               $322 = ((($148)) + 52|0);
               $323 = +HEAPF32[$322>>2];
               $324 = $323 > -200.0;
               if ($324) {
                $j$9$lcssa = 11.0;
               } else {
                $325 = ((($148)) + 56|0);
                $326 = +HEAPF32[$325>>2];
                $327 = $326 > -200.0;
                if ($327) {
                 $j$9$lcssa = 12.0;
                } else {
                 $328 = ((($148)) + 60|0);
                 $329 = +HEAPF32[$328>>2];
                 $330 = $329 > -200.0;
                 if ($330) {
                  $j$9$lcssa = 13.0;
                 } else {
                  $331 = ((($148)) + 64|0);
                  $332 = +HEAPF32[$331>>2];
                  $333 = $332 > -200.0;
                  if ($333) {
                   $j$9$lcssa = 14.0;
                   break;
                  }
                  $334 = ((($148)) + 68|0);
                  $335 = +HEAPF32[$334>>2];
                  $336 = $335 > -200.0;
                  if ($336) {
                   $j$9$lcssa = 15.0;
                   break;
                  }
                  $j$9$lcssa = 16.0;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   } while(0);
   HEAPF32[$148>>2] = $j$9$lcssa;
   $j$1054 = 55;
   while(1) {
    $286 = (($j$1054) + 2)|0;
    $287 = (($148) + ($286<<2)|0);
    $288 = +HEAPF32[$287>>2];
    $289 = $288 > -200.0;
    if ($289) {
     $j$10$lcssa = $j$1054;
     break;
    }
    $290 = (($j$1054) + -1)|0;
    $291 = ($290|0)>(17);
    if ($291) {
     $j$1054 = $290;
    } else {
     $j$10$lcssa = $290;
     break;
    }
   }
   $292 = (+($j$10$lcssa|0));
   $293 = ((($148)) + 4|0);
   HEAPF32[$293>>2] = $292;
   $294 = (($m$055) + 1)|0;
   $exitcond108 = ($294|0)==(8);
   if ($exitcond108) {
    break;
   } else {
    $m$055 = $294;
   }
  }
  $exitcond109 = ($145|0)==(17);
  if ($exitcond109) {
   break;
  } else {
   $i$158 = $145;
  }
 }
 STACKTOP = sp;return ($2|0);
}
function _bark_noise_hybridmp($n,$b,$f,$noise,$offset,$fixed) {
 $n = $n|0;
 $b = $b|0;
 $f = $f|0;
 $noise = $noise|0;
 $offset = +$offset;
 $fixed = $fixed|0;
 var $$alloca_mul = 0, $$alloca_mul1 = 0, $$alloca_mul3 = 0, $$alloca_mul5 = 0, $$alloca_mul7 = 0, $$in = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0;
 var $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0;
 var $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0;
 var $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0;
 var $164 = 0.0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0.0, $17 = 0.0, $170 = 0, $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0.0, $180 = 0, $181 = 0.0;
 var $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0.0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0.0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0.0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0.0, $217 = 0;
 var $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0, $221 = 0.0, $222 = 0, $223 = 0.0, $224 = 0.0, $225 = 0, $226 = 0.0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0;
 var $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0, $244 = 0.0, $245 = 0, $246 = 0, $247 = 0.0, $248 = 0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0;
 var $254 = 0.0, $255 = 0, $256 = 0, $257 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0;
 var $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0;
 var $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0;
 var $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, $A$0$lcssa = 0.0, $A$1$lcssa = 0.0, $A$2$lcssa = 0.0, $A$3$lcssa = 0.0, $B$0$lcssa = 0.0, $B$1$lcssa = 0.0, $B$2$lcssa = 0.0, $B$3$lcssa = 0.0, $D$0$lcssa = 0.0, $D$1$lcssa = 0.0, $D$2$lcssa = 0.0, $D$3$lcssa = 0.0, $R$0 = 0.0, $R$1 = 0.0, $R$2 = 0.0;
 var $exitcond = 0, $exitcond71 = 0, $exitcond72 = 0, $exitcond73 = 0, $exitcond74 = 0, $i$048 = 0, $i$1$lcssa = 0, $i$135 = 0, $i$2$lcssa = 0, $i$227 = 0, $i$324 = 0, $i$4$lcssa = 0, $i$415 = 0, $i$5$lcssa = 0, $i$58 = 0, $i$66 = 0, $tN$043 = 0.0, $tX$044 = 0.0, $tXX$045 = 0.0, $tXY$047 = 0.0;
 var $tY$046 = 0.0, $x$049 = 0.0, $x$1$lcssa = 0.0, $x$136 = 0.0, $x$2$lcssa = 0.0, $x$228 = 0.0, $x$325 = 0.0, $x$4$lcssa = 0.0, $x$416 = 0.0, $x$5$lcssa = 0.0, $x$59 = 0.0, $x$67 = 0.0, $y$0 = 0.0, $y$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n << 2;
 $$alloca_mul = $0;
 $1 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
 $$alloca_mul1 = $0;
 $2 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul1)|0)+15)&-16)|0;;
 $$alloca_mul3 = $0;
 $3 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul3)|0)+15)&-16)|0;;
 $$alloca_mul5 = $0;
 $4 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul5)|0)+15)&-16)|0;;
 $$alloca_mul7 = $0;
 $5 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul7)|0)+15)&-16)|0;;
 $6 = +HEAPF32[$f>>2];
 $7 = $6 + $offset;
 $8 = $7 < 1.0;
 $y$0 = $8 ? 1.0 : $7;
 $9 = $y$0 * $y$0;
 $10 = $9 * 0.5;
 $11 = $10 * $y$0;
 HEAPF32[$1>>2] = $10;
 HEAPF32[$2>>2] = $10;
 HEAPF32[$3>>2] = 0.0;
 HEAPF32[$4>>2] = $11;
 HEAPF32[$5>>2] = 0.0;
 $12 = ($n|0)>(1);
 if ($12) {
  $i$048 = 1;$tN$043 = $10;$tX$044 = $10;$tXX$045 = 0.0;$tXY$047 = 0.0;$tY$046 = $11;$x$049 = 1.0;
  while(1) {
   $16 = (($f) + ($i$048<<2)|0);
   $17 = +HEAPF32[$16>>2];
   $18 = $17 + $offset;
   $19 = $18 < 1.0;
   $y$1 = $19 ? 1.0 : $18;
   $20 = $y$1 * $y$1;
   $21 = $20 + $tN$043;
   $22 = $20 * $x$049;
   $23 = $22 + $tX$044;
   $24 = $22 * $x$049;
   $25 = $24 + $tXX$045;
   $26 = $20 * $y$1;
   $27 = $26 + $tY$046;
   $28 = $22 * $y$1;
   $29 = $28 + $tXY$047;
   $30 = (($1) + ($i$048<<2)|0);
   HEAPF32[$30>>2] = $21;
   $31 = (($2) + ($i$048<<2)|0);
   HEAPF32[$31>>2] = $23;
   $32 = (($3) + ($i$048<<2)|0);
   HEAPF32[$32>>2] = $25;
   $33 = (($4) + ($i$048<<2)|0);
   HEAPF32[$33>>2] = $27;
   $34 = (($5) + ($i$048<<2)|0);
   HEAPF32[$34>>2] = $29;
   $35 = (($i$048) + 1)|0;
   $36 = $x$049 + 1.0;
   $exitcond74 = ($35|0)==($n|0);
   if ($exitcond74) {
    break;
   } else {
    $i$048 = $35;$tN$043 = $21;$tX$044 = $23;$tXX$045 = $25;$tXY$047 = $29;$tY$046 = $27;$x$049 = $36;
   }
  }
 }
 $13 = HEAP32[$b>>2]|0;
 $14 = $13 >> 16;
 $15 = ($14|0)>(-1);
 if ($15) {
  $38 = $13;$A$0$lcssa = 0.0;$B$0$lcssa = 0.0;$D$0$lcssa = 1.0;$i$1$lcssa = 0;$x$1$lcssa = 0.0;
 } else {
  $41 = $13;$45 = $14;$i$135 = 0;$x$136 = 0.0;
  while(1) {
   $40 = $41 & 65535;
   $42 = (($1) + ($40<<2)|0);
   $43 = +HEAPF32[$42>>2];
   $44 = (0 - ($45))|0;
   $46 = (($1) + ($44<<2)|0);
   $47 = +HEAPF32[$46>>2];
   $48 = $47 + $43;
   $49 = (($2) + ($40<<2)|0);
   $50 = +HEAPF32[$49>>2];
   $51 = (($2) + ($44<<2)|0);
   $52 = +HEAPF32[$51>>2];
   $53 = $50 - $52;
   $54 = (($3) + ($40<<2)|0);
   $55 = +HEAPF32[$54>>2];
   $56 = (($3) + ($44<<2)|0);
   $57 = +HEAPF32[$56>>2];
   $58 = $57 + $55;
   $59 = (($4) + ($40<<2)|0);
   $60 = +HEAPF32[$59>>2];
   $61 = (($4) + ($44<<2)|0);
   $62 = +HEAPF32[$61>>2];
   $63 = $62 + $60;
   $64 = (($5) + ($40<<2)|0);
   $65 = +HEAPF32[$64>>2];
   $66 = (($5) + ($44<<2)|0);
   $67 = +HEAPF32[$66>>2];
   $68 = $65 - $67;
   $69 = $63 * $58;
   $70 = $68 * $53;
   $71 = $69 - $70;
   $72 = $68 * $48;
   $73 = $63 * $53;
   $74 = $72 - $73;
   $75 = $58 * $48;
   $76 = $53 * $53;
   $77 = $75 - $76;
   $78 = $74 * $x$136;
   $79 = $78 + $71;
   $80 = $79 / $77;
   $81 = $80 < 0.0;
   $R$0 = $81 ? 0.0 : $80;
   $82 = $R$0 - $offset;
   $83 = (($noise) + ($i$135<<2)|0);
   HEAPF32[$83>>2] = $82;
   $84 = (($i$135) + 1)|0;
   $85 = $x$136 + 1.0;
   $86 = (($b) + ($84<<2)|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = $87 >> 16;
   $89 = ($88|0)>(-1);
   if ($89) {
    $38 = $87;$A$0$lcssa = $71;$B$0$lcssa = $74;$D$0$lcssa = $77;$i$1$lcssa = $84;$x$1$lcssa = $85;
    break;
   } else {
    $41 = $87;$45 = $88;$i$135 = $84;$x$136 = $85;
   }
  }
 }
 $37 = $38 & 65535;
 $39 = ($37|0)<($n|0);
 if ($39) {
  $$in = $38;$93 = $37;$i$227 = $i$1$lcssa;$x$228 = $x$1$lcssa;
  while(1) {
   $91 = $$in >> 16;
   $92 = (($1) + ($93<<2)|0);
   $94 = +HEAPF32[$92>>2];
   $95 = (($1) + ($91<<2)|0);
   $96 = +HEAPF32[$95>>2];
   $97 = $94 - $96;
   $98 = (($2) + ($93<<2)|0);
   $99 = +HEAPF32[$98>>2];
   $100 = (($2) + ($91<<2)|0);
   $101 = +HEAPF32[$100>>2];
   $102 = $99 - $101;
   $103 = (($3) + ($93<<2)|0);
   $104 = +HEAPF32[$103>>2];
   $105 = (($3) + ($91<<2)|0);
   $106 = +HEAPF32[$105>>2];
   $107 = $104 - $106;
   $108 = (($4) + ($93<<2)|0);
   $109 = +HEAPF32[$108>>2];
   $110 = (($4) + ($91<<2)|0);
   $111 = +HEAPF32[$110>>2];
   $112 = $109 - $111;
   $113 = (($5) + ($93<<2)|0);
   $114 = +HEAPF32[$113>>2];
   $115 = (($5) + ($91<<2)|0);
   $116 = +HEAPF32[$115>>2];
   $117 = $114 - $116;
   $118 = $112 * $107;
   $119 = $117 * $102;
   $120 = $118 - $119;
   $121 = $117 * $97;
   $122 = $112 * $102;
   $123 = $121 - $122;
   $124 = $107 * $97;
   $125 = $102 * $102;
   $126 = $124 - $125;
   $127 = $123 * $x$228;
   $128 = $127 + $120;
   $129 = $128 / $126;
   $130 = $129 < 0.0;
   $R$1 = $130 ? 0.0 : $129;
   $131 = $R$1 - $offset;
   $132 = (($noise) + ($i$227<<2)|0);
   HEAPF32[$132>>2] = $131;
   $133 = (($i$227) + 1)|0;
   $134 = $x$228 + 1.0;
   $135 = (($b) + ($133<<2)|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = $136 & 65535;
   $138 = ($137|0)<($n|0);
   if ($138) {
    $$in = $136;$93 = $137;$i$227 = $133;$x$228 = $134;
   } else {
    $A$1$lcssa = $120;$B$1$lcssa = $123;$D$1$lcssa = $126;$i$2$lcssa = $133;$x$2$lcssa = $134;
    break;
   }
  }
 } else {
  $A$1$lcssa = $A$0$lcssa;$B$1$lcssa = $B$0$lcssa;$D$1$lcssa = $D$0$lcssa;$i$2$lcssa = $i$1$lcssa;$x$2$lcssa = $x$1$lcssa;
 }
 $90 = ($i$2$lcssa|0)<($n|0);
 if ($90) {
  $i$324 = $i$2$lcssa;$x$325 = $x$2$lcssa;
  while(1) {
   $139 = $x$325 * $B$1$lcssa;
   $140 = $139 + $A$1$lcssa;
   $141 = $140 / $D$1$lcssa;
   $142 = $141 < 0.0;
   $R$2 = $142 ? 0.0 : $141;
   $143 = $R$2 - $offset;
   $144 = (($noise) + ($i$324<<2)|0);
   HEAPF32[$144>>2] = $143;
   $145 = (($i$324) + 1)|0;
   $146 = $x$325 + 1.0;
   $exitcond73 = ($145|0)==($n|0);
   if ($exitcond73) {
    break;
   } else {
    $i$324 = $145;$x$325 = $146;
   }
  }
 }
 $147 = ($fixed|0)<(1);
 if ($147) {
  STACKTOP = sp;return;
 }
 $148 = (($fixed|0) / 2)&-1;
 $149 = (($148) - ($fixed))|0;
 $150 = ($149|0)>(-1);
 if ($150) {
  $A$2$lcssa = $A$1$lcssa;$B$2$lcssa = $B$1$lcssa;$D$2$lcssa = $D$1$lcssa;$i$4$lcssa = 0;$x$4$lcssa = 0.0;
 } else {
  $151 = (($fixed) - ($148))|0;
  $156 = $148;$159 = $149;$i$415 = 0;$x$416 = 0.0;
  while(1) {
   $155 = (($1) + ($156<<2)|0);
   $157 = +HEAPF32[$155>>2];
   $158 = (0 - ($159))|0;
   $160 = (($1) + ($158<<2)|0);
   $161 = +HEAPF32[$160>>2];
   $162 = $161 + $157;
   $163 = (($2) + ($156<<2)|0);
   $164 = +HEAPF32[$163>>2];
   $165 = (($2) + ($158<<2)|0);
   $166 = +HEAPF32[$165>>2];
   $167 = $164 - $166;
   $168 = (($3) + ($156<<2)|0);
   $169 = +HEAPF32[$168>>2];
   $170 = (($3) + ($158<<2)|0);
   $171 = +HEAPF32[$170>>2];
   $172 = $171 + $169;
   $173 = (($4) + ($156<<2)|0);
   $174 = +HEAPF32[$173>>2];
   $175 = (($4) + ($158<<2)|0);
   $176 = +HEAPF32[$175>>2];
   $177 = $176 + $174;
   $178 = (($5) + ($156<<2)|0);
   $179 = +HEAPF32[$178>>2];
   $180 = (($5) + ($158<<2)|0);
   $181 = +HEAPF32[$180>>2];
   $182 = $179 - $181;
   $183 = $177 * $172;
   $184 = $182 * $167;
   $185 = $183 - $184;
   $186 = $182 * $162;
   $187 = $177 * $167;
   $188 = $186 - $187;
   $189 = $172 * $162;
   $190 = $167 * $167;
   $191 = $189 - $190;
   $192 = $188 * $x$416;
   $193 = $192 + $185;
   $194 = $193 / $191;
   $195 = $194 - $offset;
   $196 = (($noise) + ($i$415<<2)|0);
   $197 = +HEAPF32[$196>>2];
   $198 = $195 < $197;
   if ($198) {
    HEAPF32[$196>>2] = $195;
   }
   $199 = (($i$415) + 1)|0;
   $200 = $x$416 + 1.0;
   $201 = (($148) + ($199))|0;
   $202 = (($201) - ($fixed))|0;
   $exitcond72 = ($199|0)==($151|0);
   if ($exitcond72) {
    $A$2$lcssa = $185;$B$2$lcssa = $188;$D$2$lcssa = $191;$i$4$lcssa = $151;$x$4$lcssa = $200;
    break;
   } else {
    $156 = $201;$159 = $202;$i$415 = $199;$x$416 = $200;
   }
  }
 }
 $152 = (($i$4$lcssa) + ($148))|0;
 $153 = ($152|0)<($n|0);
 if ($153) {
  $154 = (($n) - ($148))|0;
  $$pn = $152;$i$58 = $i$4$lcssa;$x$59 = $x$4$lcssa;
  while(1) {
   $204 = (($$pn) - ($fixed))|0;
   $205 = (($1) + ($$pn<<2)|0);
   $206 = +HEAPF32[$205>>2];
   $207 = (($1) + ($204<<2)|0);
   $208 = +HEAPF32[$207>>2];
   $209 = $206 - $208;
   $210 = (($2) + ($$pn<<2)|0);
   $211 = +HEAPF32[$210>>2];
   $212 = (($2) + ($204<<2)|0);
   $213 = +HEAPF32[$212>>2];
   $214 = $211 - $213;
   $215 = (($3) + ($$pn<<2)|0);
   $216 = +HEAPF32[$215>>2];
   $217 = (($3) + ($204<<2)|0);
   $218 = +HEAPF32[$217>>2];
   $219 = $216 - $218;
   $220 = (($4) + ($$pn<<2)|0);
   $221 = +HEAPF32[$220>>2];
   $222 = (($4) + ($204<<2)|0);
   $223 = +HEAPF32[$222>>2];
   $224 = $221 - $223;
   $225 = (($5) + ($$pn<<2)|0);
   $226 = +HEAPF32[$225>>2];
   $227 = (($5) + ($204<<2)|0);
   $228 = +HEAPF32[$227>>2];
   $229 = $226 - $228;
   $230 = $224 * $219;
   $231 = $229 * $214;
   $232 = $230 - $231;
   $233 = $229 * $209;
   $234 = $224 * $214;
   $235 = $233 - $234;
   $236 = $219 * $209;
   $237 = $214 * $214;
   $238 = $236 - $237;
   $239 = $235 * $x$59;
   $240 = $239 + $232;
   $241 = $240 / $238;
   $242 = $241 - $offset;
   $243 = (($noise) + ($i$58<<2)|0);
   $244 = +HEAPF32[$243>>2];
   $245 = $242 < $244;
   if ($245) {
    HEAPF32[$243>>2] = $242;
   }
   $246 = (($i$58) + 1)|0;
   $247 = $x$59 + 1.0;
   $248 = (($246) + ($148))|0;
   $exitcond71 = ($246|0)==($154|0);
   if ($exitcond71) {
    $A$3$lcssa = $232;$B$3$lcssa = $235;$D$3$lcssa = $238;$i$5$lcssa = $154;$x$5$lcssa = $247;
    break;
   } else {
    $$pn = $248;$i$58 = $246;$x$59 = $247;
   }
  }
 } else {
  $A$3$lcssa = $A$2$lcssa;$B$3$lcssa = $B$2$lcssa;$D$3$lcssa = $D$2$lcssa;$i$5$lcssa = $i$4$lcssa;$x$5$lcssa = $x$4$lcssa;
 }
 $203 = ($i$5$lcssa|0)<($n|0);
 if ($203) {
  $i$66 = $i$5$lcssa;$x$67 = $x$5$lcssa;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $249 = $x$67 * $B$3$lcssa;
  $250 = $249 + $A$3$lcssa;
  $251 = $250 / $D$3$lcssa;
  $252 = $251 - $offset;
  $253 = (($noise) + ($i$66<<2)|0);
  $254 = +HEAPF32[$253>>2];
  $255 = $252 < $254;
  if ($255) {
   HEAPF32[$253>>2] = $252;
  }
  $256 = (($i$66) + 1)|0;
  $257 = $x$67 + 1.0;
  $exitcond = ($256|0)==($n|0);
  if ($exitcond) {
   break;
  } else {
   $i$66 = $256;$x$67 = $257;
  }
 }
 STACKTOP = sp;return;
}
function _seed_chase($seeds,$linesper,$n) {
 $seeds = $seeds|0;
 $linesper = $linesper|0;
 $n = $n|0;
 var $$alloca_mul = 0, $$alloca_mul1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $endpos$0 = 0, $exitcond = 0;
 var $exitcond18 = 0, $exitcond19 = 0, $i$012 = 0, $i$17 = 0, $n$endpos$0 = 0, $or$cond = 0, $pos$06 = 0, $pos$1$lcssa = 0, $pos$15 = 0, $stack$011 = 0, $stack$1 = 0, $stack$1$lcssa = 0, $stack$1$lcssa23 = 0, $stack$2 = 0, $stack$2$in = 0, $stack$2$in$lcssa = 0, $stack$2$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n << 2;
 $$alloca_mul = $0;
 $1 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
 $$alloca_mul1 = $0;
 $2 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul1)|0)+15)&-16)|0;;
 $3 = ($n|0)>(0);
 if ($3) {
  $i$012 = 0;$stack$011 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $6 = ($stack$011|0)<(2);
  do {
   if ($6) {
    $9 = (($1) + ($stack$011<<2)|0);
    HEAP32[$9>>2] = $i$012;
    $10 = (($seeds) + ($i$012<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($2) + ($stack$011<<2)|0);
    HEAP32[$12>>2] = $11;
    $stack$2$in = $stack$011;
   } else {
    $7 = (($seeds) + ($i$012<<2)|0);
    $8 = +HEAPF32[$7>>2];
    $stack$1 = $stack$011;
    while(1) {
     $13 = (($stack$1) + -1)|0;
     $14 = (($2) + ($13<<2)|0);
     $15 = +HEAPF32[$14>>2];
     $16 = $8 < $15;
     if ($16) {
      $stack$1$lcssa = $stack$1;
      label = 8;
      break;
     }
     $19 = (($1) + ($13<<2)|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (($20) + ($linesper))|0;
     $22 = ($i$012|0)<($21|0);
     $23 = ($stack$1|0)>(1);
     $or$cond = $23 & $22;
     if (!($or$cond)) {
      $stack$1$lcssa23 = $stack$1;
      label = 12;
      break;
     }
     $24 = (($stack$1) + -2)|0;
     $25 = (($2) + ($24<<2)|0);
     $26 = +HEAPF32[$25>>2];
     $27 = !($15 <= $26);
     if ($27) {
      $stack$1$lcssa23 = $stack$1;
      label = 12;
      break;
     }
     $28 = (($1) + ($24<<2)|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (($29) + ($linesper))|0;
     $31 = ($i$012|0)<($30|0);
     if ($31) {
      $stack$1 = $13;
     } else {
      $stack$1$lcssa23 = $stack$1;
      label = 12;
      break;
     }
    }
    if ((label|0) == 8) {
     label = 0;
     $17 = (($1) + ($stack$1$lcssa<<2)|0);
     HEAP32[$17>>2] = $i$012;
     $18 = (($2) + ($stack$1$lcssa<<2)|0);
     HEAPF32[$18>>2] = $8;
     $stack$2$in = $stack$1$lcssa;
     break;
    }
    else if ((label|0) == 12) {
     label = 0;
     $32 = (($1) + ($stack$1$lcssa23<<2)|0);
     HEAP32[$32>>2] = $i$012;
     $33 = (($2) + ($stack$1$lcssa23<<2)|0);
     HEAPF32[$33>>2] = $8;
     $stack$2$in = $stack$1$lcssa23;
     break;
    }
   }
  } while(0);
  $stack$2 = (($stack$2$in) + 1)|0;
  $34 = (($i$012) + 1)|0;
  $exitcond19 = ($34|0)==($n|0);
  if ($exitcond19) {
   $stack$2$in$lcssa = $stack$2$in;$stack$2$lcssa = $stack$2;
   break;
  } else {
   $i$012 = $34;$stack$011 = $stack$2;
  }
 }
 $4 = ($stack$2$in$lcssa|0)>(-1);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = (($linesper) + 1)|0;
 $i$17 = 0;$pos$06 = 0;
 while(1) {
  $35 = ($i$17|0)<($stack$2$in$lcssa|0);
  if ($35) {
   $36 = (($i$17) + 1)|0;
   $37 = (($2) + ($36<<2)|0);
   $38 = +HEAPF32[$37>>2];
   $39 = (($2) + ($i$17<<2)|0);
   $40 = +HEAPF32[$39>>2];
   $41 = $38 > $40;
   if ($41) {
    $42 = (($1) + ($36<<2)|0);
    $43 = HEAP32[$42>>2]|0;
    $endpos$0 = $43;
   } else {
    label = 17;
   }
  } else {
   label = 17;
  }
  if ((label|0) == 17) {
   label = 0;
   $44 = (($1) + ($i$17<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($5) + ($45))|0;
   $endpos$0 = $46;
  }
  $47 = ($endpos$0|0)>($n|0);
  $n$endpos$0 = $47 ? $n : $endpos$0;
  $48 = ($pos$06|0)<($n$endpos$0|0);
  if ($48) {
   $49 = (($2) + ($i$17<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($endpos$0|0)<($n|0);
   $52 = $51 ? $endpos$0 : $n;
   $pos$15 = $pos$06;
   while(1) {
    $53 = (($seeds) + ($pos$15<<2)|0);
    HEAP32[$53>>2] = $50;
    $54 = (($pos$15) + 1)|0;
    $exitcond = ($54|0)==($52|0);
    if ($exitcond) {
     $pos$1$lcssa = $52;
     break;
    } else {
     $pos$15 = $54;
    }
   }
  } else {
   $pos$1$lcssa = $pos$06;
  }
  $55 = (($i$17) + 1)|0;
  $exitcond18 = ($55|0)==($stack$2$lcssa|0);
  if ($exitcond18) {
   break;
  } else {
   $i$17 = $55;$pos$06 = $pos$1$lcssa;
  }
 }
 STACKTOP = sp;return;
}
function _noise_normalize($p$0$1$val,$limit,$r,$q,$f,$flags,$i,$n,$out) {
 $p$0$1$val = $p$0$1$val|0;
 $limit = $limit|0;
 $r = $r|0;
 $q = $q|0;
 $f = $f|0;
 $flags = $flags|0;
 $i = $i|0;
 $n = $n|0;
 $out = $out|0;
 var $$06 = 0.0, $$1 = 0.0, $$1$lcssa = 0.0, $$22 = 0.0, $$3 = 0.0, $$4 = 0.0, $$alloca_mul = 0, $$sink = 0, $$sink$in = 0.0, $$sink17 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0;
 var $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $9 = 0, $count$03 = 0, $count$1 = 0, $count$1$lcssa = 0, $exitcond = 0;
 var $exitcond15 = 0, $exitcond16 = 0, $j$0$lcssa = 0, $j$010 = 0, $j$14 = 0, $j$21 = 0, $n$ = 0, $or$cond = 0, $or$cond18 = 0, $storemerge = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n << 2;
 $$alloca_mul = $0;
 $1 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
 $2 = ((($p$0$1$val)) + 500|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $8 = $n;
 } else {
  $5 = ((($p$0$1$val)) + 504|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) - ($i))|0;
  $8 = $7;
 }
 $9 = ($8|0)>($n|0);
 $n$ = $9 ? $n : $8;
 $10 = ($n$|0)>(0);
 if ($10) {
  $11 = ($flags|0)==(0|0);
  $12 = ($8|0)<($n|0);
  $13 = $12 ? $8 : $n;
  $j$010 = 0;
  while(1) {
   if ($11) {
    label = 9;
   } else {
    $17 = (($flags) + ($j$010<<2)|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)==(0);
    if ($19) {
     label = 9;
    }
   }
   do {
    if ((label|0) == 9) {
     label = 0;
     $20 = (($q) + ($j$010<<2)|0);
     $21 = +HEAPF32[$20>>2];
     $22 = (($f) + ($j$010<<2)|0);
     $23 = +HEAPF32[$22>>2];
     $24 = $21 / $23;
     $25 = (($r) + ($j$010<<2)|0);
     $26 = +HEAPF32[$25>>2];
     $27 = $26 < 0.0;
     $28 = $24;
     $29 = (+Math_sqrt((+$28)));
     $30 = (+_rint($29));
     if ($27) {
      $31 = -$30;
      $32 = (~~(($31)));
      $33 = (($out) + ($j$010<<2)|0);
      HEAP32[$33>>2] = $32;
      break;
     } else {
      $34 = (~~(($30)));
      $35 = (($out) + ($j$010<<2)|0);
      HEAP32[$35>>2] = $34;
      break;
     }
    }
   } while(0);
   $36 = (($j$010) + 1)|0;
   $exitcond16 = ($36|0)==($13|0);
   if ($exitcond16) {
    $j$0$lcssa = $13;
    break;
   } else {
    $j$010 = $36;
   }
  }
 } else {
  $j$0$lcssa = 0;
 }
 $14 = ($j$0$lcssa|0)<($n|0);
 if (!($14)) {
  $$4 = 0.0;
  STACKTOP = sp;return (+$$4);
 }
 $15 = ($flags|0)!=(0|0);
 $16 = (($limit) - ($i))|0;
 $$06 = 0.0;$count$03 = 0;$j$14 = $j$0$lcssa;
 while(1) {
  if ($15) {
   $37 = (($flags) + ($j$14<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)==(0);
   if ($39) {
    label = 15;
   } else {
    $$1 = $$06;$count$1 = $count$03;
   }
  } else {
   label = 15;
  }
  do {
   if ((label|0) == 15) {
    label = 0;
    $40 = (($q) + ($j$14<<2)|0);
    $41 = +HEAPF32[$40>>2];
    $42 = (($f) + ($j$14<<2)|0);
    $43 = +HEAPF32[$42>>2];
    $44 = $41 / $43;
    $45 = !($44 < 0.25);
    $46 = ($j$14|0)<($16|0);
    $or$cond = $15 & $46;
    $or$cond18 = $45 | $or$cond;
    if ($or$cond18) {
     $50 = (($r) + ($j$14<<2)|0);
     $51 = +HEAPF32[$50>>2];
     $52 = $51 < 0.0;
     $53 = $44;
     $54 = (+Math_sqrt((+$53)));
     $55 = (+_rint($54));
     $56 = -$55;
     $$sink$in = $52 ? $56 : $55;
     $$sink = (~~(($$sink$in)));
     $57 = (($out) + ($j$14<<2)|0);
     HEAP32[$57>>2] = $$sink;
     $58 = Math_imul($$sink, $$sink)|0;
     $59 = (+($58|0));
     $60 = +HEAPF32[$42>>2];
     $61 = $59 * $60;
     HEAPF32[$40>>2] = $61;
     $$1 = $$06;$count$1 = $count$03;
     break;
    } else {
     $47 = $44 + $$06;
     $48 = (($count$03) + 1)|0;
     $49 = (($1) + ($count$03<<2)|0);
     HEAP32[$49>>2] = $40;
     $$1 = $47;$count$1 = $48;
     break;
    }
   }
  } while(0);
  $62 = (($j$14) + 1)|0;
  $exitcond15 = ($62|0)==($n|0);
  if ($exitcond15) {
   $$1$lcssa = $$1;$count$1$lcssa = $count$1;
   break;
  } else {
   $$06 = $$1;$count$03 = $count$1;$j$14 = $62;
  }
 }
 $63 = ($count$1$lcssa|0)==(0);
 if ($63) {
  $$4 = $$1$lcssa;
  STACKTOP = sp;return (+$$4);
 }
 _qsort($1,$count$1$lcssa,4,9);
 $64 = ($count$1$lcssa|0)>(0);
 if (!($64)) {
  $$4 = $$1$lcssa;
  STACKTOP = sp;return (+$$4);
 }
 $65 = $q;
 $66 = ((($p$0$1$val)) + 512|0);
 $67 = +HEAPF64[$66>>3];
 $$22 = $$1$lcssa;$j$21 = 0;
 while(1) {
  $68 = (($1) + ($j$21<<2)|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $69;
  $71 = (($70) - ($65))|0;
  $72 = $71 >> 2;
  $73 = $$22;
  $74 = !($73 >= $67);
  if ($74) {
   $$3 = $$22;$$sink17 = 0;$storemerge = 0.0;
  } else {
   $75 = (($r) + ($72<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $76 & -2147483648;
   $78 = $77 | 1065353216;
   $79 = (HEAP32[tempDoublePtr>>2]=$78,+HEAPF32[tempDoublePtr>>2]);
   $80 = (~~(($79)));
   $81 = $$22 + -1.0;
   $82 = (($f) + ($72<<2)|0);
   $83 = +HEAPF32[$82>>2];
   $$3 = $81;$$sink17 = $80;$storemerge = $83;
  }
  $84 = (($out) + ($72<<2)|0);
  HEAP32[$84>>2] = $$sink17;
  HEAPF32[$69>>2] = $storemerge;
  $85 = (($j$21) + 1)|0;
  $exitcond = ($85|0)==($count$1$lcssa|0);
  if ($exitcond) {
   $$4 = $$3;
   break;
  } else {
   $$22 = $$3;$j$21 = $85;
  }
 }
 STACKTOP = sp;return (+$$4);
}
function _apsort($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = +HEAPF32[$0>>2];
 $2 = HEAP32[$b>>2]|0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1 < $3;
 $5 = $4&1;
 $6 = $1 > $3;
 $7 = $6&1;
 $8 = (($5) - ($7))|0;
 return ($8|0);
}
function _res0_free_info($i) {
 $i = $i|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($i|0)==(0|0);
 if (!($0)) {
  _free($i);
 }
 return;
}
function _res0_free_look($i) {
 $i = $i|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j$03 = 0, $j$12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($i|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($i)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 $4 = ((($i)) + 20|0);
 if ($3) {
  $24 = $2;$j$03 = 0;
  while(1) {
   $5 = HEAP32[$4>>2]|0;
   $6 = (($5) + ($j$03<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $11 = $24;
   } else {
    _free($7);
    $$pre = HEAP32[$1>>2]|0;
    $11 = $$pre;
   }
   $9 = (($j$03) + 1)|0;
   $10 = ($9|0)<($11|0);
   if ($10) {
    $24 = $11;$j$03 = $9;
   } else {
    break;
   }
  }
 }
 $12 = HEAP32[$4>>2]|0;
 _free($12);
 $13 = ((($i)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)>(0);
 $16 = ((($i)) + 28|0);
 if ($15) {
  $j$12 = 0;
  while(1) {
   $17 = HEAP32[$16>>2]|0;
   $18 = (($17) + ($j$12<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   _free($19);
   $20 = (($j$12) + 1)|0;
   $21 = HEAP32[$13>>2]|0;
   $22 = ($20|0)<($21|0);
   if ($22) {
    $j$12 = $20;
   } else {
    break;
   }
  }
 }
 $23 = HEAP32[$16>>2]|0;
 _free($23);
 _free($i);
 return;
}
function _res0_pack($vr,$opb) {
 $vr = $vr|0;
 $opb = $opb|0;
 var $$01$i = 0, $$lcssa10 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $acc$03 = 0, $exitcond = 0;
 var $j$02 = 0, $j$11 = 0, $ret$0$lcssa$i = 0, $ret$02$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vr>>2]|0;
 _oggpack_write($opb,$0,24);
 $1 = ((($vr)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 _oggpack_write($opb,$2,24);
 $3 = ((($vr)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + -1)|0;
 _oggpack_write($opb,$5,24);
 $6 = ((($vr)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -1)|0;
 _oggpack_write($opb,$8,6);
 $9 = ((($vr)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 _oggpack_write($opb,$10,8);
 $11 = HEAP32[$6>>2]|0;
 $12 = ($11|0)>(0);
 if (!($12)) {
  return;
 }
 $13 = ((($vr)) + 24|0);
 $acc$03 = 0;$j$02 = 0;
 while(1) {
  $16 = (($13) + ($j$02<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_ov_ilog($17)|0);
  $19 = ($18|0)>(3);
  $20 = HEAP32[$16>>2]|0;
  if ($19) {
   _oggpack_write($opb,$20,3);
   _oggpack_write($opb,1,1);
   $21 = HEAP32[$16>>2]|0;
   $22 = $21 >> 3;
   _oggpack_write($opb,$22,5);
  } else {
   _oggpack_write($opb,$20,4);
  }
  $23 = HEAP32[$16>>2]|0;
  $24 = ($23|0)==(0);
  if ($24) {
   $ret$0$lcssa$i = 0;
  } else {
   $$01$i = $23;$ret$02$i = 0;
   while(1) {
    $25 = $$01$i & 1;
    $26 = (($25) + ($ret$02$i))|0;
    $27 = $$01$i >>> 1;
    $28 = ($27|0)==(0);
    if ($28) {
     $ret$0$lcssa$i = $26;
     break;
    } else {
     $$01$i = $27;$ret$02$i = $26;
    }
   }
  }
  $29 = (($ret$0$lcssa$i) + ($acc$03))|0;
  $30 = (($j$02) + 1)|0;
  $31 = HEAP32[$6>>2]|0;
  $32 = ($30|0)<($31|0);
  if ($32) {
   $acc$03 = $29;$j$02 = $30;
  } else {
   $$lcssa10 = $29;
   break;
  }
 }
 $14 = ($$lcssa10|0)>(0);
 if (!($14)) {
  return;
 }
 $15 = ((($vr)) + 280|0);
 $j$11 = 0;
 while(1) {
  $33 = (($15) + ($j$11<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  _oggpack_write($opb,$34,8);
  $35 = (($j$11) + 1)|0;
  $exitcond = ($35|0)==($$lcssa10|0);
  if ($exitcond) {
   break;
  } else {
   $j$11 = $35;
  }
 }
 return;
}
function _res0_unpack($vi,$opb) {
 $vi = $vi|0;
 $opb = $opb|0;
 var $$0 = 0, $$01$i = 0, $$lcssa36 = 0, $$lcssa37 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $acc$0$lcssa23 = 0, $acc$017 = 0, $cascade$0 = 0, $dim$09 = 0, $j$018 = 0;
 var $j$114 = 0, $j$211 = 0, $partvals$010 = 0, $ret$0$lcssa$i = 0, $ret$02$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,2840)|0);
 $1 = ((($vi)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_oggpack_read($opb,24)|0);
 HEAP32[$0>>2] = $3;
 $4 = (_oggpack_read($opb,24)|0);
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = $4;
 $6 = (_oggpack_read($opb,24)|0);
 $7 = (($6) + 1)|0;
 $8 = ((($0)) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = (_oggpack_read($opb,6)|0);
 $10 = (($9) + 1)|0;
 $11 = ((($0)) + 12|0);
 HEAP32[$11>>2] = $10;
 $12 = (_oggpack_read($opb,8)|0);
 $13 = ((($0)) + 20|0);
 HEAP32[$13>>2] = $12;
 $14 = ($12|0)<(0);
 L1: do {
  if ($14) {
   label = 26;
  } else {
   $15 = ($9|0)>(-1);
   if ($15) {
    $16 = ((($0)) + 24|0);
    $acc$017 = 0;$j$018 = 0;
    while(1) {
     $19 = (_oggpack_read($opb,3)|0);
     $20 = (_oggpack_read($opb,1)|0);
     $21 = ($20|0)<(0);
     if ($21) {
      label = 26;
      break L1;
     }
     $22 = ($20|0)==(0);
     if ($22) {
      $cascade$0 = $19;
     } else {
      $23 = (_oggpack_read($opb,5)|0);
      $24 = ($23|0)<(0);
      if ($24) {
       label = 26;
       break L1;
      }
      $25 = $23 << 3;
      $26 = $25 | $19;
      $cascade$0 = $26;
     }
     $27 = (($16) + ($j$018<<2)|0);
     HEAP32[$27>>2] = $cascade$0;
     $28 = ($cascade$0|0)==(0);
     if ($28) {
      $ret$0$lcssa$i = 0;
     } else {
      $$01$i = $cascade$0;$ret$02$i = 0;
      while(1) {
       $29 = $$01$i & 1;
       $30 = (($29) + ($ret$02$i))|0;
       $31 = $$01$i >>> 1;
       $32 = ($31|0)==(0);
       if ($32) {
        $ret$0$lcssa$i = $30;
        break;
       } else {
        $$01$i = $31;$ret$02$i = $30;
       }
      }
     }
     $33 = (($ret$0$lcssa$i) + ($acc$017))|0;
     $34 = (($j$018) + 1)|0;
     $35 = HEAP32[$11>>2]|0;
     $36 = ($34|0)<($35|0);
     if ($36) {
      $acc$017 = $33;$j$018 = $34;
     } else {
      $$lcssa37 = $33;
      break;
     }
    }
    $17 = ($$lcssa37|0)>(0);
    if ($17) {
     $18 = ((($0)) + 280|0);
     $j$114 = 0;
     while(1) {
      $37 = (_oggpack_read($opb,8)|0);
      $38 = ($37|0)<(0);
      if ($38) {
       break L1;
      }
      $39 = (($18) + ($j$114<<2)|0);
      HEAP32[$39>>2] = $37;
      $40 = (($j$114) + 1)|0;
      $41 = ($40|0)<($$lcssa37|0);
      if ($41) {
       $j$114 = $40;
      } else {
       $70 = $17;$acc$0$lcssa23 = $$lcssa37;
       break;
      }
     }
    } else {
     $70 = 0;$acc$0$lcssa23 = $$lcssa37;
    }
   } else {
    $70 = 0;$acc$0$lcssa23 = 0;
   }
   $42 = HEAP32[$13>>2]|0;
   $43 = ((($2)) + 24|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($42|0)<($44|0);
   if ($45) {
    if ($70) {
     $46 = ((($0)) + 280|0);
     $j$211 = 0;
     while(1) {
      $49 = (($46) + ($j$211<<2)|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = ($50|0)<($44|0);
      if (!($51)) {
       break L1;
      }
      $52 = (((($2)) + 1824|0) + ($50<<2)|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = ((($53)) + 12|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = ($55|0)==(0);
      $47 = (($j$211) + 1)|0;
      if ($56) {
       break L1;
      }
      $48 = ($47|0)<($acc$0$lcssa23|0);
      if ($48) {
       $j$211 = $47;
      } else {
       break;
      }
     }
    }
    $57 = (((($2)) + 1824|0) + ($42<<2)|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ((($58)) + 4|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = HEAP32[$58>>2]|0;
    $62 = ($61|0)<(1);
    if (!($62)) {
     $63 = HEAP32[$11>>2]|0;
     $dim$09 = $61;$partvals$010 = 1;
     while(1) {
      $66 = Math_imul($63, $partvals$010)|0;
      $67 = ($66|0)>($60|0);
      if ($67) {
       break L1;
      }
      $64 = (($dim$09) + -1)|0;
      $65 = ($dim$09|0)>(1);
      if ($65) {
       $dim$09 = $64;$partvals$010 = $66;
      } else {
       $$lcssa36 = $66;
       break;
      }
     }
     $68 = ((($0)) + 16|0);
     HEAP32[$68>>2] = $$lcssa36;
     $$0 = $0;
     return ($$0|0);
    }
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $69 = ($0|0)==(0|0);
  if ($69) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 _free($0);
 $$0 = 0;
 return ($$0|0);
}
function _res0_look($vd,$vr) {
 $vd = $vd|0;
 $vr = $vr|0;
 var $$lcssa = 0, $$maxstage$0 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $acc$016 = 0, $acc$112 = 0, $acc$2 = 0, $acc$3 = 0;
 var $exitcond = 0, $exitcond23 = 0, $exitcond24 = 0, $j$018 = 0, $j$18 = 0, $j$24 = 0, $j$24$us = 0, $k$013 = 0, $k$11$us = 0, $maxstage$0$lcssa = 0, $maxstage$017 = 0, $maxstage$2 = 0, $mult$03$us = 0, $val$02$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,44)|0);
 $1 = ((($vd)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$0>>2] = $vr;
 $5 = ((($vr)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($4)) + 2848|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 12|0);
 HEAP32[$10>>2] = $9;
 $11 = $9;
 $12 = ((($vr)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + (($13*56)|0)|0);
 $15 = ((($0)) + 16|0);
 HEAP32[$15>>2] = $14;
 $16 = HEAP32[$14>>2]|0;
 $17 = (_calloc($6,4)|0);
 $18 = ((($0)) + 20|0);
 HEAP32[$18>>2] = $17;
 $19 = ($6|0)>(0);
 if ($19) {
  $20 = ((($vr)) + 24|0);
  $21 = ((($vr)) + 280|0);
  $acc$016 = 0;$j$018 = 0;$maxstage$017 = 0;
  while(1) {
   $22 = (($20) + ($j$018<<2)|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (_ov_ilog($23)|0);
   $25 = ($24|0)==(0);
   if ($25) {
    $acc$3 = $acc$016;$maxstage$2 = $maxstage$017;
   } else {
    $26 = ($24|0)>($maxstage$017|0);
    $$maxstage$0 = $26 ? $24 : $maxstage$017;
    $27 = (_calloc($24,4)|0);
    $28 = (($17) + ($j$018<<2)|0);
    HEAP32[$28>>2] = $27;
    $29 = ($24|0)>(0);
    if ($29) {
     $30 = HEAP32[$22>>2]|0;
     $31 = (($17) + ($j$018<<2)|0);
     $acc$112 = $acc$016;$k$013 = 0;
     while(1) {
      $32 = 1 << $k$013;
      $33 = $30 & $32;
      $34 = ($33|0)==(0);
      if ($34) {
       $acc$2 = $acc$112;
      } else {
       $35 = HEAP32[$8>>2]|0;
       $36 = (($acc$112) + 1)|0;
       $37 = (($21) + ($acc$112<<2)|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = (($35) + (($38*56)|0)|0);
       $40 = HEAP32[$31>>2]|0;
       $41 = (($40) + ($k$013<<2)|0);
       HEAP32[$41>>2] = $39;
       $acc$2 = $36;
      }
      $42 = (($k$013) + 1)|0;
      $exitcond23 = ($42|0)==($24|0);
      if ($exitcond23) {
       $acc$3 = $acc$2;$maxstage$2 = $$maxstage$0;
       break;
      } else {
       $acc$112 = $acc$2;$k$013 = $42;
      }
     }
    } else {
     $acc$3 = $acc$016;$maxstage$2 = $$maxstage$0;
    }
   }
   $43 = (($j$018) + 1)|0;
   $44 = ($43|0)<($6|0);
   if ($44) {
    $acc$016 = $acc$3;$j$018 = $43;$maxstage$017 = $maxstage$2;
   } else {
    $maxstage$0$lcssa = $maxstage$2;
    break;
   }
  }
 } else {
  $maxstage$0$lcssa = 0;
 }
 $45 = ((($0)) + 24|0);
 HEAP32[$45>>2] = 1;
 $46 = ($16|0)>(0);
 if ($46) {
  $48 = 1;$j$18 = 0;
  while(1) {
   $47 = Math_imul($48, $6)|0;
   $49 = (($j$18) + 1)|0;
   $exitcond = ($49|0)==($16|0);
   if ($exitcond) {
    $$lcssa = $47;
    break;
   } else {
    $48 = $47;$j$18 = $49;
   }
  }
  HEAP32[$45>>2] = $$lcssa;
  $52 = $$lcssa;
 } else {
  $52 = 1;
 }
 $50 = ((($0)) + 8|0);
 HEAP32[$50>>2] = $maxstage$0$lcssa;
 $51 = $52 << 2;
 $53 = (_malloc($51)|0);
 $54 = ((($0)) + 28|0);
 HEAP32[$54>>2] = $53;
 $55 = ($52|0)>(0);
 if (!($55)) {
  return ($0|0);
 }
 $56 = $16 << 2;
 if (!($46)) {
  $j$24 = 0;
  while(1) {
   $69 = (_malloc($56)|0);
   $70 = (($53) + ($j$24<<2)|0);
   HEAP32[$70>>2] = $69;
   $71 = (($j$24) + 1)|0;
   $72 = ($71|0)<($52|0);
   if ($72) {
    $j$24 = $71;
   } else {
    break;
   }
  }
  return ($0|0);
 }
 $57 = HEAP32[$54>>2]|0;
 $j$24$us = 0;
 while(1) {
  $66 = (_malloc($56)|0);
  $67 = (($53) + ($j$24$us<<2)|0);
  HEAP32[$67>>2] = $66;
  $68 = (($57) + ($j$24$us<<2)|0);
  $64 = HEAP32[$68>>2]|0;
  $$pn = $52;$k$11$us = 0;$val$02$us = $j$24$us;
  while(1) {
   $mult$03$us = (($$pn|0) / ($6|0))&-1;
   $60 = (($val$02$us|0) / ($mult$03$us|0))&-1;
   $61 = Math_imul($60, $mult$03$us)|0;
   $62 = (($val$02$us) - ($61))|0;
   $63 = (($64) + ($k$11$us<<2)|0);
   HEAP32[$63>>2] = $60;
   $65 = (($k$11$us) + 1)|0;
   $exitcond24 = ($65|0)==($16|0);
   if ($exitcond24) {
    break;
   } else {
    $$pn = $mult$03$us;$k$11$us = $65;$val$02$us = $62;
   }
  }
  $58 = (($j$24$us) + 1)|0;
  $59 = ($58|0)<($52|0);
  if ($59) {
   $j$24$us = $58;
  } else {
   break;
  }
 }
 return ($0|0);
}
function _res0_inverse($vb,$vl,$in,$nonzero,$ch) {
 $vb = $vb|0;
 $vl = $vl|0;
 $in = $in|0;
 $nonzero = $nonzero|0;
 $ch = $ch|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $used$02 = 0, $used$1 = 0, $used$1$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ch|0)>(0);
 if ($0) {
  $i$01 = 0;$used$02 = 0;
 } else {
  return 0;
 }
 while(1) {
  $1 = (($nonzero) + ($i$01<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   $used$1 = $used$02;
  } else {
   $4 = (($in) + ($i$01<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($used$02) + 1)|0;
   $7 = (($in) + ($used$02<<2)|0);
   HEAP32[$7>>2] = $5;
   $used$1 = $6;
  }
  $8 = (($i$01) + 1)|0;
  $exitcond = ($8|0)==($ch|0);
  if ($exitcond) {
   $used$1$lcssa = $used$1;
   break;
  } else {
   $i$01 = $8;$used$02 = $used$1;
  }
 }
 $9 = ($used$1$lcssa|0)==(0);
 if ($9) {
  return 0;
 }
 __01inverse($vb,$vl,$in,$used$1$lcssa,2);
 return 0;
}
function _res1_forward($opb,$vb,$vl,$in,$nonzero,$ch,$partword,$submap) {
 $opb = $opb|0;
 $vb = $vb|0;
 $vl = $vl|0;
 $in = $in|0;
 $nonzero = $nonzero|0;
 $ch = $ch|0;
 $partword = $partword|0;
 $submap = $submap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $used$02 = 0, $used$1 = 0, $used$1$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ch|0)>(0);
 if ($0) {
  $i$01 = 0;$used$02 = 0;
 } else {
  return 0;
 }
 while(1) {
  $1 = (($nonzero) + ($i$01<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   $used$1 = $used$02;
  } else {
   $4 = (($in) + ($i$01<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($used$02) + 1)|0;
   $7 = (($in) + ($used$02<<2)|0);
   HEAP32[$7>>2] = $5;
   $used$1 = $6;
  }
  $8 = (($i$01) + 1)|0;
  $exitcond = ($8|0)==($ch|0);
  if ($exitcond) {
   $used$1$lcssa = $used$1;
   break;
  } else {
   $i$01 = $8;$used$02 = $used$1;
  }
 }
 $9 = ($used$1$lcssa|0)==(0);
 if ($9) {
  return 0;
 }
 __01forward($opb,$vl,$in,$used$1$lcssa,$partword);
 return 0;
}
function _res1_class($vb,$vl,$in,$nonzero,$ch) {
 $vb = $vb|0;
 $vl = $vl|0;
 $in = $in|0;
 $nonzero = $nonzero|0;
 $ch = $ch|0;
 var $$0 = 0, $$max$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $ent$0$lcssa$i = 0, $ent$06$i = 0, $exitcond = 0, $exitcond$i = 0, $exitcond25$i = 0, $exitcond26$i = 0, $exitcond27$i = 0, $i$02 = 0, $i$020$i = 0, $i$117$i = 0, $ispos$i = 0, $j$015$i = 0;
 var $k$04$i = 0, $k$1$lcssa$i = 0, $k$18$i = 0, $max$0$lcssa$i = 0, $max$05$i = 0, $neg$i = 0, $or$cond$i = 0, $used$03 = 0, $used$1 = 0, $used$1$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ch|0)>(0);
 if ($0) {
  $i$02 = 0;$used$03 = 0;
 } else {
  $$0 = 0;
  return ($$0|0);
 }
 while(1) {
  $1 = (($nonzero) + ($i$02<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   $used$1 = $used$03;
  } else {
   $4 = (($in) + ($i$02<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($used$03) + 1)|0;
   $7 = (($in) + ($used$03<<2)|0);
   HEAP32[$7>>2] = $5;
   $used$1 = $6;
  }
  $8 = (($i$02) + 1)|0;
  $exitcond = ($8|0)==($ch|0);
  if ($exitcond) {
   $used$1$lcssa = $used$1;
   break;
  } else {
   $i$02 = $8;$used$03 = $used$1;
  }
 }
 $9 = ($used$1$lcssa|0)==(0);
 if ($9) {
  $$0 = 0;
  return ($$0|0);
 }
 $10 = HEAP32[$vl>>2]|0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($10)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($10)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$10>>2]|0;
 $18 = (($16) - ($17))|0;
 $19 = (($18|0) / ($12|0))&-1;
 $20 = $used$1$lcssa << 2;
 $21 = (__vorbis_block_alloc($vb,$20)|0);
 $22 = (+($12|0));
 $23 = 100.0 / $22;
 $24 = $23;
 $25 = ($used$1$lcssa|0)>(0);
 if ($25) {
  $26 = $19 << 2;
  $i$020$i = 0;
  while(1) {
   $31 = (__vorbis_block_alloc($vb,$26)|0);
   $32 = (($21) + ($i$020$i<<2)|0);
   HEAP32[$32>>2] = $31;
   _memset(($31|0),0,($26|0))|0;
   $33 = (($i$020$i) + 1)|0;
   $exitcond27$i = ($33|0)==($used$1$lcssa|0);
   if ($exitcond27$i) {
    break;
   } else {
    $i$020$i = $33;
   }
  }
 }
 $27 = ($19|0)>(0);
 if ($27) {
  $28 = ($12|0)>(0);
  $29 = (($14) + -1)|0;
  $30 = ($14|0)>(1);
  $i$117$i = 0;
  while(1) {
   $34 = Math_imul($i$117$i, $12)|0;
   $35 = HEAP32[$10>>2]|0;
   $36 = (($35) + ($34))|0;
   if ($25) {
    $j$015$i = 0;
    while(1) {
     if ($28) {
      $37 = (($in) + ($j$015$i<<2)|0);
      $38 = HEAP32[$37>>2]|0;
      $ent$06$i = 0;$k$04$i = 0;$max$05$i = 0;
      while(1) {
       $39 = (($36) + ($k$04$i))|0;
       $40 = (($38) + ($39<<2)|0);
       $41 = HEAP32[$40>>2]|0;
       $ispos$i = ($41|0)>(-1);
       $neg$i = (0 - ($41))|0;
       $42 = $ispos$i ? $41 : $neg$i;
       $43 = ($42|0)>($max$05$i|0);
       $$max$0$i = $43 ? $42 : $max$05$i;
       $44 = (($42) + ($ent$06$i))|0;
       $45 = (($k$04$i) + 1)|0;
       $exitcond$i = ($45|0)==($12|0);
       if ($exitcond$i) {
        $ent$0$lcssa$i = $44;$max$0$lcssa$i = $$max$0$i;
        break;
       } else {
        $ent$06$i = $44;$k$04$i = $45;$max$05$i = $$max$0$i;
       }
      }
     } else {
      $ent$0$lcssa$i = 0;$max$0$lcssa$i = 0;
     }
     $46 = (+($ent$0$lcssa$i|0));
     $47 = $46 * $24;
     $48 = (~~(($47)));
     L29: do {
      if ($30) {
       $k$18$i = 0;
       while(1) {
        $49 = (((($10)) + 2328|0) + ($k$18$i<<2)|0);
        $50 = HEAP32[$49>>2]|0;
        $51 = ($max$0$lcssa$i|0)>($50|0);
        if (!($51)) {
         $52 = (((($10)) + 2584|0) + ($k$18$i<<2)|0);
         $53 = HEAP32[$52>>2]|0;
         $54 = ($53|0)<(0);
         $55 = ($48|0)<($53|0);
         $or$cond$i = $54 | $55;
         if ($or$cond$i) {
          $k$1$lcssa$i = $k$18$i;
          break L29;
         }
        }
        $56 = (($k$18$i) + 1)|0;
        $57 = ($56|0)<($29|0);
        if ($57) {
         $k$18$i = $56;
        } else {
         $k$1$lcssa$i = $56;
         break;
        }
       }
      } else {
       $k$1$lcssa$i = 0;
      }
     } while(0);
     $58 = (($21) + ($j$015$i<<2)|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = (($59) + ($i$117$i<<2)|0);
     HEAP32[$60>>2] = $k$1$lcssa$i;
     $61 = (($j$015$i) + 1)|0;
     $exitcond25$i = ($61|0)==($used$1$lcssa|0);
     if ($exitcond25$i) {
      break;
     } else {
      $j$015$i = $61;
     }
    }
   }
   $62 = (($i$117$i) + 1)|0;
   $exitcond26$i = ($62|0)==($19|0);
   if ($exitcond26$i) {
    break;
   } else {
    $i$117$i = $62;
   }
  }
 }
 $63 = ((($vl)) + 40|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (($64) + 1)|0;
 HEAP32[$63>>2] = $65;
 $$0 = $21;
 return ($$0|0);
}
function _res1_inverse($vb,$vl,$in,$nonzero,$ch) {
 $vb = $vb|0;
 $vl = $vl|0;
 $in = $in|0;
 $nonzero = $nonzero|0;
 $ch = $ch|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $used$02 = 0, $used$1 = 0, $used$1$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ch|0)>(0);
 if ($0) {
  $i$01 = 0;$used$02 = 0;
 } else {
  return 0;
 }
 while(1) {
  $1 = (($nonzero) + ($i$01<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   $used$1 = $used$02;
  } else {
   $4 = (($in) + ($i$01<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($used$02) + 1)|0;
   $7 = (($in) + ($used$02<<2)|0);
   HEAP32[$7>>2] = $5;
   $used$1 = $6;
  }
  $8 = (($i$01) + 1)|0;
  $exitcond = ($8|0)==($ch|0);
  if ($exitcond) {
   $used$1$lcssa = $used$1;
   break;
  } else {
   $i$01 = $8;$used$02 = $used$1;
  }
 }
 $9 = ($used$1$lcssa|0)==(0);
 if ($9) {
  return 0;
 }
 __01inverse($vb,$vl,$in,$used$1$lcssa,3);
 return 0;
}
function _res2_class($vb,$vl,$in,$nonzero,$ch) {
 $vb = $vb|0;
 $vl = $vl|0;
 $in = $in|0;
 $nonzero = $nonzero|0;
 $ch = $ch|0;
 var $$0 = 0, $$angmax$1$i = 0, $$magmax$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $angmax$0$lcssa$i = 0, $angmax$09$i = 0, $angmax$1$lcssa$i = 0;
 var $angmax$15$i = 0, $exitcond = 0, $exitcond$i = 0, $exitcond25$i = 0, $i$01 = 0, $i$021$i = 0, $ispos$i = 0, $ispos1$i = 0, $j$07$i = 0, $j$1$lcssa$i = 0, $j$114$i = 0, $k$04$i = 0, $l$020$i = 0, $l$1$lcssa$i = 0, $l$16$i = 0, $magmax$0$lcssa$i = 0, $magmax$08$i = 0, $neg$i = 0, $neg2$i = 0, $not$ = 0;
 var $phitmp = 0, $used$0$ = 0, $used$0$$lcssa = 0, $used$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ch|0)>(0);
 if ($0) {
  $i$01 = 0;$used$02 = 0;
 } else {
  $$0 = 0;
  return ($$0|0);
 }
 while(1) {
  $1 = (($nonzero) + ($i$01<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $not$ = ($2|0)!=(0);
  $3 = $not$&1;
  $used$0$ = (($3) + ($used$02))|0;
  $4 = (($i$01) + 1)|0;
  $exitcond = ($4|0)==($ch|0);
  if ($exitcond) {
   $used$0$$lcssa = $used$0$;
   break;
  } else {
   $i$01 = $4;$used$02 = $used$0$;
  }
 }
 $phitmp = ($used$0$$lcssa|0)==(0);
 if ($phitmp) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = HEAP32[$vl>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($5)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($5)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$5>>2]|0;
 $13 = (($11) - ($12))|0;
 $14 = (($13|0) / ($7|0))&-1;
 $15 = (__vorbis_block_alloc($vb,4)|0);
 $16 = $14 << 2;
 $17 = (__vorbis_block_alloc($vb,$16)|0);
 HEAP32[$15>>2] = $17;
 _memset(($17|0),0,($16|0))|0;
 $18 = ($14|0)>(0);
 if ($18) {
  $19 = HEAP32[$5>>2]|0;
  $20 = (($19|0) / ($ch|0))&-1;
  $21 = ($7|0)>(0);
  $22 = (($9) + -1)|0;
  $23 = ($9|0)>(1);
  $24 = HEAP32[$15>>2]|0;
  $25 = ($ch|0)>(1);
  $i$021$i = 0;$l$020$i = $20;
  while(1) {
   if ($21) {
    $26 = HEAP32[$in>>2]|0;
    $angmax$09$i = 0;$j$07$i = 0;$l$16$i = $l$020$i;$magmax$08$i = 0;
    while(1) {
     $27 = (($26) + ($l$16$i<<2)|0);
     $28 = HEAP32[$27>>2]|0;
     $ispos$i = ($28|0)>(-1);
     $neg$i = (0 - ($28))|0;
     $29 = $ispos$i ? $28 : $neg$i;
     $30 = ($29|0)>($magmax$08$i|0);
     $$magmax$0$i = $30 ? $29 : $magmax$08$i;
     if ($25) {
      $angmax$15$i = $angmax$09$i;$k$04$i = 1;
      while(1) {
       $31 = (($in) + ($k$04$i<<2)|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = (($32) + ($l$16$i<<2)|0);
       $34 = HEAP32[$33>>2]|0;
       $ispos1$i = ($34|0)>(-1);
       $neg2$i = (0 - ($34))|0;
       $35 = $ispos1$i ? $34 : $neg2$i;
       $36 = ($35|0)>($angmax$15$i|0);
       $$angmax$1$i = $36 ? $35 : $angmax$15$i;
       $37 = (($k$04$i) + 1)|0;
       $exitcond$i = ($37|0)==($ch|0);
       if ($exitcond$i) {
        $angmax$1$lcssa$i = $$angmax$1$i;
        break;
       } else {
        $angmax$15$i = $$angmax$1$i;$k$04$i = $37;
       }
      }
     } else {
      $angmax$1$lcssa$i = $angmax$09$i;
     }
     $38 = (($l$16$i) + 1)|0;
     $39 = (($j$07$i) + ($ch))|0;
     $40 = ($39|0)<($7|0);
     if ($40) {
      $angmax$09$i = $angmax$1$lcssa$i;$j$07$i = $39;$l$16$i = $38;$magmax$08$i = $$magmax$0$i;
     } else {
      $angmax$0$lcssa$i = $angmax$1$lcssa$i;$l$1$lcssa$i = $38;$magmax$0$lcssa$i = $$magmax$0$i;
      break;
     }
    }
   } else {
    $angmax$0$lcssa$i = 0;$l$1$lcssa$i = $l$020$i;$magmax$0$lcssa$i = 0;
   }
   L22: do {
    if ($23) {
     $j$114$i = 0;
     while(1) {
      $41 = (((($5)) + 2328|0) + ($j$114$i<<2)|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = ($magmax$0$lcssa$i|0)>($42|0);
      if (!($43)) {
       $44 = (((($5)) + 2584|0) + ($j$114$i<<2)|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = ($angmax$0$lcssa$i|0)>($45|0);
       if (!($46)) {
        $j$1$lcssa$i = $j$114$i;
        break L22;
       }
      }
      $47 = (($j$114$i) + 1)|0;
      $48 = ($47|0)<($22|0);
      if ($48) {
       $j$114$i = $47;
      } else {
       $j$1$lcssa$i = $47;
       break;
      }
     }
    } else {
     $j$1$lcssa$i = 0;
    }
   } while(0);
   $49 = (($24) + ($i$021$i<<2)|0);
   HEAP32[$49>>2] = $j$1$lcssa$i;
   $50 = (($i$021$i) + 1)|0;
   $exitcond25$i = ($50|0)==($14|0);
   if ($exitcond25$i) {
    break;
   } else {
    $i$021$i = $50;$l$020$i = $l$1$lcssa$i;
   }
  }
 }
 $51 = ((($vl)) + 40|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) + 1)|0;
 HEAP32[$51>>2] = $53;
 $$0 = $15;
 return ($$0|0);
}
function _res2_forward($opb,$vb,$vl,$in,$nonzero,$ch,$partword,$submap) {
 $opb = $opb|0;
 $vb = $vb|0;
 $vl = $vl|0;
 $in = $in|0;
 $nonzero = $nonzero|0;
 $ch = $ch|0;
 $partword = $partword|0;
 $submap = $submap|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, $i$03 = 0, $j$01 = 0, $k$02 = 0, $not$ = 0, $phitmp = 0, $used$0$ = 0, $used$0$$lcssa = 0, $used$04 = 0, $work = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $work = sp;
 $0 = ((($vb)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1|0) / 2)&-1;
 $3 = $ch << 2;
 $4 = Math_imul($3, $2)|0;
 $5 = (__vorbis_block_alloc($vb,$4)|0);
 HEAP32[$work>>2] = $5;
 $6 = ($ch|0)>(0);
 if (!($6)) {
  STACKTOP = sp;return 0;
 }
 $7 = ($1|0)>(1);
 $i$03 = 0;$used$04 = 0;
 while(1) {
  $8 = (($in) + ($i$03<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($nonzero) + ($i$03<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $not$ = ($11|0)!=(0);
  $12 = $not$&1;
  $used$0$ = (($12) + ($used$04))|0;
  if ($7) {
   $j$01 = 0;$k$02 = $i$03;
   while(1) {
    $13 = (($9) + ($j$01<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($5) + ($k$02<<2)|0);
    HEAP32[$15>>2] = $14;
    $16 = (($j$01) + 1)|0;
    $17 = (($k$02) + ($ch))|0;
    $18 = ($16|0)<($2|0);
    if ($18) {
     $j$01 = $16;$k$02 = $17;
    } else {
     break;
    }
   }
  }
  $19 = (($i$03) + 1)|0;
  $exitcond = ($19|0)==($ch|0);
  if ($exitcond) {
   $used$0$$lcssa = $used$0$;
   break;
  } else {
   $i$03 = $19;$used$04 = $used$0$;
  }
 }
 $phitmp = ($used$0$$lcssa|0)==(0);
 if ($phitmp) {
  STACKTOP = sp;return 0;
 }
 __01forward($opb,$vl,$work,1,$partword);
 STACKTOP = sp;return 0;
}
function _res2_inverse($vb,$vl,$in,$nonzero,$ch) {
 $vb = $vb|0;
 $vl = $vl|0;
 $in = $in|0;
 $nonzero = $nonzero|0;
 $ch = $ch|0;
 var $$ = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $9 = 0, $i$0$lcssa = 0, $i$014 = 0, $i$110 = 0, $i$2$lcssa = 0, $i$28 = 0, $k$07 = 0, $l$09 = 0, $or$cond = 0, $or$cond6 = 0, $s$012 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vl>>2]|0;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($vl)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($vb)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = Math_imul($7, $ch)|0;
 $9 = $8 >> 1;
 $10 = ((($0)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)<($9|0);
 $$ = $12 ? $11 : $9;
 $13 = HEAP32[$0>>2]|0;
 $14 = (($$) - ($13))|0;
 $15 = ($14|0)>(0);
 if (!($15)) {
  return 0;
 }
 $16 = (($14|0) / ($2|0))&-1;
 $17 = (($5) + -1)|0;
 $18 = (($17) + ($16))|0;
 $19 = (($18|0) / ($5|0))&-1;
 $20 = $19 << 2;
 $21 = (__vorbis_block_alloc($vb,$20)|0);
 $22 = ($ch|0)>(0);
 L4: do {
  if ($22) {
   $i$014 = 0;
   while(1) {
    $23 = (($nonzero) + ($i$014<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==(0);
    if (!($25)) {
     $i$0$lcssa = $i$014;
     break L4;
    }
    $26 = (($i$014) + 1)|0;
    $27 = ($26|0)<($ch|0);
    if ($27) {
     $i$014 = $26;
    } else {
     $i$0$lcssa = $26;
     break;
    }
   }
  } else {
   $i$0$lcssa = 0;
  }
 } while(0);
 $28 = ($i$0$lcssa|0)==($ch|0);
 if ($28) {
  return 0;
 }
 $29 = ((($vl)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)>(0);
 if (!($31)) {
  return 0;
 }
 $32 = ($16|0)>(0);
 $33 = ((($vb)) + 4|0);
 $34 = ((($0)) + 16|0);
 $35 = ((($vl)) + 28|0);
 $36 = ($5|0)>(0);
 $37 = ((($vl)) + 20|0);
 $79 = $30;$s$012 = 0;
 L15: while(1) {
  if ($32) {
   $38 = ($s$012|0)==(0);
   $39 = 1 << $s$012;
   $i$110 = 0;$l$09 = 0;
   while(1) {
    if ($38) {
     $40 = HEAP32[$3>>2]|0;
     $41 = (_vorbis_book_decode($40,$33)|0);
     $42 = ($41|0)==(-1);
     if ($42) {
      label = 23;
      break L15;
     }
     $43 = HEAP32[$34>>2]|0;
     $44 = ($41|0)<($43|0);
     if (!($44)) {
      label = 23;
      break L15;
     }
     $45 = HEAP32[$35>>2]|0;
     $46 = (($45) + ($41<<2)|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = (($21) + ($l$09<<2)|0);
     HEAP32[$48>>2] = $47;
     $49 = ($47|0)==(0|0);
     if ($49) {
      label = 23;
      break L15;
     }
    }
    $50 = ($i$110|0)<($16|0);
    $or$cond6 = $36 & $50;
    if ($or$cond6) {
     $51 = (($21) + ($l$09<<2)|0);
     $i$28 = $i$110;$k$07 = 0;
     while(1) {
      $52 = HEAP32[$51>>2]|0;
      $53 = (($52) + ($k$07<<2)|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = (((($0)) + 24|0) + ($54<<2)|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = $56 & $39;
      $58 = ($57|0)==(0);
      if (!($58)) {
       $59 = HEAP32[$37>>2]|0;
       $60 = (($59) + ($54<<2)|0);
       $61 = HEAP32[$60>>2]|0;
       $62 = (($61) + ($s$012<<2)|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = ($63|0)==(0|0);
       if (!($64)) {
        $65 = Math_imul($i$28, $2)|0;
        $66 = HEAP32[$0>>2]|0;
        $67 = (($66) + ($65))|0;
        $68 = (_vorbis_book_decodevv_add($63,$in,$67,$ch,$33,$2)|0);
        $69 = ($68|0)==(-1);
        if ($69) {
         label = 23;
         break L15;
        }
       }
      }
      $70 = (($k$07) + 1)|0;
      $71 = (($i$28) + 1)|0;
      $72 = ($70|0)<($5|0);
      $73 = ($71|0)<($16|0);
      $or$cond = $72 & $73;
      if ($or$cond) {
       $i$28 = $71;$k$07 = $70;
      } else {
       $i$2$lcssa = $71;
       break;
      }
     }
    } else {
     $i$2$lcssa = $i$110;
    }
    $74 = (($l$09) + 1)|0;
    $75 = ($i$2$lcssa|0)<($16|0);
    if ($75) {
     $i$110 = $i$2$lcssa;$l$09 = $74;
    } else {
     break;
    }
   }
   $$pre = HEAP32[$29>>2]|0;
   $78 = $$pre;
  } else {
   $78 = $79;
  }
  $76 = (($s$012) + 1)|0;
  $77 = ($76|0)<($78|0);
  if ($77) {
   $79 = $78;$s$012 = $76;
  } else {
   label = 23;
   break;
  }
 }
 if ((label|0) == 23) {
  return 0;
 }
 return (0)|0;
}
function __01inverse($vb,$vl,$in,$ch,$decodepart) {
 $vb = $vb|0;
 $vl = $vl|0;
 $in = $in|0;
 $ch = $ch|0;
 $decodepart = $decodepart|0;
 var $$ = 0, $$alloca_mul = 0, $$not = 0, $$not31 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $brmerge = 0, $exitcond = 0, $i$017 = 0, $i$1$lcssa = 0, $i$113 = 0, $i$113$us = 0;
 var $j$022 = 0, $j$18 = 0, $j$29$us = 0, $k$012 = 0, $k$012$us = 0, $l$014 = 0, $or$cond = 0, $or$cond$us = 0, $or$cond11 = 0, $s$020 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vl>>2]|0;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($vl)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($vb)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 >> 1;
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)<($8|0);
 $$ = $11 ? $10 : $8;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($$) - ($12))|0;
 $14 = ($13|0)>(0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = (($13|0) / ($2|0))&-1;
 $16 = $ch << 2;
 $$alloca_mul = $16;
 $17 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
 $18 = ($ch|0)>(0);
 if ($18) {
  $19 = (($5) + -1)|0;
  $20 = (($19) + ($15))|0;
  $21 = (($20|0) / ($5|0))&-1;
  $22 = $21 << 2;
  $j$022 = 0;
  while(1) {
   $32 = (__vorbis_block_alloc($vb,$22)|0);
   $33 = (($17) + ($j$022<<2)|0);
   HEAP32[$33>>2] = $32;
   $34 = (($j$022) + 1)|0;
   $exitcond = ($34|0)==($ch|0);
   if ($exitcond) {
    break;
   } else {
    $j$022 = $34;
   }
  }
 }
 $23 = ((($vl)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)>(0);
 if (!($25)) {
  STACKTOP = sp;return;
 }
 $26 = ($15|0)>(0);
 $27 = ((($vb)) + 4|0);
 $28 = ((($0)) + 16|0);
 $29 = ((($vl)) + 28|0);
 $30 = ($5|0)>(0);
 $31 = ((($vl)) + 20|0);
 $$not31 = $18 ^ 1;
 $s$020 = 0;
 L12: while(1) {
  if ($26) {
   $35 = 1 << $s$020;
   $$not = ($s$020|0)!=(0);
   $brmerge = $$not | $$not31;
   $i$017 = 0;$l$014 = 0;
   while(1) {
    if (!($brmerge)) {
     $j$18 = 0;
     while(1) {
      $69 = HEAP32[$3>>2]|0;
      $70 = (_vorbis_book_decode($69,$27)|0);
      $71 = ($70|0)==(-1);
      if ($71) {
       label = 25;
       break L12;
      }
      $72 = HEAP32[$28>>2]|0;
      $73 = ($70|0)<($72|0);
      if (!($73)) {
       label = 25;
       break L12;
      }
      $74 = HEAP32[$29>>2]|0;
      $75 = (($74) + ($70<<2)|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = (($17) + ($j$18<<2)|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = (($78) + ($l$014<<2)|0);
      HEAP32[$79>>2] = $76;
      $80 = ($76|0)==(0);
      $67 = (($j$18) + 1)|0;
      if ($80) {
       label = 25;
       break L12;
      }
      $68 = ($67|0)<($ch|0);
      if ($68) {
       $j$18 = $67;
      } else {
       break;
      }
     }
    }
    $36 = ($i$017|0)<($15|0);
    $or$cond11 = $30 & $36;
    L25: do {
     if ($or$cond11) {
      if ($18) {
       $i$113$us = $i$017;$k$012$us = 0;
      } else {
       $i$113 = $i$017;$k$012 = 0;
       while(1) {
        $81 = (($k$012) + 1)|0;
        $82 = (($i$113) + 1)|0;
        $83 = ($81|0)<($5|0);
        $84 = ($82|0)<($15|0);
        $or$cond = $83 & $84;
        if ($or$cond) {
         $i$113 = $82;$k$012 = $81;
        } else {
         $i$1$lcssa = $82;
         break L25;
        }
       }
      }
      while(1) {
       $43 = Math_imul($i$113$us, $2)|0;
       $j$29$us = 0;
       while(1) {
        $41 = HEAP32[$0>>2]|0;
        $42 = (($41) + ($43))|0;
        $44 = (($17) + ($j$29$us<<2)|0);
        $45 = HEAP32[$44>>2]|0;
        $46 = (($45) + ($l$014<<2)|0);
        $47 = HEAP32[$46>>2]|0;
        $48 = (($47) + ($k$012$us<<2)|0);
        $49 = HEAP32[$48>>2]|0;
        $50 = (((($0)) + 24|0) + ($49<<2)|0);
        $51 = HEAP32[$50>>2]|0;
        $52 = $51 & $35;
        $53 = ($52|0)==(0);
        if (!($53)) {
         $54 = HEAP32[$31>>2]|0;
         $55 = (($54) + ($49<<2)|0);
         $56 = HEAP32[$55>>2]|0;
         $57 = (($56) + ($s$020<<2)|0);
         $58 = HEAP32[$57>>2]|0;
         $59 = ($58|0)==(0|0);
         if (!($59)) {
          $60 = (($in) + ($j$29$us<<2)|0);
          $61 = HEAP32[$60>>2]|0;
          $62 = (($61) + ($42<<2)|0);
          $63 = (FUNCTION_TABLE_iiiii[$decodepart & 3]($58,$62,$27,$2)|0);
          $64 = ($63|0)==(-1);
          if ($64) {
           label = 25;
           break L12;
          }
         }
        }
        $65 = (($j$29$us) + 1)|0;
        $66 = ($65|0)<($ch|0);
        if ($66) {
         $j$29$us = $65;
        } else {
         break;
        }
       }
       $37 = (($k$012$us) + 1)|0;
       $38 = (($i$113$us) + 1)|0;
       $39 = ($37|0)<($5|0);
       $40 = ($38|0)<($15|0);
       $or$cond$us = $39 & $40;
       if ($or$cond$us) {
        $i$113$us = $38;$k$012$us = $37;
       } else {
        $i$1$lcssa = $38;
        break;
       }
      }
     } else {
      $i$1$lcssa = $i$017;
     }
    } while(0);
    $85 = (($l$014) + 1)|0;
    $86 = ($i$1$lcssa|0)<($15|0);
    if ($86) {
     $i$017 = $i$1$lcssa;$l$014 = $85;
    } else {
     break;
    }
   }
  }
  $87 = (($s$020) + 1)|0;
  $88 = HEAP32[$23>>2]|0;
  $89 = ($87|0)<($88|0);
  if ($89) {
   $s$020 = $87;
  } else {
   label = 25;
   break;
  }
 }
 if ((label|0) == 25) {
  STACKTOP = sp;return;
 }
}
function __01forward($opb,$vl,$in,$ch,$partword) {
 $opb = $opb|0;
 $vl = $vl|0;
 $in = $in|0;
 $ch = $ch|0;
 $partword = $partword|0;
 var $$09$i$i = 0, $$lcssa$i$i = 0, $$lcssa7$i$i = 0, $$lcssa72 = 0, $$pre$i = 0, $$pre43 = 0, $$pre44 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $best$020$i$i = 0;
 var $best$1$i$i = 0, $bits$0$lcssa$i = 0, $bits$08$i = 0, $brmerge$demorgan = 0, $e$i$i = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i$i = 0, $exitcond15$i = 0, $exitcond35 = 0, $exitcond36 = 0, $exitcond37 = 0, $exitcond38 = 0, $exitcond41$i$i = 0, $exitcond42$i$i = 0, $exitcond43$i$i = 0, $i$024 = 0, $i$033$i$i = 0, $i$09$i = 0, $i$1$lcssa = 0;
 var $i$121 = 0, $i$128$i$i = 0, $i$221$i$i = 0, $i$38$i$i = 0, $index$031$i$i = 0, $index$126$i$i = 0, $index$2$i$i = 0, $index$319$i$i = 0, $index$4$i$i = 0, $index$5$i$i = 0, $j$010$i$i = 0, $j$013 = 0, $j$013$us = 0, $j$113$i$i = 0, $j$115 = 0, $k$012$us = 0, $k$120 = 0, $o$032$i$i = 0, $o$127$i$i = 0, $or$cond$i$i = 0;
 var $or$cond19 = 0, $or$cond50$i$i = 0, $p$i$i = 0, $resbits = 0, $resvals = 0, $s$026 = 0, $this$0$lcssa$i$i = 0, $this$011$i$i = 0, $umax = 0, $val$011$us = 0, $val$1$us = 0, $val$1$us$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1088|0;
 $p$i$i = sp + 1056|0;
 $e$i$i = sp + 1024|0;
 $resbits = sp + 512|0;
 $resvals = sp;
 $0 = HEAP32[$vl>>2]|0;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($vl)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$0>>2]|0;
 $11 = (($9) - ($10))|0;
 $12 = (($11|0) / ($2|0))&-1;
 _memset(($resbits|0),0,512)|0;
 _memset(($resvals|0),0,512)|0;
 $13 = ((($vl)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)>(0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = ($12|0)>(0);
 $17 = ($ch|0)>(0);
 $18 = ($7|0)>(1);
 $19 = ((($vl)) + 36|0);
 $20 = ($7|0)>(0);
 $21 = ((($vl)) + 20|0);
 $22 = ((($vl)) + 32|0);
 $23 = (0 - ($7))|0;
 $207 = $14;$s$026 = 0;
 while(1) {
  if ($16) {
   $24 = ($s$026|0)==(0);
   $25 = 1 << $s$026;
   $brmerge$demorgan = $24 & $17;
   $i$024 = 0;
   while(1) {
    L10: do {
     if ($brmerge$demorgan) {
      if ($18) {
       $j$013$us = 0;
      } else {
       $j$013 = 0;
       while(1) {
        $51 = (($partword) + ($j$013<<2)|0);
        $52 = HEAP32[$51>>2]|0;
        $53 = (($52) + ($i$024<<2)|0);
        $54 = HEAP32[$53>>2]|0;
        $55 = HEAP32[$5>>2]|0;
        $56 = ((($55)) + 4|0);
        $57 = HEAP32[$56>>2]|0;
        $58 = ($54|0)<($57|0);
        if ($58) {
         $59 = (_vorbis_book_encode($55,$54,$opb)|0);
         $60 = HEAP32[$19>>2]|0;
         $61 = (($60) + ($59))|0;
         HEAP32[$19>>2] = $61;
        }
        $62 = (($j$013) + 1)|0;
        $exitcond = ($62|0)==($ch|0);
        if ($exitcond) {
         break L10;
        } else {
         $j$013 = $62;
        }
       }
      }
      while(1) {
       $44 = (($partword) + ($j$013$us<<2)|0);
       $40 = HEAP32[$44>>2]|0;
       $45 = (($40) + ($i$024<<2)|0);
       $46 = HEAP32[$45>>2]|0;
       $k$012$us = 1;$val$011$us = $46;
       while(1) {
        $36 = Math_imul($val$011$us, $4)|0;
        $37 = (($k$012$us) + ($i$024))|0;
        $38 = ($37|0)<($12|0);
        if ($38) {
         $39 = (($40) + ($37<<2)|0);
         $41 = HEAP32[$39>>2]|0;
         $42 = (($41) + ($36))|0;
         $val$1$us = $42;
        } else {
         $val$1$us = $36;
        }
        $43 = (($k$012$us) + 1)|0;
        $exitcond37 = ($43|0)==($7|0);
        if ($exitcond37) {
         $val$1$us$lcssa = $val$1$us;
         break;
        } else {
         $k$012$us = $43;$val$011$us = $val$1$us;
        }
       }
       $28 = HEAP32[$5>>2]|0;
       $29 = ((($28)) + 4|0);
       $30 = HEAP32[$29>>2]|0;
       $31 = ($val$1$us$lcssa|0)<($30|0);
       if ($31) {
        $32 = (_vorbis_book_encode($28,$val$1$us$lcssa,$opb)|0);
        $33 = HEAP32[$19>>2]|0;
        $34 = (($33) + ($32))|0;
        HEAP32[$19>>2] = $34;
       }
       $35 = (($j$013$us) + 1)|0;
       $exitcond38 = ($35|0)==($ch|0);
       if ($exitcond38) {
        break;
       } else {
        $j$013$us = $35;
       }
      }
     }
    } while(0);
    $47 = ($i$024|0)<($12|0);
    $or$cond19 = $20 & $47;
    if ($or$cond19) {
     $48 = (($i$024) - ($12))|0;
     $49 = ($48>>>0)<($23>>>0);
     $umax = $49 ? $23 : $48;
     $50 = (0 - ($umax))|0;
     $i$121 = $i$024;$k$120 = 0;
     while(1) {
      $63 = Math_imul($i$121, $2)|0;
      $64 = HEAP32[$0>>2]|0;
      $65 = (($64) + ($63))|0;
      if ($17) {
       $j$115 = 0;
       while(1) {
        $66 = (($partword) + ($j$115<<2)|0);
        $67 = HEAP32[$66>>2]|0;
        $68 = (($67) + ($i$121<<2)|0);
        $69 = HEAP32[$68>>2]|0;
        if ($24) {
         $70 = (($resvals) + ($69<<2)|0);
         $71 = HEAP32[$70>>2]|0;
         $72 = (($71) + ($2))|0;
         HEAP32[$70>>2] = $72;
        }
        $73 = (((($0)) + 24|0) + ($69<<2)|0);
        $74 = HEAP32[$73>>2]|0;
        $75 = $74 & $25;
        $76 = ($75|0)==(0);
        if (!($76)) {
         $77 = HEAP32[$21>>2]|0;
         $78 = (($77) + ($69<<2)|0);
         $79 = HEAP32[$78>>2]|0;
         $80 = (($79) + ($s$026<<2)|0);
         $81 = HEAP32[$80>>2]|0;
         $82 = ($81|0)==(0|0);
         if (!($82)) {
          $83 = (($in) + ($j$115<<2)|0);
          $84 = HEAP32[$83>>2]|0;
          $85 = HEAP32[$81>>2]|0;
          $86 = (($2|0) / ($85|0))&-1;
          $87 = ($86|0)>(0);
          if ($87) {
           $88 = ((($81)) + 48|0);
           $89 = ((($81)) + 52|0);
           $90 = ((($81)) + 44|0);
           $91 = ((($81)) + 12|0);
           $92 = ((($81)) + 4|0);
           $100 = $85;$bits$08$i = 0;$i$09$i = 0;
           while(1) {
            $93 = Math_imul($i$09$i, $85)|0;
            $$sum = (($93) + ($65))|0;
            $94 = (($84) + ($$sum<<2)|0);
            $95 = HEAP32[$88>>2]|0;
            $96 = HEAP32[$89>>2]|0;
            $97 = HEAP32[$90>>2]|0;
            $98 = $97 >> 1;
            ;HEAP32[$p$i$i>>2]=0|0;HEAP32[$p$i$i+4>>2]=0|0;HEAP32[$p$i$i+8>>2]=0|0;HEAP32[$p$i$i+12>>2]=0|0;HEAP32[$p$i$i+16>>2]=0|0;HEAP32[$p$i$i+20>>2]=0|0;HEAP32[$p$i$i+24>>2]=0|0;HEAP32[$p$i$i+28>>2]=0|0;
            $99 = ($96|0)==(1);
            $101 = ($100|0)>(0);
            do {
             if ($99) {
              if (!($101)) {
               $index$2$i$i = 0;
               break;
              }
              $105 = (($97) + -1)|0;
              $i$128$i$i = 0;$index$126$i$i = 0;$o$127$i$i = $100;
              while(1) {
               $128 = (($o$127$i$i) + -1)|0;
               $$sum3 = (($$sum) + ($128))|0;
               $129 = (($84) + ($$sum3<<2)|0);
               $130 = HEAP32[$129>>2]|0;
               $131 = (($130) - ($95))|0;
               $132 = ($131|0)<($98|0);
               if ($132) {
                $133 = (($98) - ($131))|0;
                $134 = $133 << 1;
                $135 = (($134) + -1)|0;
                $139 = $135;
               } else {
                $136 = (($131) - ($98))|0;
                $137 = $136 << 1;
                $139 = $137;
               }
               $138 = Math_imul($index$126$i$i, $97)|0;
               $140 = ($139|0)<(0);
               $141 = ($139|0)>=($97|0);
               $142 = $141 ? $105 : $139;
               $143 = $140 ? 0 : $142;
               $144 = (($143) + ($138))|0;
               $145 = (($p$i$i) + ($128<<2)|0);
               HEAP32[$145>>2] = $130;
               $146 = (($i$128$i$i) + 1)|0;
               $exitcond42$i$i = ($146|0)==($100|0);
               if ($exitcond42$i$i) {
                $index$2$i$i = $144;
                break;
               } else {
                $i$128$i$i = $146;$index$126$i$i = $144;$o$127$i$i = $128;
               }
              }
             } else {
              if (!($101)) {
               $index$2$i$i = 0;
               break;
              }
              $102 = $96 >> 1;
              $103 = (($102) - ($95))|0;
              $104 = (($97) + -1)|0;
              $i$033$i$i = 0;$index$031$i$i = 0;$o$032$i$i = $100;
              while(1) {
               $106 = (($o$032$i$i) + -1)|0;
               $$sum2 = (($$sum) + ($106))|0;
               $107 = (($84) + ($$sum2<<2)|0);
               $108 = HEAP32[$107>>2]|0;
               $109 = (($103) + ($108))|0;
               $110 = (($109|0) / ($96|0))&-1;
               $111 = ($110|0)<($98|0);
               if ($111) {
                $112 = (($98) - ($110))|0;
                $113 = $112 << 1;
                $114 = (($113) + -1)|0;
                $118 = $114;
               } else {
                $115 = (($110) - ($98))|0;
                $116 = $115 << 1;
                $118 = $116;
               }
               $117 = Math_imul($index$031$i$i, $97)|0;
               $119 = ($118|0)<(0);
               $120 = ($118|0)>=($97|0);
               $121 = $120 ? $104 : $118;
               $122 = $119 ? 0 : $121;
               $123 = (($122) + ($117))|0;
               $124 = Math_imul($110, $96)|0;
               $125 = (($124) + ($95))|0;
               $126 = (($p$i$i) + ($106<<2)|0);
               HEAP32[$126>>2] = $125;
               $127 = (($i$033$i$i) + 1)|0;
               $exitcond43$i$i = ($127|0)==($100|0);
               if ($exitcond43$i$i) {
                $index$2$i$i = $123;
                break;
               } else {
                $i$033$i$i = $127;$index$031$i$i = $123;$o$032$i$i = $106;
               }
              }
             }
            } while(0);
            $147 = HEAP32[$91>>2]|0;
            $148 = ((($147)) + 8|0);
            $149 = HEAP32[$148>>2]|0;
            $150 = (($149) + ($index$2$i$i)|0);
            $151 = HEAP8[$150>>0]|0;
            $152 = ($151<<24>>24)<(1);
            do {
             if ($152) {
              ;HEAP32[$e$i$i>>2]=0|0;HEAP32[$e$i$i+4>>2]=0|0;HEAP32[$e$i$i+8>>2]=0|0;HEAP32[$e$i$i+12>>2]=0|0;HEAP32[$e$i$i+16>>2]=0|0;HEAP32[$e$i$i+20>>2]=0|0;HEAP32[$e$i$i+24>>2]=0|0;HEAP32[$e$i$i+28>>2]=0|0;
              $153 = (($97) + -1)|0;
              $154 = Math_imul($153, $96)|0;
              $155 = (($154) + ($95))|0;
              $156 = HEAP32[$92>>2]|0;
              $157 = ($156|0)>(0);
              if ($157) {
               $best$020$i$i = -1;$i$221$i$i = 0;$index$319$i$i = $index$2$i$i;
              } else {
               $index$5$i$i = $index$2$i$i;
               break;
              }
              while(1) {
               $158 = (($149) + ($i$221$i$i)|0);
               $159 = HEAP8[$158>>0]|0;
               $160 = ($159<<24>>24)>(0);
               do {
                if ($160) {
                 if ($101) {
                  $j$010$i$i = 0;$this$011$i$i = 0;
                  while(1) {
                   $161 = (($e$i$i) + ($j$010$i$i<<2)|0);
                   $162 = HEAP32[$161>>2]|0;
                   $$sum1 = (($$sum) + ($j$010$i$i))|0;
                   $163 = (($84) + ($$sum1<<2)|0);
                   $164 = HEAP32[$163>>2]|0;
                   $165 = (($162) - ($164))|0;
                   $166 = Math_imul($165, $165)|0;
                   $167 = (($166) + ($this$011$i$i))|0;
                   $168 = (($j$010$i$i) + 1)|0;
                   $exitcond41$i$i = ($168|0)==($100|0);
                   if ($exitcond41$i$i) {
                    $this$0$lcssa$i$i = $167;
                    break;
                   } else {
                    $j$010$i$i = $168;$this$011$i$i = $167;
                   }
                  }
                 } else {
                  $this$0$lcssa$i$i = 0;
                 }
                 $169 = ($best$020$i$i|0)==(-1);
                 $170 = ($this$0$lcssa$i$i|0)<($best$020$i$i|0);
                 $or$cond$i$i = $169 | $170;
                 if (!($or$cond$i$i)) {
                  $best$1$i$i = $best$020$i$i;$index$4$i$i = $index$319$i$i;
                  break;
                 }
                 ;HEAP32[$p$i$i>>2]=HEAP32[$e$i$i>>2]|0;HEAP32[$p$i$i+4>>2]=HEAP32[$e$i$i+4>>2]|0;HEAP32[$p$i$i+8>>2]=HEAP32[$e$i$i+8>>2]|0;HEAP32[$p$i$i+12>>2]=HEAP32[$e$i$i+12>>2]|0;HEAP32[$p$i$i+16>>2]=HEAP32[$e$i$i+16>>2]|0;HEAP32[$p$i$i+20>>2]=HEAP32[$e$i$i+20>>2]|0;HEAP32[$p$i$i+24>>2]=HEAP32[$e$i$i+24>>2]|0;HEAP32[$p$i$i+28>>2]=HEAP32[$e$i$i+28>>2]|0;
                 $best$1$i$i = $this$0$lcssa$i$i;$index$4$i$i = $i$221$i$i;
                } else {
                 $best$1$i$i = $best$020$i$i;$index$4$i$i = $index$319$i$i;
                }
               } while(0);
               $171 = HEAP32[$e$i$i>>2]|0;
               $172 = ($171|0)<($155|0);
               if ($172) {
                $$lcssa$i$i = $e$i$i;$$lcssa7$i$i = $171;
               } else {
                $174 = $e$i$i;$j$113$i$i = 0;
                while(1) {
                 $173 = (($j$113$i$i) + 1)|0;
                 HEAP32[$174>>2] = 0;
                 $175 = (($e$i$i) + ($173<<2)|0);
                 $176 = HEAP32[$175>>2]|0;
                 $177 = ($176|0)<($155|0);
                 if ($177) {
                  $$lcssa$i$i = $175;$$lcssa7$i$i = $176;
                  break;
                 } else {
                  $174 = $175;$j$113$i$i = $173;
                 }
                }
               }
               $178 = ($$lcssa7$i$i|0)>(-1);
               if ($178) {
                $179 = (($$lcssa7$i$i) + ($96))|0;
                HEAP32[$$lcssa$i$i>>2] = $179;
                $181 = $179;
               } else {
                $181 = $$lcssa7$i$i;
               }
               $180 = (0 - ($181))|0;
               HEAP32[$$lcssa$i$i>>2] = $180;
               $182 = (($i$221$i$i) + 1)|0;
               $exitcond$i = ($182|0)==($156|0);
               if ($exitcond$i) {
                $index$5$i$i = $index$4$i$i;
                break;
               } else {
                $best$020$i$i = $best$1$i$i;$i$221$i$i = $182;$index$319$i$i = $index$4$i$i;
               }
              }
             } else {
              $index$5$i$i = $index$2$i$i;
             }
            } while(0);
            $183 = ($index$5$i$i|0)>(-1);
            $or$cond50$i$i = $101 & $183;
            if ($or$cond50$i$i) {
             $$09$i$i = $94;$i$38$i$i = 0;
             while(1) {
              $184 = (($p$i$i) + ($i$38$i$i<<2)|0);
              $185 = HEAP32[$184>>2]|0;
              $186 = ((($$09$i$i)) + 4|0);
              $187 = HEAP32[$$09$i$i>>2]|0;
              $188 = (($187) - ($185))|0;
              HEAP32[$$09$i$i>>2] = $188;
              $189 = (($i$38$i$i) + 1)|0;
              $exitcond$i$i = ($189|0)==($100|0);
              if ($exitcond$i$i) {
               break;
              } else {
               $$09$i$i = $186;$i$38$i$i = $189;
              }
             }
            }
            $190 = (_vorbis_book_encode($81,$index$5$i$i,$opb)|0);
            $191 = (($190) + ($bits$08$i))|0;
            $192 = (($i$09$i) + 1)|0;
            $exitcond15$i = ($192|0)==($86|0);
            if ($exitcond15$i) {
             $$lcssa72 = $191;
             break;
            }
            $$pre$i = HEAP32[$81>>2]|0;
            $100 = $$pre$i;$bits$08$i = $191;$i$09$i = $192;
           }
           $$pre43 = HEAP32[$66>>2]|0;
           $196 = $$pre43;$bits$0$lcssa$i = $$lcssa72;
          } else {
           $196 = $67;$bits$0$lcssa$i = 0;
          }
          $193 = HEAP32[$22>>2]|0;
          $194 = (($193) + ($bits$0$lcssa$i))|0;
          HEAP32[$22>>2] = $194;
          $195 = (($196) + ($i$121<<2)|0);
          $197 = HEAP32[$195>>2]|0;
          $198 = (($resbits) + ($197<<2)|0);
          $199 = HEAP32[$198>>2]|0;
          $200 = (($199) + ($bits$0$lcssa$i))|0;
          HEAP32[$198>>2] = $200;
         }
        }
        $201 = (($j$115) + 1)|0;
        $exitcond35 = ($201|0)==($ch|0);
        if ($exitcond35) {
         break;
        } else {
         $j$115 = $201;
        }
       }
      }
      $202 = (($k$120) + 1)|0;
      $203 = (($i$121) + 1)|0;
      $exitcond36 = ($202|0)==($50|0);
      if ($exitcond36) {
       break;
      } else {
       $i$121 = $203;$k$120 = $202;
      }
     }
     $26 = (($i$024) - ($umax))|0;
     $i$1$lcssa = $26;
    } else {
     $i$1$lcssa = $i$024;
    }
    $27 = ($i$1$lcssa|0)<($12|0);
    if ($27) {
     $i$024 = $i$1$lcssa;
    } else {
     break;
    }
   }
   $$pre44 = HEAP32[$13>>2]|0;
   $206 = $$pre44;
  } else {
   $206 = $207;
  }
  $204 = (($s$026) + 1)|0;
  $205 = ($204|0)<($206|0);
  if ($205) {
   $207 = $206;$s$026 = $204;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _ov_ilog($v) {
 $v = $v|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $ret$0$lcssa = 0, $ret$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($v|0)==(0);
 if ($0) {
  $ret$0$lcssa = 0;
 } else {
  $$01 = $v;$ret$02 = 0;
  while(1) {
   $1 = $$01 >>> 1;
   $2 = (($ret$02) + 1)|0;
   $3 = ($1|0)==(0);
   if ($3) {
    $ret$0$lcssa = $2;
    break;
   } else {
    $$01 = $1;$ret$02 = $2;
   }
  }
 }
 return ($ret$0$lcssa|0);
}
function __make_words($l,$n,$sparsecount) {
 $l = $l|0;
 $n = $n|0;
 $sparsecount = $sparsecount|0;
 var $$0 = 0, $$lcssa47 = 0, $$phi$trans$insert = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $count$024 = 0, $count$1 = 0, $count$1$lcssa = 0, $count$212 = 0, $count$212$us = 0, $count$3$us = 0;
 var $entry$020 = 0, $exitcond = 0, $exitcond34 = 0, $i$025 = 0, $i$114 = 0, $i$213 = 0, $i$213$us = 0, $j$015$lcssa = 0, $j$01549 = 0, $j$1 = 0, $j$1$in19 = 0, $j$1$in19$phi = 0, $j$118 = 0, $j$121 = 0, $j$29 = 0, $j$29$us = 0, $marker = 0, $or$cond = 0, $phitmp = 0, $temp$0$lcssa = 0;
 var $temp$0$lcssa$us = 0, $temp$010 = 0, $temp$010$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $marker = sp;
 $0 = ($sparsecount|0)!=(0);
 $1 = $0 ? $sparsecount : $n;
 $2 = $1 << 2;
 $3 = (_malloc($2)|0);
 _memset(($marker|0),0,132)|0;
 $4 = ($n|0)>(0);
 do {
  if ($4) {
   $5 = ((($marker)) + 4|0);
   $6 = ($sparsecount|0)==(0);
   $7 = $6&1;
   $count$024 = 0;$i$025 = 0;
   L3: while(1) {
    $8 = (($l) + ($i$025)|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = $9 << 24 >> 24;
    $11 = ($9<<24>>24)>(0);
    L5: do {
     if ($11) {
      $12 = (($marker) + ($10<<2)|0);
      $13 = HEAP32[$12>>2]|0;
      $14 = ($9<<24>>24)>(31);
      $15 = $13 >>> $10;
      $16 = ($15|0)==(0);
      $or$cond = $14 | $16;
      if (!($or$cond)) {
       label = 5;
       break L3;
      }
      $17 = (($3) + ($count$024<<2)|0);
      HEAP32[$17>>2] = $13;
      $18 = (($marker) + ($10<<2)|0);
      $19 = $13 & 1;
      $20 = ($19|0)==(0);
      L8: do {
       if ($20) {
        $30 = $13;$31 = $18;$j$01549 = $10;
        while(1) {
         $29 = (($30) + 1)|0;
         HEAP32[$31>>2] = $29;
         $32 = (($j$01549) + -1)|0;
         $33 = ($j$01549|0)>(1);
         if (!($33)) {
          break L8;
         }
         $$phi$trans$insert = (($marker) + ($32<<2)|0);
         $$pre = HEAP32[$$phi$trans$insert>>2]|0;
         $34 = (($marker) + ($32<<2)|0);
         $35 = $$pre & 1;
         $36 = ($35|0)==(0);
         if ($36) {
          $30 = $$pre;$31 = $34;$j$01549 = $32;
         } else {
          $$lcssa47 = $34;$j$015$lcssa = $32;
          label = 8;
          break;
         }
        }
       } else {
        $$lcssa47 = $18;$j$015$lcssa = $10;
        label = 8;
       }
      } while(0);
      do {
       if ((label|0) == 8) {
        label = 0;
        $22 = ($j$015$lcssa|0)==(1);
        if ($22) {
         $23 = HEAP32[$5>>2]|0;
         $24 = (($23) + 1)|0;
         HEAP32[$5>>2] = $24;
         break;
        } else {
         $25 = (($j$015$lcssa) + -1)|0;
         $26 = (($marker) + ($25<<2)|0);
         $27 = HEAP32[$26>>2]|0;
         $28 = $27 << 1;
         HEAP32[$$lcssa47>>2] = $28;
         break;
        }
       }
      } while(0);
      $j$118 = (($10) + 1)|0;
      $21 = ($j$118|0)<(33);
      if ($21) {
       $entry$020 = $13;$j$1$in19 = $10;$j$121 = $j$118;
       while(1) {
        $37 = (($marker) + ($j$121<<2)|0);
        $38 = HEAP32[$37>>2]|0;
        $39 = $38 >>> 1;
        $40 = ($39|0)==($entry$020|0);
        if (!($40)) {
         $$pn = 1;
         break L5;
        }
        $41 = (($marker) + ($j$1$in19<<2)|0);
        $42 = HEAP32[$41>>2]|0;
        $43 = $42 << 1;
        HEAP32[$37>>2] = $43;
        $j$1 = (($j$121) + 1)|0;
        $44 = ($j$1|0)<(33);
        if ($44) {
         $j$1$in19$phi = $j$121;$entry$020 = $38;$j$121 = $j$1;$j$1$in19 = $j$1$in19$phi;
        } else {
         $$pn = 1;
         break;
        }
       }
      } else {
       $$pn = 1;
      }
     } else {
      $$pn = $7;
     }
    } while(0);
    $count$1 = (($count$024) + ($$pn))|0;
    $45 = (($i$025) + 1)|0;
    $46 = ($45|0)<($n|0);
    if ($46) {
     $count$024 = $count$1;$i$025 = $45;
    } else {
     $count$1$lcssa = $count$1;
     label = 16;
     break;
    }
   }
   if ((label|0) == 5) {
    _free($3);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 16) {
    $phitmp = ($count$1$lcssa|0)==(1);
    if (!($phitmp)) {
     $i$114 = 1;
     label = 27;
     break;
    }
    $47 = ((($marker)) + 8|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($48|0)==(2);
    if ($49) {
     break;
    } else {
     $i$114 = 1;
     label = 27;
     break;
    }
   }
  } else {
   $i$114 = 1;
   label = 27;
  }
 } while(0);
 L27: do {
  if ((label|0) == 27) {
   while(1) {
    label = 0;
    $68 = (($marker) + ($i$114<<2)|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = (32 - ($i$114))|0;
    $71 = -1 >>> $70;
    $72 = $69 & $71;
    $73 = ($72|0)==(0);
    $66 = (($i$114) + 1)|0;
    if (!($73)) {
     break;
    }
    $67 = ($66|0)<(33);
    if ($67) {
     $i$114 = $66;
     label = 27;
    } else {
     break L27;
    }
   }
   _free($3);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 if (!($4)) {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 if ($0) {
  $count$212$us = 0;$i$213$us = 0;
 } else {
  $count$212 = 0;$i$213 = 0;
  while(1) {
   $74 = (($l) + ($i$213)|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = ($75<<24>>24)>(0);
   if ($76) {
    $77 = (($3) + ($count$212<<2)|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = $75 << 24 >> 24;
    $j$29 = 0;$temp$010 = 0;
    while(1) {
     $80 = $temp$010 << 1;
     $81 = $78 >>> $j$29;
     $82 = $81 & 1;
     $83 = $82 | $80;
     $84 = (($j$29) + 1)|0;
     $85 = ($84|0)<($79|0);
     if ($85) {
      $j$29 = $84;$temp$010 = $83;
     } else {
      $temp$0$lcssa = $83;
      break;
     }
    }
   } else {
    $temp$0$lcssa = 0;
   }
   $86 = (($count$212) + 1)|0;
   $87 = (($3) + ($count$212<<2)|0);
   HEAP32[$87>>2] = $temp$0$lcssa;
   $88 = (($i$213) + 1)|0;
   $exitcond = ($88|0)==($n|0);
   if ($exitcond) {
    $$0 = $3;
    break;
   } else {
    $count$212 = $86;$i$213 = $88;
   }
  }
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $50 = (($l) + ($i$213$us)|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = ($51<<24>>24)>(0);
  if ($52) {
   $65 = (($3) + ($count$212$us<<2)|0);
   $59 = HEAP32[$65>>2]|0;
   $64 = $51 << 24 >> 24;
   $j$29$us = 0;$temp$010$us = 0;
   while(1) {
    $57 = $temp$010$us << 1;
    $58 = $59 >>> $j$29$us;
    $60 = $58 & 1;
    $61 = $60 | $57;
    $62 = (($j$29$us) + 1)|0;
    $63 = ($62|0)<($64|0);
    if ($63) {
     $j$29$us = $62;$temp$010$us = $61;
    } else {
     $temp$0$lcssa$us = $61;
     break;
    }
   }
  } else {
   $temp$0$lcssa$us = 0;
  }
  $53 = ($51<<24>>24)==(0);
  if ($53) {
   $count$3$us = $count$212$us;
  } else {
   $54 = (($count$212$us) + 1)|0;
   $55 = (($3) + ($count$212$us<<2)|0);
   HEAP32[$55>>2] = $temp$0$lcssa$us;
   $count$3$us = $54;
  }
  $56 = (($i$213$us) + 1)|0;
  $exitcond34 = ($56|0)==($n|0);
  if ($exitcond34) {
   $$0 = $3;
   break;
  } else {
   $count$212$us = $count$3$us;$i$213$us = $56;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function __book_maptype1_quantvals($b) {
 $b = $b|0;
 var $$lcssa = 0, $$lcssa10 = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0;
 var $8 = 0.0, $9 = 0.0, $acc$01$us = 0, $acc1$02$us = 0, $i$03$us = 0, $or$cond$us = 0, $vals$0$us = 0, $vals$0$us$be = 0, $vals$0$us$be$v = 0, $vals$0$us$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($b)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$b>>2]|0;
 $3 = ($2|0)>(0);
 if (!($3)) {
  while(1) {
  }
 }
 $4 = (+($1|0));
 $5 = $4;
 $6 = (+($2|0));
 $7 = 1.0 / $6;
 $8 = $7;
 $9 = (+Math_pow((+$5),(+$8)));
 $10 = (+Math_floor((+$9)));
 $11 = (~~(($10)));
 $vals$0$us = $11;
 while(1) {
  $17 = (($vals$0$us) + 1)|0;
  $acc$01$us = 1;$acc1$02$us = 1;$i$03$us = 0;
  while(1) {
   $15 = Math_imul($acc$01$us, $vals$0$us)|0;
   $16 = Math_imul($acc1$02$us, $17)|0;
   $18 = (($i$03$us) + 1)|0;
   $19 = ($18|0)<($2|0);
   if ($19) {
    $acc$01$us = $15;$acc1$02$us = $16;$i$03$us = $18;
   } else {
    $$lcssa = $15;$$lcssa10 = $16;
    break;
   }
  }
  $12 = ($$lcssa|0)<=($1|0);
  $13 = ($$lcssa10|0)>($1|0);
  $or$cond$us = $12 & $13;
  if ($or$cond$us) {
   $vals$0$us$lcssa = $vals$0$us;
   break;
  }
  $14 = ($$lcssa|0)>($1|0);
  $vals$0$us$be$v = $14 ? -1 : 1;
  $vals$0$us$be = (($vals$0$us) + ($vals$0$us$be$v))|0;
  $vals$0$us = $vals$0$us$be;
 }
 return ($vals$0$us$lcssa|0);
}
function __book_unquantize($b,$n,$sparsemap) {
 $b = $b|0;
 $n = $n|0;
 $sparsemap = $sparsemap|0;
 var $$$i = 0.0, $$$i6 = 0.0, $$0 = 0, $$lcssa = 0, $$lcssa53 = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0;
 var $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0;
 var $98 = 0.0, $99 = 0.0, $acc$01$us$i = 0, $acc1$02$us$i = 0, $count$019 = 0, $count$1 = 0, $count$233 = 0, $count$3 = 0, $exitcond = 0, $fabsf = 0.0, $fabsf5 = 0.0, $fabsf5$us = 0.0, $fabsf5$us17 = 0.0, $i$03$us$i = 0, $indexdiv$013 = 0, $indexdiv$013$us = 0, $indexdiv$013$us14 = 0, $j$023 = 0, $j$135 = 0, $k$011 = 0;
 var $k$011$us = 0, $k$011$us16 = 0, $k$129 = 0, $last$0$$us = 0.0, $last$012 = 0.0, $last$012$us = 0.0, $last1$0$ = 0.0, $last1$030 = 0.0, $or$cond$us$i = 0, $switch = 0, $vals$0$us$be$i = 0, $vals$0$us$be$v$i = 0, $vals$0$us$i = 0, $vals$0$us$i$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($b)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $$off = (($1) + -1)|0;
 $switch = ($$off>>>0)<(2);
 if (!($switch)) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($b)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 2097151;
 $5 = (+($4|0));
 $6 = $3 >>> 21;
 $7 = $6 & 1023;
 $8 = ($3|0)<(0);
 $9 = -$5;
 $$$i = $8 ? $9 : $5;
 $10 = (($7) + -788)|0;
 $11 = (+_ldexp($$$i,$10));
 $12 = $11;
 $13 = ((($b)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 2097151;
 $16 = (+($15|0));
 $17 = $14 >>> 21;
 $18 = $17 & 1023;
 $19 = ($14|0)<(0);
 $20 = -$16;
 $$$i6 = $19 ? $20 : $16;
 $21 = (($18) + -788)|0;
 $22 = (+_ldexp($$$i6,$21));
 $23 = $22;
 $24 = HEAP32[$b>>2]|0;
 $25 = Math_imul($24, $n)|0;
 $26 = (_calloc($25,4)|0);
 if ((($1|0) == 1)) {
  $37 = ((($b)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($24|0)>(0);
  if (!($39)) {
   while(1) {
   }
  }
  $40 = (+($38|0));
  $41 = $40;
  $42 = (+($24|0));
  $43 = 1.0 / $42;
  $44 = $43;
  $45 = (+Math_pow((+$41),(+$44)));
  $46 = (+Math_floor((+$45)));
  $47 = (~~(($46)));
  $vals$0$us$i = $47;
  while(1) {
   $60 = (($vals$0$us$i) + 1)|0;
   $acc$01$us$i = 1;$acc1$02$us$i = 1;$i$03$us$i = 0;
   while(1) {
    $58 = Math_imul($acc$01$us$i, $vals$0$us$i)|0;
    $59 = Math_imul($acc1$02$us$i, $60)|0;
    $61 = (($i$03$us$i) + 1)|0;
    $exitcond = ($61|0)==($24|0);
    if ($exitcond) {
     $$lcssa = $58;$$lcssa53 = $59;
     break;
    } else {
     $acc$01$us$i = $58;$acc1$02$us$i = $59;$i$03$us$i = $61;
    }
   }
   $48 = ($$lcssa|0)<=($38|0);
   $49 = ($$lcssa53|0)>($38|0);
   $or$cond$us$i = $49 & $48;
   if ($or$cond$us$i) {
    $vals$0$us$i$lcssa = $vals$0$us$i;
    break;
   }
   $57 = ($$lcssa|0)>($38|0);
   $vals$0$us$be$v$i = $57 ? -1 : 1;
   $vals$0$us$be$i = (($vals$0$us$be$v$i) + ($vals$0$us$i))|0;
   $vals$0$us$i = $vals$0$us$be$i;
  }
  $50 = ($38|0)>(0);
  if (!($50)) {
   $$0 = $26;
   return ($$0|0);
  }
  $51 = ($sparsemap|0)==(0|0);
  $52 = ((($b)) + 8|0);
  $53 = ((($b)) + 32|0);
  $54 = $23;
  $55 = $12;
  $56 = ((($b)) + 28|0);
  $count$019 = 0;$j$023 = 0;
  while(1) {
   if ($51) {
    $66 = HEAP32[$53>>2]|0;
    $67 = HEAP32[$56>>2]|0;
    $68 = ($67|0)==(0);
    $69 = Math_imul($24, $count$019)|0;
    if ($68) {
     $indexdiv$013$us14 = 1;$k$011$us16 = 0;
     while(1) {
      $92 = (($j$023|0) / ($indexdiv$013$us14|0))&-1;
      $93 = (($92|0) % ($vals$0$us$i$lcssa|0))&-1;
      $94 = (($66) + ($93<<2)|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = (+($95|0));
      $fabsf5$us17 = (+Math_abs((+$96)));
      $97 = $fabsf5$us17;
      $98 = $97 * $54;
      $99 = $55 + $98;
      $100 = $99;
      $101 = (($69) + ($k$011$us16))|0;
      $102 = (($26) + ($101<<2)|0);
      HEAPF32[$102>>2] = $100;
      $103 = Math_imul($indexdiv$013$us14, $vals$0$us$i$lcssa)|0;
      $104 = (($k$011$us16) + 1)|0;
      $105 = ($104|0)<($24|0);
      if ($105) {
       $indexdiv$013$us14 = $103;$k$011$us16 = $104;
      } else {
       label = 21;
       break;
      }
     }
    } else {
     $indexdiv$013 = 1;$k$011 = 0;$last$012 = 0.0;
     while(1) {
      $106 = (($j$023|0) / ($indexdiv$013|0))&-1;
      $107 = (($106|0) % ($vals$0$us$i$lcssa|0))&-1;
      $108 = (($66) + ($107<<2)|0);
      $109 = HEAP32[$108>>2]|0;
      $110 = (+($109|0));
      $fabsf5 = (+Math_abs((+$110)));
      $111 = $fabsf5;
      $112 = $111 * $54;
      $113 = $last$012;
      $114 = $113 + $55;
      $115 = $114 + $112;
      $116 = $115;
      $117 = (($69) + ($k$011))|0;
      $118 = (($26) + ($117<<2)|0);
      HEAPF32[$118>>2] = $116;
      $119 = Math_imul($indexdiv$013, $vals$0$us$i$lcssa)|0;
      $120 = (($k$011) + 1)|0;
      $121 = ($120|0)<($24|0);
      if ($121) {
       $indexdiv$013 = $119;$k$011 = $120;$last$012 = $116;
      } else {
       label = 21;
       break;
      }
     }
    }
   } else {
    $62 = HEAP32[$52>>2]|0;
    $63 = (($62) + ($j$023)|0);
    $64 = HEAP8[$63>>0]|0;
    $65 = ($64<<24>>24)==(0);
    if ($65) {
     $count$1 = $count$019;
    } else {
     $70 = HEAP32[$53>>2]|0;
     $71 = HEAP32[$56>>2]|0;
     $72 = ($71|0)==(0);
     $73 = (($sparsemap) + ($count$019<<2)|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = Math_imul($74, $24)|0;
     $indexdiv$013$us = 1;$k$011$us = 0;$last$012$us = 0.0;
     while(1) {
      $76 = (($j$023|0) / ($indexdiv$013$us|0))&-1;
      $77 = (($76|0) % ($vals$0$us$i$lcssa|0))&-1;
      $78 = (($70) + ($77<<2)|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = (+($79|0));
      $fabsf5$us = (+Math_abs((+$80)));
      $81 = $fabsf5$us;
      $82 = $81 * $54;
      $83 = $last$012$us;
      $84 = $83 + $55;
      $85 = $84 + $82;
      $86 = $85;
      $last$0$$us = $72 ? $last$012$us : $86;
      $87 = (($75) + ($k$011$us))|0;
      $88 = (($26) + ($87<<2)|0);
      HEAPF32[$88>>2] = $86;
      $89 = Math_imul($indexdiv$013$us, $vals$0$us$i$lcssa)|0;
      $90 = (($k$011$us) + 1)|0;
      $91 = ($90|0)<($24|0);
      if ($91) {
       $indexdiv$013$us = $89;$k$011$us = $90;$last$012$us = $last$0$$us;
      } else {
       label = 21;
       break;
      }
     }
    }
   }
   if ((label|0) == 21) {
    label = 0;
    $122 = (($count$019) + 1)|0;
    $count$1 = $122;
   }
   $123 = (($j$023) + 1)|0;
   $124 = ($123|0)<($38|0);
   if ($124) {
    $count$019 = $count$1;$j$023 = $123;
   } else {
    $$0 = $26;
    break;
   }
  }
  return ($$0|0);
 } else if ((($1|0) == 2)) {
  $27 = ((($b)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)>(0);
  if (!($29)) {
   $$0 = $26;
   return ($$0|0);
  }
  $30 = ($sparsemap|0)!=(0|0);
  $31 = ((($b)) + 8|0);
  $32 = ((($b)) + 32|0);
  $33 = $23;
  $34 = $12;
  $35 = ((($b)) + 28|0);
  $36 = ($24|0)>(0);
  $count$233 = 0;$j$135 = 0;
  while(1) {
   if ($30) {
    $125 = HEAP32[$31>>2]|0;
    $126 = (($125) + ($j$135)|0);
    $127 = HEAP8[$126>>0]|0;
    $128 = ($127<<24>>24)==(0);
    if ($128) {
     $count$3 = $count$233;
    } else {
     label = 25;
    }
   } else {
    label = 25;
   }
   if ((label|0) == 25) {
    label = 0;
    if ($36) {
     $129 = HEAP32[$32>>2]|0;
     $130 = HEAP32[$35>>2]|0;
     $131 = ($130|0)==(0);
     $132 = (($sparsemap) + ($count$233<<2)|0);
     $133 = Math_imul($24, $j$135)|0;
     $134 = Math_imul($24, $count$233)|0;
     $k$129 = 0;$last1$030 = 0.0;
     while(1) {
      $135 = (($133) + ($k$129))|0;
      $136 = (($129) + ($135<<2)|0);
      $137 = HEAP32[$136>>2]|0;
      $138 = (+($137|0));
      $fabsf = (+Math_abs((+$138)));
      $139 = $fabsf;
      $140 = $139 * $33;
      $141 = $last1$030;
      $142 = $141 + $34;
      $143 = $142 + $140;
      $144 = $143;
      $last1$0$ = $131 ? $last1$030 : $144;
      if ($30) {
       $145 = HEAP32[$132>>2]|0;
       $146 = Math_imul($145, $24)|0;
       $147 = (($146) + ($k$129))|0;
       $148 = (($26) + ($147<<2)|0);
       HEAPF32[$148>>2] = $144;
      } else {
       $149 = (($134) + ($k$129))|0;
       $150 = (($26) + ($149<<2)|0);
       HEAPF32[$150>>2] = $144;
      }
      $151 = (($k$129) + 1)|0;
      $152 = ($151|0)<($24|0);
      if ($152) {
       $k$129 = $151;$last1$030 = $last1$0$;
      } else {
       break;
      }
     }
    }
    $153 = (($count$233) + 1)|0;
    $count$3 = $153;
   }
   $154 = (($j$135) + 1)|0;
   $155 = ($154|0)<($28|0);
   if ($155) {
    $count$233 = $count$3;$j$135 = $154;
   } else {
    $$0 = $26;
    break;
   }
  }
  return ($$0|0);
 } else {
  $$0 = $26;
  return ($$0|0);
 }
 return (0)|0;
}
function _vorbis_staticbook_destroy($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($b)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  return;
 }
 $3 = ((($b)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  _free($4);
 }
 $6 = ((($b)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  _free($7);
 }
 _free($b);
 return;
}
function _vorbis_book_clear($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($b)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _free($1);
 }
 $3 = ((($b)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  _free($4);
 }
 $6 = ((($b)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  _free($7);
 }
 $9 = ((($b)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  _free($10);
 }
 $12 = ((($b)) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  _free($13);
 }
 dest=$b; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 return;
}
function _vorbis_book_init_encode($c,$s) {
 $c = $c|0;
 $s = $s|0;
 var $$$i = 0.0, $$$i2 = 0.0, $$lcssa = 0, $$lcssa8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $acc$01$us$i = 0;
 var $acc1$02$us$i = 0, $exitcond = 0, $i$03$us$i = 0, $or$cond$us$i = 0, $rintf = 0.0, $rintf1 = 0.0, $vals$0$us$be$i = 0, $vals$0$us$be$v$i = 0, $vals$0$us$i = 0, $vals$0$us$i$lcssa = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest=$c; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($c)) + 12|0);
 HEAP32[$0>>2] = $s;
 $1 = ((($s)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($c)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($c)) + 8|0);
 HEAP32[$4>>2] = $2;
 $5 = HEAP32[$s>>2]|0;
 HEAP32[$c>>2] = $5;
 $6 = ((($s)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__make_words($7,$2,0)|0);
 $9 = ((($c)) + 20|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$1>>2]|0;
 $11 = HEAP32[$s>>2]|0;
 $12 = ($11|0)>(0);
 if (!($12)) {
  while(1) {
  }
 }
 $13 = (+($10|0));
 $14 = $13;
 $15 = (+($11|0));
 $16 = 1.0 / $15;
 $17 = $16;
 $18 = (+Math_pow((+$14),(+$17)));
 $19 = (+Math_floor((+$18)));
 $20 = (~~(($19)));
 $vals$0$us$i = $20;
 while(1) {
  $26 = (($vals$0$us$i) + 1)|0;
  $acc$01$us$i = 1;$acc1$02$us$i = 1;$i$03$us$i = 0;
  while(1) {
   $24 = Math_imul($acc$01$us$i, $vals$0$us$i)|0;
   $25 = Math_imul($acc1$02$us$i, $26)|0;
   $27 = (($i$03$us$i) + 1)|0;
   $exitcond = ($27|0)==($11|0);
   if ($exitcond) {
    $$lcssa = $24;$$lcssa8 = $25;
    break;
   } else {
    $acc$01$us$i = $24;$acc1$02$us$i = $25;$i$03$us$i = $27;
   }
  }
  $21 = ($$lcssa|0)<=($10|0);
  $22 = ($$lcssa8|0)>($10|0);
  $or$cond$us$i = $22 & $21;
  if ($or$cond$us$i) {
   $vals$0$us$i$lcssa = $vals$0$us$i;
   break;
  }
  $23 = ($$lcssa|0)>($10|0);
  $vals$0$us$be$v$i = $23 ? -1 : 1;
  $vals$0$us$be$i = (($vals$0$us$be$v$i) + ($vals$0$us$i))|0;
  $vals$0$us$i = $vals$0$us$be$i;
 }
 $28 = ((($c)) + 44|0);
 HEAP32[$28>>2] = $vals$0$us$i$lcssa;
 $29 = ((($s)) + 16|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 2097151;
 $32 = (+($31|0));
 $33 = $30 >>> 21;
 $34 = $33 & 1023;
 $35 = ($30|0)<(0);
 $36 = -$32;
 $$$i = $35 ? $36 : $32;
 $37 = (($34) + -788)|0;
 $38 = (+_ldexp($$$i,$37));
 $39 = $38;
 $rintf = (+_rintf($39));
 $40 = (~~(($rintf)));
 $41 = ((($c)) + 48|0);
 HEAP32[$41>>2] = $40;
 $42 = ((($s)) + 20|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $43 & 2097151;
 $45 = (+($44|0));
 $46 = $43 >>> 21;
 $47 = $46 & 1023;
 $48 = ($43|0)<(0);
 $49 = -$45;
 $$$i2 = $48 ? $49 : $45;
 $50 = (($47) + -788)|0;
 $51 = (+_ldexp($$$i2,$50));
 $52 = $51;
 $rintf1 = (+_rintf($52));
 $53 = (~~(($rintf1)));
 $54 = ((($c)) + 52|0);
 HEAP32[$54>>2] = $53;
 return 0;
}
function _vorbis_book_init_decode($c,$s) {
 $c = $c|0;
 $s = $s|0;
 var $$ = 0, $$0 = 0, $$01$i = 0, $$alloca_mul = 0, $$alloca_mul1 = 0, $$lcssa63 = 0, $$n$0 = 0, $$pre = 0, $$pre52 = 0, $$pre54 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond48 = 0, $exitcond49 = 0, $exitcond50 = 0, $hi$012 = 0, $hi$1$lcssa = 0, $hi$18 = 0, $hi$2 = 0, $hival$0 = 0, $i$040 = 0;
 var $i$136 = 0, $i$233 = 0, $i$330 = 0, $i$425 = 0, $i$519 = 0, $i$616 = 0, $i$710 = 0, $j$014 = 0, $lo$011 = 0, $lo$1 = 0, $lo$1$lcssa = 0, $lo$1$op = 0, $lo$1$op$op = 0, $lo$2 = 0, $n$039 = 0, $n$2$lcssa = 0, $n$224 = 0, $n$3 = 0, $n$4$lcssa55 = 0, $n$418 = 0;
 var $n$5 = 0, $n$5$lcssa = 0, $phitmp = 0, $ret$0$lcssa$i = 0, $ret$02$i = 0, $ret$02$i$lcssa = 0, $storemerge2 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest=$c; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($s)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if ($2) {
  $3 = ((($s)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $i$040 = 0;$n$039 = 0;
  while(1) {
   $5 = (($4) + ($i$040)|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)>(0);
   $8 = $7&1;
   $$n$0 = (($8) + ($n$039))|0;
   $9 = (($i$040) + 1)|0;
   $10 = ($9|0)<($1|0);
   if ($10) {
    $i$040 = $9;$n$039 = $$n$0;
   } else {
    $13 = $$n$0;
    break;
   }
  }
 } else {
  $13 = 0;
 }
 $11 = ((($c)) + 4|0);
 HEAP32[$11>>2] = $1;
 $12 = ((($c)) + 8|0);
 HEAP32[$12>>2] = $13;
 $14 = HEAP32[$s>>2]|0;
 HEAP32[$c>>2] = $14;
 $15 = ($13|0)>(0);
 if (!($15)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = ((($s)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (__make_words($17,$1,$13)|0);
 $19 = $13 << 2;
 $$alloca_mul = $19;
 $20 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
 $21 = ($18|0)==(0|0);
 if ($21) {
  $221 = ((($c)) + 16|0);
  $222 = HEAP32[$221>>2]|0;
  $223 = ($222|0)==(0|0);
  if (!($223)) {
   _free($222);
  }
  $224 = ((($c)) + 20|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = ($225|0)==(0|0);
  if (!($226)) {
   _free($225);
  }
  $227 = ((($c)) + 24|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = ($228|0)==(0|0);
  if (!($229)) {
   _free($228);
  }
  $230 = ((($c)) + 28|0);
  $231 = HEAP32[$230>>2]|0;
  $232 = ($231|0)==(0|0);
  if (!($232)) {
   _free($231);
  }
  $233 = ((($c)) + 32|0);
  $234 = HEAP32[$233>>2]|0;
  $235 = ($234|0)==(0|0);
  if (!($235)) {
   _free($234);
  }
  dest=$c; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $i$136 = 0;
 }
 while(1) {
  $22 = (($18) + ($i$136<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 >>> 16;
  $25 = $23 << 16;
  $26 = $24 | $25;
  $27 = $26 >>> 8;
  $28 = $27 & 16711935;
  $29 = $26 << 8;
  $30 = $29 & -16711936;
  $31 = $28 | $30;
  $32 = $31 >>> 4;
  $33 = $32 & 252645135;
  $34 = $31 << 4;
  $35 = $34 & -252645136;
  $36 = $33 | $35;
  $37 = $36 >>> 2;
  $38 = $37 & 858993459;
  $39 = $36 << 2;
  $40 = $39 & -858993460;
  $41 = $38 | $40;
  $42 = $41 >>> 1;
  $43 = $42 & 1431655765;
  $44 = $41 << 1;
  $45 = $44 & -1431655766;
  $46 = $43 | $45;
  HEAP32[$22>>2] = $46;
  $47 = (($20) + ($i$136<<2)|0);
  HEAP32[$47>>2] = $22;
  $48 = (($i$136) + 1)|0;
  $exitcond50 = ($48|0)==($13|0);
  if ($exitcond50) {
   break;
  } else {
   $i$136 = $48;
  }
 }
 _qsort($20,$13,4,10);
 $$alloca_mul1 = $19;
 $49 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul1)|0)+15)&-16)|0;;
 $50 = (_malloc($19)|0);
 $51 = ((($c)) + 20|0);
 HEAP32[$51>>2] = $50;
 $52 = $18;
 $i$233 = 0;
 while(1) {
  $53 = (($20) + ($i$233<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $54;
  $56 = (($55) - ($52))|0;
  $57 = $56 >> 2;
  $58 = (($49) + ($57<<2)|0);
  HEAP32[$58>>2] = $i$233;
  $59 = (($i$233) + 1)|0;
  $exitcond49 = ($59|0)==($13|0);
  if ($exitcond49) {
   $i$330 = 0;
   break;
  } else {
   $i$233 = $59;
  }
 }
 while(1) {
  $60 = (($18) + ($i$330<<2)|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($49) + ($i$330<<2)|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($50) + ($63<<2)|0);
  HEAP32[$64>>2] = $61;
  $65 = (($i$330) + 1)|0;
  $exitcond48 = ($65|0)==($13|0);
  if ($exitcond48) {
   break;
  } else {
   $i$330 = $65;
  }
 }
 _free($18);
 $66 = (__book_unquantize($s,$13,$49)|0);
 $67 = ((($c)) + 16|0);
 HEAP32[$67>>2] = $66;
 $68 = (_malloc($19)|0);
 $69 = ((($c)) + 24|0);
 HEAP32[$69>>2] = $68;
 $70 = HEAP32[$0>>2]|0;
 $71 = ($70|0)>(0);
 if ($71) {
  $$pre = HEAP32[$16>>2]|0;
  $i$425 = 0;$n$224 = 0;
  while(1) {
   $72 = (($$pre) + ($i$425)|0);
   $73 = HEAP8[$72>>0]|0;
   $74 = ($73<<24>>24)>(0);
   if ($74) {
    $75 = (($n$224) + 1)|0;
    $76 = (($49) + ($n$224<<2)|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (($68) + ($77<<2)|0);
    HEAP32[$78>>2] = $i$425;
    $n$3 = $75;
   } else {
    $n$3 = $n$224;
   }
   $79 = (($i$425) + 1)|0;
   $80 = ($79|0)<($70|0);
   if ($80) {
    $i$425 = $79;$n$224 = $n$3;
   } else {
    $n$2$lcssa = $n$3;
    break;
   }
  }
 } else {
  $n$2$lcssa = 0;
 }
 $81 = (_malloc($n$2$lcssa)|0);
 $82 = ((($c)) + 28|0);
 HEAP32[$82>>2] = $81;
 $83 = ((($c)) + 40|0);
 HEAP32[$83>>2] = 0;
 if ($71) {
  $$pre52 = HEAP32[$16>>2]|0;
  $236 = 0;$85 = $$pre52;$i$519 = 0;$n$418 = 0;
  while(1) {
   $84 = (($85) + ($i$519)|0);
   $86 = HEAP8[$84>>0]|0;
   $87 = ($86<<24>>24)>(0);
   if ($87) {
    $88 = (($n$418) + 1)|0;
    $89 = (($49) + ($n$418<<2)|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = HEAP32[$82>>2]|0;
    $92 = (($91) + ($90)|0);
    HEAP8[$92>>0] = $86;
    $93 = HEAP32[$16>>2]|0;
    $94 = (($93) + ($i$519)|0);
    $95 = HEAP8[$94>>0]|0;
    $96 = $95 << 24 >> 24;
    $97 = HEAP32[$83>>2]|0;
    $98 = ($96|0)>($97|0);
    if ($98) {
     HEAP32[$83>>2] = $96;
     $237 = $96;$238 = $93;$n$5 = $88;
    } else {
     $237 = $97;$238 = $93;$n$5 = $88;
    }
   } else {
    $237 = $236;$238 = $85;$n$5 = $n$418;
   }
   $99 = (($i$519) + 1)|0;
   $100 = HEAP32[$0>>2]|0;
   $101 = ($99|0)<($100|0);
   if ($101) {
    $236 = $237;$85 = $238;$i$519 = $99;$n$418 = $n$5;
   } else {
    $$lcssa63 = $237;$n$5$lcssa = $n$5;
    break;
   }
  }
  $102 = ($n$5$lcssa|0)==(1);
  if ($102) {
   $103 = ($$lcssa63|0)==(1);
   if ($103) {
    $104 = ((($c)) + 36|0);
    HEAP32[$104>>2] = 1;
    $105 = (_calloc(2,4)|0);
    $106 = ((($c)) + 32|0);
    HEAP32[$106>>2] = $105;
    $107 = ((($105)) + 4|0);
    HEAP32[$107>>2] = 1;
    HEAP32[$105>>2] = 1;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $n$4$lcssa55 = 1;
   }
  } else {
   $n$4$lcssa55 = $n$5$lcssa;
  }
 } else {
  $n$4$lcssa55 = 0;
 }
 $108 = HEAP32[$12>>2]|0;
 $109 = ($108|0)==(0);
 if ($109) {
  $ret$0$lcssa$i = -4;
 } else {
  $$01$i = $108;$ret$02$i = 0;
  while(1) {
   $110 = $$01$i >>> 1;
   $111 = (($ret$02$i) + 1)|0;
   $112 = ($110|0)==(0);
   if ($112) {
    $ret$02$i$lcssa = $ret$02$i;
    break;
   } else {
    $$01$i = $110;$ret$02$i = $111;
   }
  }
  $phitmp = (($ret$02$i$lcssa) + -3)|0;
  $ret$0$lcssa$i = $phitmp;
 }
 $113 = ((($c)) + 36|0);
 $114 = ($ret$0$lcssa$i|0)<(5);
 $$ = $114 ? 5 : $ret$0$lcssa$i;
 $115 = ($$|0)>(8);
 $storemerge2 = $115 ? 8 : $$;
 HEAP32[$113>>2] = $storemerge2;
 $116 = 1 << $storemerge2;
 $117 = (_calloc($116,4)|0);
 $118 = ((($c)) + 32|0);
 HEAP32[$118>>2] = $117;
 $119 = ($n$4$lcssa55|0)>(0);
 if ($119) {
  $124 = $storemerge2;$i$616 = 0;
  while(1) {
   $120 = HEAP32[$82>>2]|0;
   $121 = (($120) + ($i$616)|0);
   $122 = HEAP8[$121>>0]|0;
   $123 = $122 << 24 >> 24;
   $125 = ($124|0)<($123|0);
   if ($125) {
    $239 = $124;
   } else {
    $126 = HEAP32[$51>>2]|0;
    $127 = (($126) + ($i$616<<2)|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = $128 >>> 16;
    $130 = $128 << 16;
    $131 = $129 | $130;
    $132 = $131 >>> 8;
    $133 = $132 & 16711935;
    $134 = $131 << 8;
    $135 = $134 & -16711936;
    $136 = $133 | $135;
    $137 = $136 >>> 4;
    $138 = $137 & 252645135;
    $139 = $136 << 4;
    $140 = $139 & -252645136;
    $141 = $138 | $140;
    $142 = $141 >>> 2;
    $143 = $142 & 858993459;
    $144 = $141 << 2;
    $145 = $144 & -858993460;
    $146 = $143 | $145;
    $147 = $146 >>> 1;
    $148 = $147 & 1431655765;
    $149 = $146 << 1;
    $150 = $149 & -1431655766;
    $151 = $148 | $150;
    $152 = (($124) - ($123))|0;
    $153 = ($152|0)==(31);
    if ($153) {
     $239 = $124;
    } else {
     $154 = (($i$616) + 1)|0;
     $156 = $123;$j$014 = 0;
     while(1) {
      $155 = $j$014 << $156;
      $157 = $151 | $155;
      $158 = (($117) + ($157<<2)|0);
      HEAP32[$158>>2] = $154;
      $159 = (($j$014) + 1)|0;
      $160 = HEAP32[$113>>2]|0;
      $161 = HEAP8[$121>>0]|0;
      $162 = $161 << 24 >> 24;
      $163 = (($160) - ($162))|0;
      $164 = 1 << $163;
      $165 = ($159|0)<($164|0);
      if ($165) {
       $156 = $162;$j$014 = $159;
      } else {
       $239 = $160;
       break;
      }
     }
    }
   }
   $166 = (($i$616) + 1)|0;
   $exitcond = ($166|0)==($n$4$lcssa55|0);
   if ($exitcond) {
    $168 = $239;
    break;
   } else {
    $124 = $239;$i$616 = $166;
   }
  }
 } else {
  $168 = $storemerge2;
 }
 $167 = (31 - ($168))|0;
 $169 = -2 << $167;
 $170 = ($storemerge2|0)==(31);
 if ($170) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $172 = $168;$hi$012 = 0;$i$710 = 0;$lo$011 = 0;
 }
 while(1) {
  $171 = (32 - ($172))|0;
  $173 = $i$710 << $171;
  $174 = $173 >>> 16;
  $175 = $173 << 16;
  $176 = $174 | $175;
  $177 = $176 >>> 8;
  $178 = $177 & 16711935;
  $179 = $176 << 8;
  $180 = $179 & -16711936;
  $181 = $178 | $180;
  $182 = $181 >>> 4;
  $183 = $182 & 252645135;
  $184 = $181 << 4;
  $185 = $184 & -252645136;
  $186 = $183 | $185;
  $187 = $186 >>> 2;
  $188 = $187 & 858993459;
  $189 = $186 << 2;
  $190 = $189 & -858993460;
  $191 = $188 | $190;
  $192 = $191 >>> 1;
  $193 = $192 & 1431655765;
  $194 = $191 << 1;
  $195 = $194 & -1431655766;
  $196 = $193 | $195;
  $197 = (($117) + ($196<<2)|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = ($198|0)==(0);
  if ($199) {
   $lo$1 = $lo$011;
   while(1) {
    $200 = (($lo$1) + 1)|0;
    $201 = ($200|0)<($n$4$lcssa55|0);
    if (!($201)) {
     $lo$1$lcssa = $lo$1;
     break;
    }
    $202 = HEAP32[$51>>2]|0;
    $203 = (($202) + ($200<<2)|0);
    $204 = HEAP32[$203>>2]|0;
    $205 = ($204>>>0)>($173>>>0);
    if ($205) {
     $lo$1$lcssa = $lo$1;
     break;
    } else {
     $lo$1 = $200;
    }
   }
   $206 = ($n$4$lcssa55|0)>($hi$012|0);
   L80: do {
    if ($206) {
     $207 = HEAP32[$51>>2]|0;
     $hi$18 = $hi$012;
     while(1) {
      $208 = (($207) + ($hi$18<<2)|0);
      $209 = HEAP32[$208>>2]|0;
      $210 = $209 & $169;
      $211 = ($173>>>0)<($210>>>0);
      if ($211) {
       $hi$1$lcssa = $hi$18;
       break L80;
      }
      $212 = (($hi$18) + 1)|0;
      $213 = ($n$4$lcssa55|0)>($212|0);
      if ($213) {
       $hi$18 = $212;
      } else {
       $hi$1$lcssa = $212;
       break;
      }
     }
    } else {
     $hi$1$lcssa = $hi$012;
    }
   } while(0);
   $214 = (($n$4$lcssa55) - ($hi$1$lcssa))|0;
   $215 = ($lo$1$lcssa>>>0)>(32767);
   $216 = ($214>>>0)>(32767);
   $hival$0 = $216 ? 32767 : $214;
   $lo$1$op = $lo$1$lcssa << 15;
   $lo$1$op$op = $lo$1$op | -2147483648;
   $217 = $215 ? -1073774592 : $lo$1$op$op;
   $218 = $217 | $hival$0;
   HEAP32[$197>>2] = $218;
   $hi$2 = $hi$1$lcssa;$lo$2 = $lo$1$lcssa;
  } else {
   $hi$2 = $hi$012;$lo$2 = $lo$011;
  }
  $219 = (($i$710) + 1)|0;
  $220 = ($219|0)<($116|0);
  if (!($220)) {
   $$0 = 0;
   break;
  }
  $$pre54 = HEAP32[$113>>2]|0;
  $172 = $$pre54;$hi$012 = $hi$2;$i$710 = $219;$lo$011 = $lo$2;
 }
 STACKTOP = sp;return ($$0|0);
}
function _sort32a($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$b>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 $5 = $4&1;
 $6 = ($1>>>0)<($3>>>0);
 $7 = $6&1;
 $8 = (($5) - ($7))|0;
 return ($8|0);
}
function _drft_forward($l,$data) {
 $l = $l|0;
 $data = $data|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum2$i = 0, $$sum3 = 0, $$sum4 = 0, $$sum8$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $exitcond17$i = 0, $i$010$i = 0, $iw$011$i = 0, $k1$014$i = 0, $l2$013$i = 0, $na$0$$i = 0, $na$012$i = 0, $na$2$i = 0, $na$2$i$lcssa = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$l>>2]|0;
 $1 = ($0|0)==(1);
 if ($1) {
  return;
 }
 $2 = ((($l)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($l)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(0);
 if (!($8)) {
  return;
 }
 $9 = (($7) + 1)|0;
 $$sum8$i = (($0) + -1)|0;
 $iw$011$i = $0;$k1$014$i = 0;$l2$013$i = $0;$na$012$i = 1;
 while(1) {
  $10 = (($9) - ($k1$014$i))|0;
  $11 = (($5) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($l2$013$i|0) / ($12|0))&-1;
  $14 = (($0|0) / ($l2$013$i|0))&-1;
  $15 = Math_imul($14, $13)|0;
  $16 = (($12) + -1)|0;
  $17 = Math_imul($14, $16)|0;
  $18 = (($iw$011$i) - ($17))|0;
  $19 = (1 - ($na$012$i))|0;
  do {
   if ((($12|0) == 2)) {
    $25 = ($19|0)==(0);
    $$sum = (($$sum8$i) + ($18))|0;
    $26 = (($3) + ($$sum<<2)|0);
    if ($25) {
     _dradf2($14,$13,$data,$3,$26);
     $na$2$i = 0;
     break;
    } else {
     _dradf2($14,$13,$3,$data,$26);
     $na$2$i = $19;
     break;
    }
   } else if ((($12|0) == 4)) {
    $20 = (($18) + ($14))|0;
    $21 = ($19|0)==(0);
    $$sum1 = (($$sum8$i) + ($18))|0;
    $22 = (($3) + ($$sum1<<2)|0);
    $$sum2 = (($$sum8$i) + ($20))|0;
    $23 = (($3) + ($$sum2<<2)|0);
    $$sum2$i = (($$sum8$i) + ($14))|0;
    $$sum3 = (($$sum2$i) + ($20))|0;
    $24 = (($3) + ($$sum3<<2)|0);
    if ($21) {
     _dradf4($14,$13,$data,$3,$22,$23,$24);
     $na$2$i = 0;
     break;
    } else {
     _dradf4($14,$13,$3,$data,$22,$23,$24);
     $na$2$i = $19;
     break;
    }
   } else {
    $27 = ($14|0)==(1);
    $na$0$$i = $27 ? $na$012$i : $19;
    $28 = ($na$0$$i|0)==(0);
    $$sum4 = (($$sum8$i) + ($18))|0;
    $29 = (($3) + ($$sum4<<2)|0);
    if ($28) {
     _dradfg($14,$12,$13,$15,$data,$data,$data,$3,$3,$29);
     $na$2$i = 1;
     break;
    } else {
     _dradfg($14,$12,$13,$15,$3,$3,$3,$data,$data,$29);
     $na$2$i = 0;
     break;
    }
   }
  } while(0);
  $30 = (($k1$014$i) + 1)|0;
  $exitcond17$i = ($30|0)==($7|0);
  if ($exitcond17$i) {
   $na$2$i$lcssa = $na$2$i;
   break;
  } else {
   $iw$011$i = $18;$k1$014$i = $30;$l2$013$i = $13;$na$012$i = $na$2$i;
  }
 }
 $31 = ($na$2$i$lcssa|0)!=(1);
 $32 = ($0|0)>(0);
 $or$cond$i = $32 & $31;
 if ($or$cond$i) {
  $i$010$i = 0;
 } else {
  return;
 }
 while(1) {
  $33 = (($3) + ($i$010$i<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($data) + ($i$010$i<<2)|0);
  HEAP32[$35>>2] = $34;
  $36 = (($i$010$i) + 1)|0;
  $exitcond$i = ($36|0)==($0|0);
  if ($exitcond$i) {
   break;
  } else {
   $i$010$i = $36;
  }
 }
 return;
}
function _drft_init($l,$n) {
 $l = $l|0;
 $n = $n|0;
 var $$lcssa = 0, $$not$i$i = 0, $$sum$i = 0, $$sum1$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $cosf$i$i = 0.0, $exitcond$i$i = 0, $exitcond28$i$i = 0, $exitcond29$i$i = 0, $fi$010$i$i = 0.0, $i$021$i$i = 0, $i$19$i$i = 0, $ii$08$i$i = 0, $indvars$iv$i$i = 0, $indvars$iv$i$i$lcssa18 = 0, $indvars$iv$in$i$i = 0, $indvars$iv$in$i$i$lcssa16 = 0, $is$018$i$i = 0, $is$1$lcssa$i$i = 0, $is$112$i$i = 0, $j$0$i$i = 0, $j$113$i$i = 0, $k1$019$i$i = 0, $l1$017$i$i = 0, $ld$011$i$i = 0;
 var $nf$0$i$i = 0, $nl$0$i$i = 0, $nl$1$i$i = 0, $ntry$0$i$i = 0, $ntry$1$ph$i$i = 0, $or$cond$i$i = 0, $or$cond33$i$i = 0, $sinf$i$i = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$l>>2] = $n;
 $0 = ($n*3)|0;
 $1 = (_calloc($0,4)|0);
 $2 = ((($l)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = (_calloc(32,4)|0);
 $4 = ((($l)) + 8|0);
 HEAP32[$4>>2] = $3;
 $5 = ($n|0)==(1);
 if ($5) {
  return;
 }
 $6 = ((($3)) + 8|0);
 $j$0$i$i = -1;$nf$0$i$i = 0;$nl$0$i$i = $n;$ntry$0$i$i = 0;
 L4: while(1) {
  $7 = (($j$0$i$i) + 1)|0;
  $8 = ($7|0)<(4);
  if ($8) {
   $9 = (25768 + ($7<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $ntry$1$ph$i$i = $10;
  } else {
   $11 = (($ntry$0$i$i) + 2)|0;
   $ntry$1$ph$i$i = $11;
  }
  $12 = ($ntry$1$ph$i$i|0)!=(2);
  $indvars$iv$in$i$i = $nf$0$i$i;$nl$1$i$i = $nl$0$i$i;
  while(1) {
   $indvars$iv$i$i = (($indvars$iv$in$i$i) + 1)|0;
   $13 = (($nl$1$i$i|0) / ($ntry$1$ph$i$i|0))&-1;
   $14 = Math_imul($13, $ntry$1$ph$i$i)|0;
   $15 = ($nl$1$i$i|0)==($14|0);
   if (!($15)) {
    $j$0$i$i = $7;$nf$0$i$i = $indvars$iv$in$i$i;$nl$0$i$i = $nl$1$i$i;$ntry$0$i$i = $ntry$1$ph$i$i;
    continue L4;
   }
   $16 = (($indvars$iv$in$i$i) + 2)|0;
   $17 = (($3) + ($16<<2)|0);
   HEAP32[$17>>2] = $ntry$1$ph$i$i;
   $18 = ($indvars$iv$in$i$i|0)==(0);
   $or$cond$i$i = $12 | $18;
   if (!($or$cond$i$i)) {
    $19 = ($indvars$iv$in$i$i|0)<(1);
    if (!($19)) {
     $i$021$i$i = 1;
     while(1) {
      $20 = (($indvars$iv$i$i) - ($i$021$i$i))|0;
      $21 = (($20) + 1)|0;
      $22 = (($3) + ($21<<2)|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = (($20) + 2)|0;
      $25 = (($3) + ($24<<2)|0);
      HEAP32[$25>>2] = $23;
      $26 = (($i$021$i$i) + 1)|0;
      $exitcond29$i$i = ($26|0)==($indvars$iv$i$i|0);
      if ($exitcond29$i$i) {
       break;
      } else {
       $i$021$i$i = $26;
      }
     }
    }
    HEAP32[$6>>2] = 2;
   }
   $27 = ($13|0)==(1);
   if ($27) {
    $$lcssa = $18;$indvars$iv$i$i$lcssa18 = $indvars$iv$i$i;$indvars$iv$in$i$i$lcssa16 = $indvars$iv$in$i$i;
    break L4;
   } else {
    $indvars$iv$in$i$i = $indvars$iv$i$i;$nl$1$i$i = $13;
   }
  }
 }
 HEAP32[$3>>2] = $n;
 $28 = ((($3)) + 4|0);
 HEAP32[$28>>2] = $indvars$iv$i$i$lcssa18;
 $29 = (+($n|0));
 $30 = 6.2831854820251465 / $29;
 $$not$i$i = $$lcssa ^ 1;
 $31 = ($indvars$iv$in$i$i$lcssa16|0)>(0);
 $or$cond33$i$i = $31 & $$not$i$i;
 if (!($or$cond33$i$i)) {
  return;
 }
 $32 = (($n) + 1)|0;
 $is$018$i$i = 0;$k1$019$i$i = 0;$l1$017$i$i = 1;
 while(1) {
  $33 = (($k1$019$i$i) + 2)|0;
  $34 = (($3) + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = Math_imul($35, $l1$017$i$i)|0;
  $37 = (($n|0) / ($36|0))&-1;
  $38 = ($35|0)>(1);
  if ($38) {
   $39 = ($37|0)>(2);
   $40 = (($35) + -1)|0;
   $is$112$i$i = $is$018$i$i;$j$113$i$i = 0;$ld$011$i$i = 0;
   while(1) {
    $41 = (($ld$011$i$i) + ($l1$017$i$i))|0;
    $42 = (+($41|0));
    $43 = $42 * $30;
    if ($39) {
     $fi$010$i$i = 0.0;$i$19$i$i = $is$112$i$i;$ii$08$i$i = 2;
     while(1) {
      $44 = $fi$010$i$i + 1.0;
      $45 = $43 * $44;
      $cosf$i$i = (+Math_cos((+$45)));
      $$sum$i = (($i$19$i$i) + ($n))|0;
      $46 = (($1) + ($$sum$i<<2)|0);
      HEAPF32[$46>>2] = $cosf$i$i;
      $sinf$i$i = (+Math_sin((+$45)));
      $47 = (($i$19$i$i) + 2)|0;
      $$sum1$i = (($32) + ($i$19$i$i))|0;
      $48 = (($1) + ($$sum1$i<<2)|0);
      HEAPF32[$48>>2] = $sinf$i$i;
      $49 = (($ii$08$i$i) + 2)|0;
      $50 = ($49|0)<($37|0);
      if ($50) {
       $fi$010$i$i = $44;$i$19$i$i = $47;$ii$08$i$i = $49;
      } else {
       break;
      }
     }
    }
    $51 = (($is$112$i$i) + ($37))|0;
    $52 = (($j$113$i$i) + 1)|0;
    $exitcond$i$i = ($52|0)==($40|0);
    if ($exitcond$i$i) {
     break;
    } else {
     $is$112$i$i = $51;$j$113$i$i = $52;$ld$011$i$i = $41;
    }
   }
   $53 = Math_imul($37, $40)|0;
   $54 = (($53) + ($is$018$i$i))|0;
   $is$1$lcssa$i$i = $54;
  } else {
   $is$1$lcssa$i$i = $is$018$i$i;
  }
  $55 = (($k1$019$i$i) + 1)|0;
  $exitcond28$i$i = ($55|0)==($indvars$iv$in$i$i$lcssa16|0);
  if ($exitcond28$i$i) {
   break;
  } else {
   $is$018$i$i = $is$1$lcssa$i$i;$k1$019$i$i = $55;$l1$017$i$i = $36;
  }
 }
 return;
}
function _drft_clear($l) {
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($l|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($l)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  _free($2);
 }
 $4 = ((($l)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  _free($5);
 }
 ;HEAP32[$l>>2]=0|0;HEAP32[$l+4>>2]=0|0;HEAP32[$l+8>>2]=0|0;
 return;
}
function _dradf4($ido,$l1,$cc,$ch,$wa1,$wa2,$wa3) {
 $ido = $ido|0;
 $l1 = $l1|0;
 $cc = $cc|0;
 $ch = $ch|0;
 $wa1 = $wa1|0;
 $wa2 = $wa2|0;
 $wa3 = $wa3|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0.0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0, $151 = 0;
 var $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0.0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0;
 var $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0;
 var $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $exitcond = 0, $exitcond24 = 0, $exitcond25 = 0, $i$09$us = 0, $k$019 = 0, $k$112$us = 0;
 var $k$25 = 0, $t1$018 = 0, $t1$111$us = 0, $t1$24 = 0, $t2$017 = 0, $t2$18$us = 0, $t2$23 = 0, $t3$016 = 0, $t4$015 = 0, $t4$17$us = 0, $t4$22 = 0, $t5$06$us = 0, $t6$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($l1, $ido)|0;
 $1 = $0 << 1;
 $2 = ($l1|0)>(0);
 if ($2) {
  $3 = ($0*3)|0;
  $4 = $ido << 2;
  $5 = (($4) + -1)|0;
  $6 = $ido << 1;
  $k$019 = 0;$t1$018 = $0;$t2$017 = $3;$t3$016 = 0;$t4$015 = $1;
  while(1) {
   $7 = (($cc) + ($t1$018<<2)|0);
   $8 = +HEAPF32[$7>>2];
   $9 = (($cc) + ($t2$017<<2)|0);
   $10 = +HEAPF32[$9>>2];
   $11 = $10 + $8;
   $12 = (($cc) + ($t3$016<<2)|0);
   $13 = +HEAPF32[$12>>2];
   $14 = (($cc) + ($t4$015<<2)|0);
   $15 = +HEAPF32[$14>>2];
   $16 = $15 + $13;
   $17 = $16 + $11;
   $18 = $t3$016 << 2;
   $19 = (($ch) + ($18<<2)|0);
   HEAPF32[$19>>2] = $17;
   $20 = $16 - $11;
   $21 = (($5) + ($18))|0;
   $22 = (($ch) + ($21<<2)|0);
   HEAPF32[$22>>2] = $20;
   $23 = +HEAPF32[$12>>2];
   $24 = +HEAPF32[$14>>2];
   $25 = $23 - $24;
   $26 = (($18) + ($6))|0;
   $27 = (($26) + -1)|0;
   $28 = (($ch) + ($27<<2)|0);
   HEAPF32[$28>>2] = $25;
   $29 = +HEAPF32[$9>>2];
   $30 = +HEAPF32[$7>>2];
   $31 = $29 - $30;
   $32 = (($ch) + ($26<<2)|0);
   HEAPF32[$32>>2] = $31;
   $33 = (($t1$018) + ($ido))|0;
   $34 = (($t2$017) + ($ido))|0;
   $35 = (($t3$016) + ($ido))|0;
   $36 = (($t4$015) + ($ido))|0;
   $37 = (($k$019) + 1)|0;
   $exitcond24 = ($37|0)==($l1|0);
   if ($exitcond24) {
    break;
   } else {
    $k$019 = $37;$t1$018 = $33;$t2$017 = $34;$t3$016 = $35;$t4$015 = $36;
   }
  }
 }
 $38 = ($ido|0)<(2);
 if ($38) {
  return;
 }
 $39 = ($ido|0)==(2);
 if (!($39)) {
  if ($2) {
   $40 = $ido << 1;
   $k$112$us = 0;$t1$111$us = 0;
   while(1) {
    $133 = $t1$111$us << 2;
    $134 = (($133) + ($40))|0;
    $i$09$us = 2;$t2$18$us = $t1$111$us;$t4$17$us = $133;$t5$06$us = $134;
    while(1) {
     $43 = (($t2$18$us) + 2)|0;
     $44 = (($t4$17$us) + 2)|0;
     $45 = (($t5$06$us) + -2)|0;
     $46 = (($43) + ($0))|0;
     $47 = (($i$09$us) + -2)|0;
     $48 = (($wa1) + ($47<<2)|0);
     $49 = +HEAPF32[$48>>2];
     $50 = (($46) + -1)|0;
     $51 = (($cc) + ($50<<2)|0);
     $52 = +HEAPF32[$51>>2];
     $53 = $52 * $49;
     $54 = (($i$09$us) + -1)|0;
     $55 = (($wa1) + ($54<<2)|0);
     $56 = +HEAPF32[$55>>2];
     $57 = (($cc) + ($46<<2)|0);
     $58 = +HEAPF32[$57>>2];
     $59 = $58 * $56;
     $60 = $59 + $53;
     $61 = $58 * $49;
     $62 = $56 * $52;
     $63 = $61 - $62;
     $64 = (($46) + ($0))|0;
     $65 = (($wa2) + ($47<<2)|0);
     $66 = +HEAPF32[$65>>2];
     $67 = (($64) + -1)|0;
     $68 = (($cc) + ($67<<2)|0);
     $69 = +HEAPF32[$68>>2];
     $70 = $69 * $66;
     $71 = (($wa2) + ($54<<2)|0);
     $72 = +HEAPF32[$71>>2];
     $73 = (($cc) + ($64<<2)|0);
     $74 = +HEAPF32[$73>>2];
     $75 = $74 * $72;
     $76 = $75 + $70;
     $77 = $74 * $66;
     $78 = $72 * $69;
     $79 = $77 - $78;
     $80 = (($64) + ($0))|0;
     $81 = (($wa3) + ($47<<2)|0);
     $82 = +HEAPF32[$81>>2];
     $83 = (($80) + -1)|0;
     $84 = (($cc) + ($83<<2)|0);
     $85 = +HEAPF32[$84>>2];
     $86 = $85 * $82;
     $87 = (($wa3) + ($54<<2)|0);
     $88 = +HEAPF32[$87>>2];
     $89 = (($cc) + ($80<<2)|0);
     $90 = +HEAPF32[$89>>2];
     $91 = $90 * $88;
     $92 = $91 + $86;
     $93 = $90 * $82;
     $94 = $88 * $85;
     $95 = $93 - $94;
     $96 = $92 + $60;
     $97 = $92 - $60;
     $98 = $95 + $63;
     $99 = $63 - $95;
     $100 = (($cc) + ($43<<2)|0);
     $101 = +HEAPF32[$100>>2];
     $102 = $101 + $79;
     $103 = $101 - $79;
     $104 = (($t2$18$us) + 1)|0;
     $105 = (($cc) + ($104<<2)|0);
     $106 = +HEAPF32[$105>>2];
     $107 = $106 + $76;
     $108 = $106 - $76;
     $109 = $96 + $107;
     $110 = $t4$17$us | 1;
     $111 = (($ch) + ($110<<2)|0);
     HEAPF32[$111>>2] = $109;
     $112 = $98 + $102;
     $113 = (($ch) + ($44<<2)|0);
     HEAPF32[$113>>2] = $112;
     $114 = $108 - $99;
     $115 = (($t5$06$us) + -3)|0;
     $116 = (($ch) + ($115<<2)|0);
     HEAPF32[$116>>2] = $114;
     $117 = $97 - $103;
     $118 = (($ch) + ($45<<2)|0);
     HEAPF32[$118>>2] = $117;
     $119 = $99 + $108;
     $120 = (($44) + ($40))|0;
     $121 = (($120) + -1)|0;
     $122 = (($ch) + ($121<<2)|0);
     HEAPF32[$122>>2] = $119;
     $123 = $97 + $103;
     $124 = (($ch) + ($120<<2)|0);
     HEAPF32[$124>>2] = $123;
     $125 = $107 - $96;
     $126 = (($45) + ($40))|0;
     $127 = (($126) + -1)|0;
     $128 = (($ch) + ($127<<2)|0);
     HEAPF32[$128>>2] = $125;
     $129 = $98 - $102;
     $130 = (($ch) + ($126<<2)|0);
     HEAPF32[$130>>2] = $129;
     $131 = (($i$09$us) + 2)|0;
     $132 = ($131|0)<($ido|0);
     if ($132) {
      $i$09$us = $131;$t2$18$us = $43;$t4$17$us = $44;$t5$06$us = $45;
     } else {
      break;
     }
    }
    $41 = (($t1$111$us) + ($ido))|0;
    $42 = (($k$112$us) + 1)|0;
    $exitcond25 = ($42|0)==($l1|0);
    if ($exitcond25) {
     break;
    } else {
     $k$112$us = $42;$t1$111$us = $41;
    }
   }
  }
  $135 = $ido & 1;
  $136 = ($135|0)==(0);
  if (!($136)) {
   return;
  }
 }
 $137 = (($ido) + -1)|0;
 $138 = (($137) + ($0))|0;
 $139 = $ido << 2;
 $140 = $ido << 1;
 if (!($2)) {
  return;
 }
 $141 = (($138) + ($1))|0;
 $k$25 = 0;$t1$24 = $138;$t2$23 = $141;$t4$22 = $ido;$t6$01 = $ido;
 while(1) {
  $142 = (($cc) + ($t1$24<<2)|0);
  $143 = +HEAPF32[$142>>2];
  $144 = (($cc) + ($t2$23<<2)|0);
  $145 = +HEAPF32[$144>>2];
  $146 = $145 + $143;
  $147 = $146 * -0.70710676908493042;
  $148 = $143 - $145;
  $149 = $148 * 0.70710676908493042;
  $150 = (($t6$01) + -1)|0;
  $151 = (($cc) + ($150<<2)|0);
  $152 = +HEAPF32[$151>>2];
  $153 = $149 + $152;
  $154 = (($t4$22) + -1)|0;
  $155 = (($ch) + ($154<<2)|0);
  HEAPF32[$155>>2] = $153;
  $156 = +HEAPF32[$151>>2];
  $157 = $156 - $149;
  $158 = (($t4$22) + ($140))|0;
  $159 = (($158) + -1)|0;
  $160 = (($ch) + ($159<<2)|0);
  HEAPF32[$160>>2] = $157;
  $161 = (($t1$24) + ($0))|0;
  $162 = (($cc) + ($161<<2)|0);
  $163 = +HEAPF32[$162>>2];
  $164 = $147 - $163;
  $165 = (($ch) + ($t4$22<<2)|0);
  HEAPF32[$165>>2] = $164;
  $166 = +HEAPF32[$162>>2];
  $167 = $166 + $147;
  $168 = (($ch) + ($158<<2)|0);
  HEAPF32[$168>>2] = $167;
  $169 = (($t1$24) + ($ido))|0;
  $170 = (($t2$23) + ($ido))|0;
  $171 = (($t4$22) + ($139))|0;
  $172 = (($t6$01) + ($ido))|0;
  $173 = (($k$25) + 1)|0;
  $exitcond = ($173|0)==($l1|0);
  if ($exitcond) {
   break;
  } else {
   $k$25 = $173;$t1$24 = $169;$t2$23 = $170;$t4$22 = $171;$t6$01 = $172;
  }
 }
 return;
}
function _dradf2($ido,$l1,$cc,$ch,$wa1) {
 $ido = $ido|0;
 $l1 = $l1|0;
 $cc = $cc|0;
 $ch = $ch|0;
 $wa1 = $wa1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0;
 var $81 = 0, $9 = 0, $exitcond = 0, $exitcond23 = 0, $exitcond24 = 0, $i$05$us = 0, $k$016 = 0, $k$111$us = 0, $k$21 = 0, $t1$017 = 0, $t1$112$us = 0, $t1$22 = 0, $t2$018 = 0, $t2$113$us = 0, $t2$23 = 0, $t3$06$us = 0, $t3$14 = 0, $t4$07$us = 0, $t5$08$us = 0, $t6$09$us = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($l1, $ido)|0;
 $1 = $ido << 1;
 $2 = ($l1|0)>(0);
 if ($2) {
  $3 = (($1) + -1)|0;
  $k$016 = 0;$t1$017 = 0;$t2$018 = $0;
  while(1) {
   $4 = (($cc) + ($t1$017<<2)|0);
   $5 = +HEAPF32[$4>>2];
   $6 = (($cc) + ($t2$018<<2)|0);
   $7 = +HEAPF32[$6>>2];
   $8 = $7 + $5;
   $9 = $t1$017 << 1;
   $10 = (($ch) + ($9<<2)|0);
   HEAPF32[$10>>2] = $8;
   $11 = +HEAPF32[$4>>2];
   $12 = +HEAPF32[$6>>2];
   $13 = $11 - $12;
   $14 = (($3) + ($9))|0;
   $15 = (($ch) + ($14<<2)|0);
   HEAPF32[$15>>2] = $13;
   $16 = (($t1$017) + ($ido))|0;
   $17 = (($t2$018) + ($ido))|0;
   $18 = (($k$016) + 1)|0;
   $exitcond23 = ($18|0)==($l1|0);
   if ($exitcond23) {
    break;
   } else {
    $k$016 = $18;$t1$017 = $16;$t2$018 = $17;
   }
  }
 }
 $19 = ($ido|0)<(2);
 if ($19) {
  return;
 }
 $20 = ($ido|0)==(2);
 if (!($20)) {
  if ($2) {
   $k$111$us = 0;$t1$112$us = 0;$t2$113$us = $0;
   while(1) {
    $64 = $t1$112$us << 1;
    $65 = (($64) + ($1))|0;
    $i$05$us = 2;$t3$06$us = $t2$113$us;$t4$07$us = $65;$t5$08$us = $t1$112$us;$t6$09$us = $64;
    while(1) {
     $24 = (($t3$06$us) + 2)|0;
     $25 = (($t4$07$us) + -2)|0;
     $26 = (($t5$08$us) + 2)|0;
     $27 = (($t6$09$us) + 2)|0;
     $28 = (($i$05$us) + -2)|0;
     $29 = (($wa1) + ($28<<2)|0);
     $30 = +HEAPF32[$29>>2];
     $31 = (($t3$06$us) + 1)|0;
     $32 = (($cc) + ($31<<2)|0);
     $33 = +HEAPF32[$32>>2];
     $34 = $33 * $30;
     $35 = (($i$05$us) + -1)|0;
     $36 = (($wa1) + ($35<<2)|0);
     $37 = +HEAPF32[$36>>2];
     $38 = (($cc) + ($24<<2)|0);
     $39 = +HEAPF32[$38>>2];
     $40 = $39 * $37;
     $41 = $40 + $34;
     $42 = $39 * $30;
     $43 = $37 * $33;
     $44 = $42 - $43;
     $45 = (($cc) + ($26<<2)|0);
     $46 = +HEAPF32[$45>>2];
     $47 = $44 + $46;
     $48 = (($ch) + ($27<<2)|0);
     HEAPF32[$48>>2] = $47;
     $49 = +HEAPF32[$45>>2];
     $50 = $44 - $49;
     $51 = (($ch) + ($25<<2)|0);
     HEAPF32[$51>>2] = $50;
     $52 = (($t5$08$us) + 1)|0;
     $53 = (($cc) + ($52<<2)|0);
     $54 = +HEAPF32[$53>>2];
     $55 = $54 + $41;
     $56 = $t6$09$us | 1;
     $57 = (($ch) + ($56<<2)|0);
     HEAPF32[$57>>2] = $55;
     $58 = +HEAPF32[$53>>2];
     $59 = $58 - $41;
     $60 = (($t4$07$us) + -3)|0;
     $61 = (($ch) + ($60<<2)|0);
     HEAPF32[$61>>2] = $59;
     $62 = (($i$05$us) + 2)|0;
     $63 = ($62|0)<($ido|0);
     if ($63) {
      $i$05$us = $62;$t3$06$us = $24;$t4$07$us = $25;$t5$08$us = $26;$t6$09$us = $27;
     } else {
      break;
     }
    }
    $21 = (($t1$112$us) + ($ido))|0;
    $22 = (($t2$113$us) + ($ido))|0;
    $23 = (($k$111$us) + 1)|0;
    $exitcond24 = ($23|0)==($l1|0);
    if ($exitcond24) {
     break;
    } else {
     $k$111$us = $23;$t1$112$us = $21;$t2$113$us = $22;
    }
   }
  }
  $66 = (($ido|0) % 2)&-1;
  $67 = ($66|0)==(1);
  if ($67) {
   return;
  }
 }
 $68 = (($ido) + -1)|0;
 if (!($2)) {
  return;
 }
 $69 = (($0) + ($68))|0;
 $k$21 = 0;$t1$22 = $ido;$t2$23 = $69;$t3$14 = $68;
 while(1) {
  $70 = (($cc) + ($t2$23<<2)|0);
  $71 = +HEAPF32[$70>>2];
  $72 = -$71;
  $73 = (($ch) + ($t1$22<<2)|0);
  HEAPF32[$73>>2] = $72;
  $74 = (($cc) + ($t3$14<<2)|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($t1$22) + -1)|0;
  $77 = (($ch) + ($76<<2)|0);
  HEAP32[$77>>2] = $75;
  $78 = (($t1$22) + ($1))|0;
  $79 = (($t2$23) + ($ido))|0;
  $80 = (($t3$14) + ($ido))|0;
  $81 = (($k$21) + 1)|0;
  $exitcond = ($81|0)==($l1|0);
  if ($exitcond) {
   break;
  } else {
   $k$21 = $81;$t1$22 = $78;$t2$23 = $79;$t3$14 = $80;
  }
 }
 return;
}
function _dradfg($ido,$ip,$l1,$idl1,$cc,$c1,$c2,$ch,$ch2,$wa) {
 $ido = $ido|0;
 $ip = $ip|0;
 $l1 = $l1|0;
 $idl1 = $idl1|0;
 $cc = $cc|0;
 $c1 = $c1|0;
 $c2 = $c2|0;
 $ch = $ch|0;
 $ch2 = $ch2|0;
 $wa = $wa|0;
 var $$not = 0, $$not241 = 0, $0 = 0.0, $1 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0;
 var $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0;
 var $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0;
 var $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0;
 var $204 = 0, $205 = 0.0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0.0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0.0, $253 = 0.0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0.0, $313 = 0, $314 = 0, $315 = 0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0.0, $329 = 0, $33 = 0;
 var $330 = 0.0, $331 = 0.0, $332 = 0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0.0, $35 = 0, $350 = 0, $351 = 0, $352 = 0.0, $353 = 0.0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0.0, $363 = 0, $364 = 0.0, $365 = 0.0, $366 = 0;
 var $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0;
 var $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $ai1$0112 = 0.0, $ai2$0107 = 0.0, $ar1$0113 = 0.0, $ar2$0108 = 0.0, $brmerge = 0, $cosf = 0.0, $exitcond = 0, $exitcond204 = 0, $exitcond206 = 0, $exitcond207 = 0, $exitcond208 = 0, $exitcond209 = 0, $exitcond210 = 0, $exitcond211 = 0, $exitcond212 = 0, $exitcond214 = 0, $exitcond215 = 0;
 var $exitcond216 = 0, $exitcond217 = 0, $exitcond218 = 0, $exitcond219 = 0, $exitcond220 = 0, $exitcond221 = 0, $exitcond222 = 0, $exitcond223 = 0, $exitcond225 = 0, $exitcond226 = 0, $exitcond227 = 0, $exitcond228 = 0, $exitcond229 = 0, $exitcond230 = 0, $exitcond231 = 0, $exitcond232 = 0, $exitcond233 = 0, $exitcond234 = 0, $exitcond235 = 0, $i$0164 = 0;
 var $i$1184 = 0, $i$2142 = 0, $i$3152 = 0, $i$475 = 0, $i$572 = 0, $i$638$us = 0, $i$728$us = 0, $idij$0165 = 0, $idij$1185 = 0, $ik$0202 = 0, $ik$1131 = 0, $ik$294 = 0, $ik$3101 = 0, $ik$482 = 0, $is$0175 = 0, $is$1190 = 0, $j$0199 = 0, $j$1036 = 0, $j$1176 = 0, $j$2191 = 0;
 var $j$3148 = 0, $j$4161 = 0, $j$5127 = 0, $j$6109 = 0, $j$787 = 0, $j$863 = 0, $j$951 = 0, $k$0194 = 0, $k$1027$us = 0, $k$1170 = 0, $k$2179 = 0, $k$3136 = 0, $k$4157 = 0, $k$5121 = 0, $k$680 = 0, $k$769 = 0, $k$856 = 0, $k$945$us = 0, $l$0116 = 0, $sinf = 0.0;
 var $t1$0198 = 0, $t1$1062 = 0, $t1$1150 = 0, $t1$1174 = 0, $t1$1235 = 0, $t1$2189 = 0, $t1$3147 = 0, $t1$4160 = 0, $t1$5126 = 0, $t1$6115 = 0, $t1$786 = 0, $t1$879 = 0, $t1$968 = 0, $t2$0193 = 0, $t2$1169 = 0, $t2$2183 = 0, $t2$3146 = 0, $t2$4159 = 0, $t2$5125 = 0, $t2$6114 = 0;
 var $t2$781 = 0, $t2$878 = 0, $t2$967 = 0, $t3$0163 = 0, $t3$1178 = 0, $t3$2141 = 0, $t3$3156 = 0, $t3$4120 = 0, $t3$574 = 0, $t3$661 = 0, $t3$749 = 0, $t3$834 = 0, $t4$0140 = 0, $t4$1155 = 0, $t4$2119 = 0, $t4$393 = 0, $t4$4106 = 0, $t4$573 = 0, $t4$660 = 0, $t4$748 = 0;
 var $t4$833 = 0, $t5$0134 = 0, $t5$1150 = 0, $t5$290 = 0, $t5$3105 = 0, $t5$453 = 0, $t5$547 = 0, $t5$632 = 0, $t6$0135 = 0, $t6$1151 = 0, $t6$291 = 0, $t6$397 = 0, $t6$454 = 0, $t6$541$us = 0, $t6$623$us = 0, $t7$092 = 0, $t7$198 = 0, $t7$255 = 0, $t7$342$us = 0, $t7$424$us = 0;
 var $t8$099 = 0, $t8$143$us = 0, $t8$225$us = 0, $t9$0100 = 0, $t9$144$us = 0, $t9$226$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+($ip|0));
 $1 = 6.2831854820251465 / $0;
 $cosf = (+Math_cos((+$1)));
 $sinf = (+Math_sin((+$1)));
 $2 = (($ip) + 1)|0;
 $3 = $2 >> 1;
 $4 = (($ido) + -1)|0;
 $5 = $4 >> 1;
 $6 = Math_imul($l1, $ido)|0;
 $7 = Math_imul($ip, $ido)|0;
 $8 = ($ido|0)==(1);
 L1: do {
  if (!($8)) {
   $9 = ($idl1|0)>(0);
   if ($9) {
    $ik$0202 = 0;
    while(1) {
     $13 = (($c2) + ($ik$0202<<2)|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($ch2) + ($ik$0202<<2)|0);
     HEAP32[$15>>2] = $14;
     $16 = (($ik$0202) + 1)|0;
     $exitcond235 = ($16|0)==($idl1|0);
     if ($exitcond235) {
      break;
     } else {
      $ik$0202 = $16;
     }
    }
   }
   $11 = ($ip|0)>(1);
   if ($11) {
    $12 = ($l1|0)>(0);
    $j$0199 = 1;$t1$0198 = 0;
    while(1) {
     $17 = (($t1$0198) + ($6))|0;
     if ($12) {
      $k$0194 = 0;$t2$0193 = $17;
      while(1) {
       $18 = (($c1) + ($t2$0193<<2)|0);
       $19 = HEAP32[$18>>2]|0;
       $20 = (($ch) + ($t2$0193<<2)|0);
       HEAP32[$20>>2] = $19;
       $21 = (($t2$0193) + ($ido))|0;
       $22 = (($k$0194) + 1)|0;
       $exitcond233 = ($22|0)==($l1|0);
       if ($exitcond233) {
        break;
       } else {
        $k$0194 = $22;$t2$0193 = $21;
       }
      }
     }
     $23 = (($j$0199) + 1)|0;
     $exitcond234 = ($23|0)==($ip|0);
     if ($exitcond234) {
      break;
     } else {
      $j$0199 = $23;$t1$0198 = $17;
     }
    }
   }
   $24 = (0 - ($ido))|0;
   $25 = ($5|0)>($l1|0);
   if ($25) {
    if ($11) {
     $28 = ($l1|0)>(0);
     $29 = ($ido|0)>(2);
     $is$0175 = $24;$j$1176 = 1;$t1$1174 = 0;
     while(1) {
      $30 = (($t1$1174) + ($6))|0;
      $31 = (($is$0175) + ($ido))|0;
      if ($28) {
       $32 = (($30) - ($ido))|0;
       $33 = (($31) + -1)|0;
       $k$1170 = 0;$t2$1169 = $32;
       while(1) {
        $34 = (($t2$1169) + ($ido))|0;
        if ($29) {
         $i$0164 = 2;$idij$0165 = $33;$t3$0163 = $34;
         while(1) {
          $35 = (($idij$0165) + 2)|0;
          $36 = (($t3$0163) + 2)|0;
          $37 = (($idij$0165) + 1)|0;
          $38 = (($wa) + ($37<<2)|0);
          $39 = +HEAPF32[$38>>2];
          $40 = (($t3$0163) + 1)|0;
          $41 = (($c1) + ($40<<2)|0);
          $42 = +HEAPF32[$41>>2];
          $43 = $42 * $39;
          $44 = (($wa) + ($35<<2)|0);
          $45 = +HEAPF32[$44>>2];
          $46 = (($c1) + ($36<<2)|0);
          $47 = +HEAPF32[$46>>2];
          $48 = $47 * $45;
          $49 = $48 + $43;
          $50 = (($ch) + ($40<<2)|0);
          HEAPF32[$50>>2] = $49;
          $51 = +HEAPF32[$38>>2];
          $52 = +HEAPF32[$46>>2];
          $53 = $52 * $51;
          $54 = +HEAPF32[$44>>2];
          $55 = +HEAPF32[$41>>2];
          $56 = $55 * $54;
          $57 = $53 - $56;
          $58 = (($ch) + ($36<<2)|0);
          HEAPF32[$58>>2] = $57;
          $59 = (($i$0164) + 2)|0;
          $60 = ($59|0)<($ido|0);
          if ($60) {
           $i$0164 = $59;$idij$0165 = $35;$t3$0163 = $36;
          } else {
           break;
          }
         }
        }
        $61 = (($k$1170) + 1)|0;
        $exitcond229 = ($61|0)==($l1|0);
        if ($exitcond229) {
         break;
        } else {
         $k$1170 = $61;$t2$1169 = $34;
        }
       }
      }
      $62 = (($j$1176) + 1)|0;
      $exitcond230 = ($62|0)==($ip|0);
      if ($exitcond230) {
       break;
      } else {
       $is$0175 = $31;$j$1176 = $62;$t1$1174 = $30;
      }
     }
    }
   } else {
    if ($11) {
     $26 = ($ido|0)>(2);
     $27 = ($l1|0)>(0);
     $is$1190 = $24;$j$2191 = 1;$t1$2189 = 0;
     while(1) {
      $63 = (($is$1190) + ($ido))|0;
      $64 = (($t1$2189) + ($6))|0;
      if ($26) {
       $65 = (($63) + -1)|0;
       $i$1184 = 2;$idij$1185 = $65;$t2$2183 = $64;
       while(1) {
        $66 = (($idij$1185) + 2)|0;
        $67 = (($t2$2183) + 2)|0;
        if ($27) {
         $68 = (($idij$1185) + 1)|0;
         $69 = (($wa) + ($68<<2)|0);
         $70 = (($wa) + ($66<<2)|0);
         $k$2179 = 0;$t3$1178 = $67;
         while(1) {
          $71 = +HEAPF32[$69>>2];
          $72 = (($t3$1178) + -1)|0;
          $73 = (($c1) + ($72<<2)|0);
          $74 = +HEAPF32[$73>>2];
          $75 = $74 * $71;
          $76 = +HEAPF32[$70>>2];
          $77 = (($c1) + ($t3$1178<<2)|0);
          $78 = +HEAPF32[$77>>2];
          $79 = $78 * $76;
          $80 = $79 + $75;
          $81 = (($ch) + ($72<<2)|0);
          HEAPF32[$81>>2] = $80;
          $82 = +HEAPF32[$69>>2];
          $83 = +HEAPF32[$77>>2];
          $84 = $83 * $82;
          $85 = +HEAPF32[$70>>2];
          $86 = +HEAPF32[$73>>2];
          $87 = $86 * $85;
          $88 = $84 - $87;
          $89 = (($ch) + ($t3$1178<<2)|0);
          HEAPF32[$89>>2] = $88;
          $90 = (($t3$1178) + ($ido))|0;
          $91 = (($k$2179) + 1)|0;
          $exitcond231 = ($91|0)==($l1|0);
          if ($exitcond231) {
           break;
          } else {
           $k$2179 = $91;$t3$1178 = $90;
          }
         }
        }
        $92 = (($i$1184) + 2)|0;
        $93 = ($92|0)<($ido|0);
        if ($93) {
         $i$1184 = $92;$idij$1185 = $66;$t2$2183 = $67;
        } else {
         break;
        }
       }
      }
      $94 = (($j$2191) + 1)|0;
      $exitcond232 = ($94|0)==($ip|0);
      if ($exitcond232) {
       break;
      } else {
       $is$1190 = $63;$j$2191 = $94;$t1$2189 = $64;
      }
     }
    }
   }
   $95 = Math_imul($6, $ip)|0;
   $96 = ($5|0)<($l1|0);
   $97 = ($3|0)>(1);
   if (!($96)) {
    if (!($97)) {
     break;
    }
    $98 = ($l1|0)>(0);
    $99 = ($ido|0)>(2);
    $j$4161 = 1;$t1$4160 = 0;$t2$4159 = $95;
    while(1) {
     $136 = (($t1$4160) + ($6))|0;
     $137 = (($t2$4159) - ($6))|0;
     if ($98) {
      $k$4157 = 0;$t3$3156 = $136;$t4$1155 = $137;
      while(1) {
       if ($99) {
        $i$3152 = 2;$t5$1150 = $t3$3156;$t6$1151 = $t4$1155;
        while(1) {
         $138 = (($t5$1150) + 2)|0;
         $139 = (($t6$1151) + 2)|0;
         $140 = (($t5$1150) + 1)|0;
         $141 = (($ch) + ($140<<2)|0);
         $142 = +HEAPF32[$141>>2];
         $143 = (($t6$1151) + 1)|0;
         $144 = (($ch) + ($143<<2)|0);
         $145 = +HEAPF32[$144>>2];
         $146 = $145 + $142;
         $147 = (($c1) + ($140<<2)|0);
         HEAPF32[$147>>2] = $146;
         $148 = (($ch) + ($138<<2)|0);
         $149 = +HEAPF32[$148>>2];
         $150 = (($ch) + ($139<<2)|0);
         $151 = +HEAPF32[$150>>2];
         $152 = $149 - $151;
         $153 = (($c1) + ($143<<2)|0);
         HEAPF32[$153>>2] = $152;
         $154 = +HEAPF32[$148>>2];
         $155 = +HEAPF32[$150>>2];
         $156 = $155 + $154;
         $157 = (($c1) + ($138<<2)|0);
         HEAPF32[$157>>2] = $156;
         $158 = +HEAPF32[$144>>2];
         $159 = +HEAPF32[$141>>2];
         $160 = $158 - $159;
         $161 = (($c1) + ($139<<2)|0);
         HEAPF32[$161>>2] = $160;
         $162 = (($i$3152) + 2)|0;
         $163 = ($162|0)<($ido|0);
         if ($163) {
          $i$3152 = $162;$t5$1150 = $138;$t6$1151 = $139;
         } else {
          break;
         }
        }
       }
       $164 = (($t3$3156) + ($ido))|0;
       $165 = (($t4$1155) + ($ido))|0;
       $166 = (($k$4157) + 1)|0;
       $exitcond227 = ($166|0)==($l1|0);
       if ($exitcond227) {
        break;
       } else {
        $k$4157 = $166;$t3$3156 = $164;$t4$1155 = $165;
       }
      }
     }
     $167 = (($j$4161) + 1)|0;
     $exitcond228 = ($167|0)==($3|0);
     if ($exitcond228) {
      break L1;
     } else {
      $j$4161 = $167;$t1$4160 = $136;$t2$4159 = $137;
     }
    }
   }
   if ($97) {
    $100 = ($ido|0)>(2);
    $101 = ($l1|0)>(0);
    $j$3148 = 1;$t1$3147 = 0;$t2$3146 = $95;
    while(1) {
     $102 = (($t1$3147) + ($6))|0;
     $103 = (($t2$3146) - ($6))|0;
     if ($100) {
      $i$2142 = 2;$t3$2141 = $102;$t4$0140 = $103;
      while(1) {
       $104 = (($t3$2141) + 2)|0;
       $105 = (($t4$0140) + 2)|0;
       if ($101) {
        $106 = (($105) - ($ido))|0;
        $107 = (($104) - ($ido))|0;
        $k$3136 = 0;$t5$0134 = $107;$t6$0135 = $106;
        while(1) {
         $108 = (($t5$0134) + ($ido))|0;
         $109 = (($t6$0135) + ($ido))|0;
         $110 = (($108) + -1)|0;
         $111 = (($ch) + ($110<<2)|0);
         $112 = +HEAPF32[$111>>2];
         $113 = (($109) + -1)|0;
         $114 = (($ch) + ($113<<2)|0);
         $115 = +HEAPF32[$114>>2];
         $116 = $115 + $112;
         $117 = (($c1) + ($110<<2)|0);
         HEAPF32[$117>>2] = $116;
         $118 = (($ch) + ($108<<2)|0);
         $119 = +HEAPF32[$118>>2];
         $120 = (($ch) + ($109<<2)|0);
         $121 = +HEAPF32[$120>>2];
         $122 = $119 - $121;
         $123 = (($c1) + ($113<<2)|0);
         HEAPF32[$123>>2] = $122;
         $124 = +HEAPF32[$118>>2];
         $125 = +HEAPF32[$120>>2];
         $126 = $125 + $124;
         $127 = (($c1) + ($108<<2)|0);
         HEAPF32[$127>>2] = $126;
         $128 = +HEAPF32[$114>>2];
         $129 = +HEAPF32[$111>>2];
         $130 = $128 - $129;
         $131 = (($c1) + ($109<<2)|0);
         HEAPF32[$131>>2] = $130;
         $132 = (($k$3136) + 1)|0;
         $exitcond225 = ($132|0)==($l1|0);
         if ($exitcond225) {
          break;
         } else {
          $k$3136 = $132;$t5$0134 = $108;$t6$0135 = $109;
         }
        }
       }
       $133 = (($i$2142) + 2)|0;
       $134 = ($133|0)<($ido|0);
       if ($134) {
        $i$2142 = $133;$t3$2141 = $104;$t4$0140 = $105;
       } else {
        break;
       }
      }
     }
     $135 = (($j$3148) + 1)|0;
     $exitcond226 = ($135|0)==($3|0);
     if ($exitcond226) {
      break;
     } else {
      $j$3148 = $135;$t1$3147 = $102;$t2$3146 = $103;
     }
    }
   }
  }
 } while(0);
 $10 = ($idl1|0)>(0);
 if ($10) {
  $ik$1131 = 0;
  while(1) {
   $168 = (($ch2) + ($ik$1131<<2)|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = (($c2) + ($ik$1131<<2)|0);
   HEAP32[$170>>2] = $169;
   $171 = (($ik$1131) + 1)|0;
   $exitcond223 = ($171|0)==($idl1|0);
   if ($exitcond223) {
    break;
   } else {
    $ik$1131 = $171;
   }
  }
 }
 $172 = Math_imul($idl1, $ip)|0;
 $173 = ($3|0)>(1);
 if ($173) {
  $174 = ($l1|0)>(0);
  $j$5127 = 1;$t1$5126 = 0;$t2$5125 = $172;
  while(1) {
   $175 = (($t1$5126) + ($6))|0;
   $176 = (($t2$5125) - ($6))|0;
   if ($174) {
    $177 = (($176) - ($ido))|0;
    $178 = (($175) - ($ido))|0;
    $k$5121 = 0;$t3$4120 = $178;$t4$2119 = $177;
    while(1) {
     $179 = (($t3$4120) + ($ido))|0;
     $180 = (($t4$2119) + ($ido))|0;
     $181 = (($ch) + ($179<<2)|0);
     $182 = +HEAPF32[$181>>2];
     $183 = (($ch) + ($180<<2)|0);
     $184 = +HEAPF32[$183>>2];
     $185 = $184 + $182;
     $186 = (($c1) + ($179<<2)|0);
     HEAPF32[$186>>2] = $185;
     $187 = +HEAPF32[$183>>2];
     $188 = +HEAPF32[$181>>2];
     $189 = $187 - $188;
     $190 = (($c1) + ($180<<2)|0);
     HEAPF32[$190>>2] = $189;
     $191 = (($k$5121) + 1)|0;
     $exitcond221 = ($191|0)==($l1|0);
     if ($exitcond221) {
      break;
     } else {
      $k$5121 = $191;$t3$4120 = $179;$t4$2119 = $180;
     }
    }
   }
   $192 = (($j$5127) + 1)|0;
   $exitcond222 = ($192|0)==($3|0);
   if ($exitcond222) {
    break;
   } else {
    $j$5127 = $192;$t1$5126 = $175;$t2$5125 = $176;
   }
  }
  $193 = (($ip) + -1)|0;
  $194 = Math_imul($193, $idl1)|0;
  if ($173) {
   $195 = ($3|0)>(2);
   $ai1$0112 = 0.0;$ar1$0113 = 1.0;$l$0116 = 1;$t1$6115 = 0;$t2$6114 = $172;
   while(1) {
    $196 = (($t1$6115) + ($idl1))|0;
    $197 = (($t2$6114) - ($idl1))|0;
    $198 = $ar1$0113 * $cosf;
    $199 = $ai1$0112 * $sinf;
    $200 = $198 - $199;
    $201 = $ai1$0112 * $cosf;
    $202 = $ar1$0113 * $sinf;
    $203 = $202 + $201;
    if ($10) {
     $ik$294 = 0;$t4$393 = $196;$t5$290 = $197;$t6$291 = $194;$t7$092 = $idl1;
     while(1) {
      $204 = (($c2) + ($ik$294<<2)|0);
      $205 = +HEAPF32[$204>>2];
      $206 = (($t7$092) + 1)|0;
      $207 = (($c2) + ($t7$092<<2)|0);
      $208 = +HEAPF32[$207>>2];
      $209 = $208 * $200;
      $210 = $209 + $205;
      $211 = (($t4$393) + 1)|0;
      $212 = (($ch2) + ($t4$393<<2)|0);
      HEAPF32[$212>>2] = $210;
      $213 = (($t6$291) + 1)|0;
      $214 = (($c2) + ($t6$291<<2)|0);
      $215 = +HEAPF32[$214>>2];
      $216 = $215 * $203;
      $217 = (($t5$290) + 1)|0;
      $218 = (($ch2) + ($t5$290<<2)|0);
      HEAPF32[$218>>2] = $216;
      $219 = (($ik$294) + 1)|0;
      $exitcond217 = ($219|0)==($idl1|0);
      if ($exitcond217) {
       break;
      } else {
       $ik$294 = $219;$t4$393 = $211;$t5$290 = $217;$t6$291 = $213;$t7$092 = $206;
      }
     }
    }
    if ($195) {
     $ai2$0107 = $203;$ar2$0108 = $200;$j$6109 = 2;$t4$4106 = $idl1;$t5$3105 = $194;
     while(1) {
      $220 = (($t4$4106) + ($idl1))|0;
      $221 = (($t5$3105) - ($idl1))|0;
      $222 = $ar2$0108 * $200;
      $223 = $ai2$0107 * $203;
      $224 = $222 - $223;
      $225 = $ai2$0107 * $200;
      $226 = $ar2$0108 * $203;
      $227 = $226 + $225;
      if ($10) {
       $ik$3101 = 0;$t6$397 = $196;$t7$198 = $197;$t8$099 = $220;$t9$0100 = $221;
       while(1) {
        $228 = (($t8$099) + 1)|0;
        $229 = (($c2) + ($t8$099<<2)|0);
        $230 = +HEAPF32[$229>>2];
        $231 = $230 * $224;
        $232 = (($t6$397) + 1)|0;
        $233 = (($ch2) + ($t6$397<<2)|0);
        $234 = +HEAPF32[$233>>2];
        $235 = $234 + $231;
        HEAPF32[$233>>2] = $235;
        $236 = (($t9$0100) + 1)|0;
        $237 = (($c2) + ($t9$0100<<2)|0);
        $238 = +HEAPF32[$237>>2];
        $239 = $238 * $227;
        $240 = (($t7$198) + 1)|0;
        $241 = (($ch2) + ($t7$198<<2)|0);
        $242 = +HEAPF32[$241>>2];
        $243 = $242 + $239;
        HEAPF32[$241>>2] = $243;
        $244 = (($ik$3101) + 1)|0;
        $exitcond218 = ($244|0)==($idl1|0);
        if ($exitcond218) {
         break;
        } else {
         $ik$3101 = $244;$t6$397 = $232;$t7$198 = $240;$t8$099 = $228;$t9$0100 = $236;
        }
       }
      }
      $245 = (($j$6109) + 1)|0;
      $exitcond219 = ($245|0)==($3|0);
      if ($exitcond219) {
       break;
      } else {
       $ai2$0107 = $227;$ar2$0108 = $224;$j$6109 = $245;$t4$4106 = $220;$t5$3105 = $221;
      }
     }
    }
    $246 = (($l$0116) + 1)|0;
    $exitcond220 = ($246|0)==($3|0);
    if ($exitcond220) {
     break;
    } else {
     $ai1$0112 = $203;$ar1$0113 = $200;$l$0116 = $246;$t1$6115 = $196;$t2$6114 = $197;
    }
   }
   if ($173) {
    $j$787 = 1;$t1$786 = 0;
    while(1) {
     $247 = (($t1$786) + ($idl1))|0;
     if ($10) {
      $ik$482 = 0;$t2$781 = $247;
      while(1) {
       $248 = (($t2$781) + 1)|0;
       $249 = (($c2) + ($t2$781<<2)|0);
       $250 = +HEAPF32[$249>>2];
       $251 = (($ch2) + ($ik$482<<2)|0);
       $252 = +HEAPF32[$251>>2];
       $253 = $252 + $250;
       HEAPF32[$251>>2] = $253;
       $254 = (($ik$482) + 1)|0;
       $exitcond215 = ($254|0)==($idl1|0);
       if ($exitcond215) {
        break;
       } else {
        $ik$482 = $254;$t2$781 = $248;
       }
      }
     }
     $255 = (($j$787) + 1)|0;
     $exitcond216 = ($255|0)==($3|0);
     if ($exitcond216) {
      break;
     } else {
      $j$787 = $255;$t1$786 = $247;
     }
    }
   }
  }
 }
 $256 = ($ido|0)<($l1|0);
 if ($256) {
  $259 = ($ido|0)>(0);
  if ($259) {
   $260 = ($l1|0)>(0);
   $i$572 = 0;
   while(1) {
    if ($260) {
     $k$769 = 0;$t1$968 = $i$572;$t2$967 = $i$572;
     while(1) {
      $270 = (($ch) + ($t1$968<<2)|0);
      $271 = HEAP32[$270>>2]|0;
      $272 = (($cc) + ($t2$967<<2)|0);
      HEAP32[$272>>2] = $271;
      $273 = (($t1$968) + ($ido))|0;
      $274 = (($t2$967) + ($7))|0;
      $275 = (($k$769) + 1)|0;
      $exitcond210 = ($275|0)==($l1|0);
      if ($exitcond210) {
       break;
      } else {
       $k$769 = $275;$t1$968 = $273;$t2$967 = $274;
      }
     }
    }
    $276 = (($i$572) + 1)|0;
    $exitcond211 = ($276|0)==($ido|0);
    if ($exitcond211) {
     break;
    } else {
     $i$572 = $276;
    }
   }
  }
 } else {
  $257 = ($l1|0)>(0);
  if ($257) {
   $258 = ($ido|0)>(0);
   $k$680 = 0;$t1$879 = 0;$t2$878 = 0;
   while(1) {
    if ($258) {
     $i$475 = 0;$t3$574 = $t1$879;$t4$573 = $t2$878;
     while(1) {
      $261 = (($t3$574) + 1)|0;
      $262 = (($ch) + ($t3$574<<2)|0);
      $263 = HEAP32[$262>>2]|0;
      $264 = (($t4$573) + 1)|0;
      $265 = (($cc) + ($t4$573<<2)|0);
      HEAP32[$265>>2] = $263;
      $266 = (($i$475) + 1)|0;
      $exitcond212 = ($266|0)==($ido|0);
      if ($exitcond212) {
       break;
      } else {
       $i$475 = $266;$t3$574 = $261;$t4$573 = $264;
      }
     }
    }
    $267 = (($t1$879) + ($ido))|0;
    $268 = (($t2$878) + ($7))|0;
    $269 = (($k$680) + 1)|0;
    $exitcond214 = ($269|0)==($l1|0);
    if ($exitcond214) {
     break;
    } else {
     $k$680 = $269;$t1$879 = $267;$t2$878 = $268;
    }
   }
  }
 }
 $277 = $ido << 1;
 $278 = Math_imul($6, $ip)|0;
 if ($173) {
  $279 = ($l1|0)>(0);
  $j$863 = 1;$t1$1062 = 0;$t3$661 = 0;$t4$660 = $278;
  while(1) {
   $280 = (($t1$1062) + ($277))|0;
   $281 = (($t3$661) + ($6))|0;
   $282 = (($t4$660) - ($6))|0;
   if ($279) {
    $k$856 = 0;$t5$453 = $280;$t6$454 = $281;$t7$255 = $282;
    while(1) {
     $283 = (($ch) + ($t6$454<<2)|0);
     $284 = HEAP32[$283>>2]|0;
     $285 = (($t5$453) + -1)|0;
     $286 = (($cc) + ($285<<2)|0);
     HEAP32[$286>>2] = $284;
     $287 = (($ch) + ($t7$255<<2)|0);
     $288 = HEAP32[$287>>2]|0;
     $289 = (($cc) + ($t5$453<<2)|0);
     HEAP32[$289>>2] = $288;
     $290 = (($t5$453) + ($7))|0;
     $291 = (($t6$454) + ($ido))|0;
     $292 = (($t7$255) + ($ido))|0;
     $293 = (($k$856) + 1)|0;
     $exitcond208 = ($293|0)==($l1|0);
     if ($exitcond208) {
      break;
     } else {
      $k$856 = $293;$t5$453 = $290;$t6$454 = $291;$t7$255 = $292;
     }
    }
   }
   $294 = (($j$863) + 1)|0;
   $exitcond209 = ($294|0)==($3|0);
   if ($exitcond209) {
    break;
   } else {
    $j$863 = $294;$t1$1062 = $280;$t3$661 = $281;$t4$660 = $282;
   }
  }
 }
 if ($8) {
  return;
 }
 $295 = ($5|0)<($l1|0);
 $296 = (0 - ($ido))|0;
 if (!($295)) {
  if (!($173)) {
   return;
  }
  $$not = ($l1|0)<(1);
  $$not241 = ($ido|0)<(3);
  $brmerge = $$not | $$not241;
  $j$951 = 1;$t1$1150 = $296;$t3$749 = 0;$t4$748 = 0;$t5$547 = $278;
  while(1) {
   $299 = (($t1$1150) + ($277))|0;
   $300 = (($t3$749) + ($277))|0;
   $301 = (($t4$748) + ($6))|0;
   $302 = (($t5$547) - ($6))|0;
   if (!($brmerge)) {
    $k$945$us = 0;$t6$541$us = $299;$t7$342$us = $300;$t8$143$us = $301;$t9$144$us = $302;
    while(1) {
     $i$638$us = 2;
     while(1) {
      $308 = (($ido) - ($i$638$us))|0;
      $309 = (($i$638$us) + ($t8$143$us))|0;
      $310 = (($309) + -1)|0;
      $311 = (($ch) + ($310<<2)|0);
      $312 = +HEAPF32[$311>>2];
      $313 = (($i$638$us) + ($t9$144$us))|0;
      $314 = (($313) + -1)|0;
      $315 = (($ch) + ($314<<2)|0);
      $316 = +HEAPF32[$315>>2];
      $317 = $316 + $312;
      $318 = (($i$638$us) + ($t7$342$us))|0;
      $319 = (($318) + -1)|0;
      $320 = (($cc) + ($319<<2)|0);
      HEAPF32[$320>>2] = $317;
      $321 = +HEAPF32[$311>>2];
      $322 = +HEAPF32[$315>>2];
      $323 = $321 - $322;
      $324 = (($308) + ($t6$541$us))|0;
      $325 = (($324) + -1)|0;
      $326 = (($cc) + ($325<<2)|0);
      HEAPF32[$326>>2] = $323;
      $327 = (($ch) + ($309<<2)|0);
      $328 = +HEAPF32[$327>>2];
      $329 = (($ch) + ($313<<2)|0);
      $330 = +HEAPF32[$329>>2];
      $331 = $330 + $328;
      $332 = (($cc) + ($318<<2)|0);
      HEAPF32[$332>>2] = $331;
      $333 = +HEAPF32[$329>>2];
      $334 = +HEAPF32[$327>>2];
      $335 = $333 - $334;
      $336 = (($cc) + ($324<<2)|0);
      HEAPF32[$336>>2] = $335;
      $337 = (($i$638$us) + 2)|0;
      $338 = ($337|0)<($ido|0);
      if ($338) {
       $i$638$us = $337;
      } else {
       break;
      }
     }
     $303 = (($t6$541$us) + ($7))|0;
     $304 = (($t7$342$us) + ($7))|0;
     $305 = (($t8$143$us) + ($ido))|0;
     $306 = (($t9$144$us) + ($ido))|0;
     $307 = (($k$945$us) + 1)|0;
     $exitcond206 = ($307|0)==($l1|0);
     if ($exitcond206) {
      break;
     } else {
      $k$945$us = $307;$t6$541$us = $303;$t7$342$us = $304;$t8$143$us = $305;$t9$144$us = $306;
     }
    }
   }
   $339 = (($j$951) + 1)|0;
   $exitcond207 = ($339|0)==($3|0);
   if ($exitcond207) {
    break;
   } else {
    $j$951 = $339;$t1$1150 = $299;$t3$749 = $300;$t4$748 = $301;$t5$547 = $302;
   }
  }
  return;
 }
 if (!($173)) {
  return;
 }
 $297 = ($ido|0)>(2);
 $298 = ($l1|0)>(0);
 $j$1036 = 1;$t1$1235 = $296;$t3$834 = 0;$t4$833 = 0;$t5$632 = $278;
 while(1) {
  $340 = (($t1$1235) + ($277))|0;
  $341 = (($t3$834) + ($277))|0;
  $342 = (($t4$833) + ($6))|0;
  $343 = (($t5$632) - ($6))|0;
  if ($297) {
   $344 = (($340) + ($ido))|0;
   if ($298) {
    $i$728$us = 2;
    while(1) {
     $376 = (($i$728$us) + ($343))|0;
     $377 = (($i$728$us) + ($342))|0;
     $378 = (($i$728$us) + ($341))|0;
     $379 = (($344) - ($i$728$us))|0;
     $k$1027$us = 0;$t6$623$us = $379;$t7$424$us = $378;$t8$225$us = $377;$t9$226$us = $376;
     while(1) {
      $347 = (($t8$225$us) + -1)|0;
      $348 = (($ch) + ($347<<2)|0);
      $349 = +HEAPF32[$348>>2];
      $350 = (($t9$226$us) + -1)|0;
      $351 = (($ch) + ($350<<2)|0);
      $352 = +HEAPF32[$351>>2];
      $353 = $352 + $349;
      $354 = (($t7$424$us) + -1)|0;
      $355 = (($cc) + ($354<<2)|0);
      HEAPF32[$355>>2] = $353;
      $356 = +HEAPF32[$348>>2];
      $357 = +HEAPF32[$351>>2];
      $358 = $356 - $357;
      $359 = (($t6$623$us) + -1)|0;
      $360 = (($cc) + ($359<<2)|0);
      HEAPF32[$360>>2] = $358;
      $361 = (($ch) + ($t8$225$us<<2)|0);
      $362 = +HEAPF32[$361>>2];
      $363 = (($ch) + ($t9$226$us<<2)|0);
      $364 = +HEAPF32[$363>>2];
      $365 = $364 + $362;
      $366 = (($cc) + ($t7$424$us<<2)|0);
      HEAPF32[$366>>2] = $365;
      $367 = +HEAPF32[$363>>2];
      $368 = +HEAPF32[$361>>2];
      $369 = $367 - $368;
      $370 = (($cc) + ($t6$623$us<<2)|0);
      HEAPF32[$370>>2] = $369;
      $371 = (($t6$623$us) + ($7))|0;
      $372 = (($t7$424$us) + ($7))|0;
      $373 = (($t8$225$us) + ($ido))|0;
      $374 = (($t9$226$us) + ($ido))|0;
      $375 = (($k$1027$us) + 1)|0;
      $exitcond = ($375|0)==($l1|0);
      if ($exitcond) {
       break;
      } else {
       $k$1027$us = $375;$t6$623$us = $371;$t7$424$us = $372;$t8$225$us = $373;$t9$226$us = $374;
      }
     }
     $345 = (($i$728$us) + 2)|0;
     $346 = ($345|0)<($ido|0);
     if ($346) {
      $i$728$us = $345;
     } else {
      break;
     }
    }
   }
  }
  $380 = (($j$1036) + 1)|0;
  $exitcond204 = ($380|0)==($3|0);
  if ($exitcond204) {
   break;
  } else {
   $j$1036 = $380;$t1$1235 = $340;$t3$834 = $341;$t4$833 = $342;$t5$632 = $343;
  }
 }
 return;
}
function _vorbis_encode_setup_init($vi) {
 $vi = $vi|0;
 var $$ = 0, $$$i = 0, $$$i17 = 0.0, $$$i21 = 0.0, $$$i27 = 0.0, $$$i33 = 0.0, $$$i6 = 0.0, $$0 = 0, $$0$i = 0, $$0$i$i$i = 0, $$0$i14$1$i$i = 0, $$0$i14$2$i$i = 0, $$0$i14$3$i$i = 0, $$0$i14$i$i = 0, $$0$i4$1$i$i = 0, $$0$i4$2$i$i = 0, $$0$i4$3$i$i = 0, $$0$i4$i$i = 0, $$0$i9$i$i = 0, $$2$i = 0;
 var $$2$i18 = 0, $$2$i22 = 0, $$2$i28 = 0, $$2$i34 = 0, $$ch$2$i$i = 0, $$maxbook$0$i = 0, $$maxbook$2$i = 0, $$maxclass$0$i = 0, $$maxclass$0$i$lcssa = 0, $$pre = 0.0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i8 = 0, $$pre$phi68$i$iZ2D = 0, $$pre11$i = 0, $$pre21$i = 0, $$pre63$i$i = 0, $$pre64$i$i = 0, $$pre65$i$i = 0, $$pre66$i$i = 0;
 var $$pre67 = 0, $$pre67$i$i = 0, $$pre68 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0;
 var $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0.0, $1028 = 0.0, $1029 = 0.0;
 var $103 = 0, $1030 = 0.0, $1031 = 0, $1032 = 0.0, $1033 = 0.0, $1034 = 0.0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0.0, $1043 = 0.0, $1044 = 0, $1045 = 0.0, $1046 = 0.0, $1047 = 0.0;
 var $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0.0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0;
 var $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0;
 var $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0.0, $110 = 0, $1100 = 0;
 var $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0;
 var $112 = 0.0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0.0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0;
 var $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0;
 var $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0.0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0;
 var $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0;
 var $1192 = 0.0, $1193 = 0, $1194 = 0.0, $1195 = 0.0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0.0, $1200 = 0, $1201 = 0.0, $1202 = 0.0, $1203 = 0.0, $1204 = 0, $1205 = 0, $1206 = 0.0, $1207 = 0.0, $1208 = 0.0, $1209 = 0.0;
 var $121 = 0.0, $1210 = 0.0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0.0, $1220 = 0, $1221 = 0.0, $1222 = 0.0, $1223 = 0.0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0;
 var $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0.0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0.0, $1243 = 0, $1244 = 0, $125 = 0.0;
 var $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0;
 var $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0;
 var $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0.0;
 var $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0.0;
 var $216 = 0.0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0, $224 = 0, $225 = 0.0, $226 = 0.0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0;
 var $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0.0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0;
 var $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0.0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0, $323 = 0.0;
 var $324 = 0.0, $325 = 0, $326 = 0, $327 = 0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0, $339 = 0, $34 = 0, $340 = 0.0, $341 = 0.0;
 var $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0, $353 = 0.0, $354 = 0.0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0.0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0, $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0, $378 = 0.0;
 var $379 = 0.0, $38 = 0.0, $380 = 0, $381 = 0, $382 = 0, $383 = 0.0, $384 = 0.0, $385 = 0, $386 = 0, $387 = 0, $388 = 0.0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0.0, $416 = 0, $417 = 0.0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0, $442 = 0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0.0, $47 = 0, $470 = 0, $471 = 0.0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0.0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0.0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0.0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0.0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0.0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0.0, $53 = 0, $530 = 0.0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0.0, $536 = 0.0, $537 = 0.0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0.0, $541 = 0.0, $542 = 0.0, $543 = 0, $544 = 0.0, $545 = 0.0, $546 = 0, $547 = 0, $548 = 0, $549 = 0.0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0.0, $554 = 0.0, $555 = 0, $556 = 0, $557 = 0.0, $558 = 0.0;
 var $559 = 0.0, $56 = 0, $560 = 0.0, $561 = 0, $562 = 0, $563 = 0, $564 = 0.0, $565 = 0, $566 = 0.0, $567 = 0.0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0.0, $572 = 0.0, $573 = 0.0, $574 = 0, $575 = 0, $576 = 0.0;
 var $577 = 0.0, $578 = 0.0, $579 = 0, $58 = 0, $580 = 0.0, $581 = 0.0, $582 = 0, $583 = 0, $584 = 0, $585 = 0.0, $586 = 0, $587 = 0, $588 = 0, $589 = 0.0, $59 = 0, $590 = 0.0, $591 = 0, $592 = 0, $593 = 0.0, $594 = 0.0;
 var $595 = 0.0, $596 = 0.0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0.0, $601 = 0, $602 = 0, $603 = 0, $604 = 0.0, $605 = 0.0, $606 = 0, $607 = 0, $608 = 0, $609 = 0.0, $61 = 0, $610 = 0.0, $611 = 0.0;
 var $612 = 0, $613 = 0, $614 = 0.0, $615 = 0.0, $616 = 0.0, $617 = 0, $618 = 0.0, $619 = 0.0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0.0, $624 = 0, $625 = 0, $626 = 0, $627 = 0.0, $628 = 0.0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0.0, $632 = 0.0, $633 = 0.0, $634 = 0.0, $635 = 0, $636 = 0, $637 = 0, $638 = 0.0, $639 = 0, $64 = 0, $640 = 0.0, $641 = 0.0, $642 = 0, $643 = 0, $644 = 0, $645 = 0.0, $646 = 0.0, $647 = 0.0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0.0, $651 = 0.0, $652 = 0.0, $653 = 0, $654 = 0.0, $655 = 0.0, $656 = 0, $657 = 0, $658 = 0, $659 = 0.0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0.0, $664 = 0.0, $665 = 0, $666 = 0;
 var $667 = 0.0, $668 = 0.0, $669 = 0.0, $67 = 0, $670 = 0.0, $671 = 0, $672 = 0, $673 = 0, $674 = 0.0, $675 = 0, $676 = 0, $677 = 0, $678 = 0.0, $679 = 0.0, $68 = 0, $680 = 0, $681 = 0, $682 = 0.0, $683 = 0.0, $684 = 0.0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0.0, $689 = 0.0, $69 = 0, $690 = 0.0, $691 = 0.0, $692 = 0, $693 = 0, $694 = 0.0, $695 = 0, $696 = 0.0, $697 = 0.0, $698 = 0, $699 = 0, $7 = 0.0, $70 = 0, $700 = 0.0, $701 = 0.0;
 var $702 = 0.0, $703 = 0, $704 = 0, $705 = 0, $706 = 0.0, $707 = 0.0, $708 = 0.0, $709 = 0.0, $71 = 0, $710 = 0, $711 = 0, $712 = 0.0, $713 = 0, $714 = 0.0, $715 = 0.0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
 var $720 = 0.0, $721 = 0.0, $722 = 0.0, $723 = 0, $724 = 0, $725 = 0, $726 = 0.0, $727 = 0.0, $728 = 0.0, $729 = 0.0, $73 = 0, $730 = 0, $731 = 0, $732 = 0.0, $733 = 0, $734 = 0.0, $735 = 0.0, $736 = 0, $737 = 0, $738 = 0;
 var $739 = 0, $74 = 0, $740 = 0.0, $741 = 0.0, $742 = 0.0, $743 = 0, $744 = 0, $745 = 0, $746 = 0.0, $747 = 0.0, $748 = 0.0, $749 = 0.0, $75 = 0, $750 = 0, $751 = 0, $752 = 0.0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
 var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0.0, $761 = 0.0, $762 = 0, $763 = 0.0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0.0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
 var $775 = 0.0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0.0, $785 = 0.0, $786 = 0, $787 = 0, $788 = 0.0, $789 = 0.0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
 var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0.0, $808 = 0.0, $809 = 0, $81 = 0;
 var $810 = 0, $811 = 0.0, $812 = 0.0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0.0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
 var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
 var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
 var $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0;
 var $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0;
 var $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0;
 var $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0;
 var $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0;
 var $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0;
 var $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0.0, $978 = 0.0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0.0, $983 = 0.0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0.0, $989 = 0.0, $99 = 0, $990 = 0.0;
 var $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $booklist$053$i$i = 0, $booklist$2$1$i$i = 0, $booklist$2$2$i$i = 0, $booklist$2$3$i$i = 0, $booklist$2$i$i = 0, $booklist$344$i$i = 0, $booklist$5$1$i$i = 0, $booklist$5$2$i$i = 0, $booklist$5$3$i$i = 0, $booklist$5$i$i = 0, $ch$0$lcssa$i$i = 0;
 var $ch$1$lcssa$i$i = 0, $ch$231$i$i = 0, $ch$4$i$i = 0, $exitcond$i = 0, $exitcond$i19 = 0, $exitcond$i24 = 0, $exitcond$i30 = 0, $exitcond$i36 = 0, $exitcond$i4 = 0, $exitcond$i452 = 0, $exitcond$i9 = 0, $exitcond10$i = 0, $exitcond18$i = 0, $exitcond19$i = 0, $exitcond9$i = 0, $freq$0$i$i = 0.0, $freq$1$i$i = 0.0, $freq$1$in$i$i = 0.0, $freq$1$in$in$i$i = 0, $freq$1$in$in$in$i$i = 0;
 var $freq$2$i$i = 0.0, $i$013$i = 0, $i$014$i = 0, $i$03$i = 0, $i$03$i23 = 0, $i$03$i29 = 0, $i$03$i35 = 0, $i$05$i$i$i = 0, $i$05$i1$1$i$i = 0, $i$05$i1$2$i$i = 0, $i$05$i1$3$i$i = 0, $i$05$i1$i$i = 0, $i$05$i11$1$i$i = 0, $i$05$i11$2$i$i = 0, $i$05$i11$3$i$i = 0, $i$05$i11$i$i = 0, $i$05$i6$i$i = 0, $i$054 = 0, $i$056$i$i = 0, $i$07$i = 0;
 var $i$154$i$i = 0, $i$16$i = 0, $i$18$i = 0, $i$22$i53 = 0, $i$247$i$i = 0, $i$25$i = 0, $i$345$i$i = 0, $i$437$i$i = 0, $j$013$i = 0, $j$032$i$i = 0, $k$03$i = 0, $k2$030$i$i = 0, $maxbook$010$i = 0, $maxbook$2$lcssa$i = 0, $maxbook$2$lcssa$i$lcssa = 0, $maxbook$24$i = 0, $maxclass$014$i = 0, $or$cond$i = 0, $or$cond$i16 = 0, $or$cond$i20 = 0;
 var $or$cond$i26 = 0, $or$cond$i32 = 0, $p$0$i = 0, $p$0$i10 = 0, $p$0$i12 = 0, $p$0$i14 = 0, $phitmp = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($vi)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = -131;
  return ($$0|0);
 }
 $3 = ((($1)) + 3456|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 $$ = $5&1;
 $6 = ((($1)) + 3496|0);
 $7 = +HEAPF64[$6>>3];
 $8 = $7 > -80.0;
 if ($8) {
  HEAPF64[$6>>3] = -80.0;
 } else {
  $9 = $7 < -200.0;
  if ($9) {
   HEAPF64[$6>>3] = -200.0;
  }
 }
 $10 = ((($1)) + 3512|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $11 > 0.0;
 if ($12) {
  HEAPF64[$10>>3] = 0.0;
 } else {
  $13 = $11 < -99999.0;
  if ($13) {
   HEAPF64[$10>>3] = -99999.0;
  }
 }
 $14 = ((($1)) + 3396|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $$0 = -131;
  return ($$0|0);
 }
 $17 = ((($1)) + 3392|0);
 HEAP32[$17>>2] = 1;
 $18 = ((($1)) + 3400|0);
 $19 = +HEAPF64[$18>>3];
 $20 = ((($15)) + 24|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($15)) + 28|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (~~(($19)));
 $25 = (($21) + ($24<<2)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($23) + ($24<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 HEAP32[$1>>2] = $26;
 $29 = ((($1)) + 4|0);
 HEAP32[$29>>2] = $28;
 $30 = ($26|0)==($28|0);
 $31 = ((($15)) + 144|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)>(0);
 if ($33) {
  $34 = ((($15)) + 136|0);
  $35 = ((($15)) + 140|0);
  $36 = ((($15)) + 148|0);
  $38 = $19;$54 = $1;$i$054 = 0;
  while(1) {
   $37 = (~~(($38)));
   $39 = HEAP32[$34>>2]|0;
   $40 = HEAP32[$35>>2]|0;
   $41 = HEAP32[$36>>2]|0;
   $42 = (($41) + ($i$054<<2)|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (_calloc(1,1120)|0);
   $45 = (($43) + ($37<<2)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($40) + (($46*1120)|0)|0);
   _memcpy(($44|0),($47|0),1120)|0;
   $48 = HEAP32[$44>>2]|0;
   $49 = ($48|0)>(0);
   if ($49) {
    $50 = ((($44)) + 4|0);
    $i$013$i = 0;$maxclass$014$i = -1;
    while(1) {
     $57 = (($50) + ($i$013$i<<2)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)>($maxclass$014$i|0);
     $$maxclass$0$i = $59 ? $58 : $maxclass$014$i;
     $60 = (($i$013$i) + 1)|0;
     $exitcond19$i = ($60|0)==($48|0);
     if ($exitcond19$i) {
      $$maxclass$0$i$lcssa = $$maxclass$0$i;
      break;
     } else {
      $i$013$i = $60;$maxclass$014$i = $$maxclass$0$i;
     }
    }
    $51 = ($$maxclass$0$i$lcssa|0)<(0);
    if (!($51)) {
     $52 = ((($44)) + 256|0);
     $53 = ((($54)) + 24|0);
     $55 = ((($44)) + 192|0);
     $56 = ((($44)) + 320|0);
     $i$18$i = 0;$maxbook$010$i = -1;
     while(1) {
      $68 = (($52) + ($i$18$i<<2)|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)>($maxbook$010$i|0);
      $$maxbook$0$i = $70 ? $69 : $maxbook$010$i;
      $71 = HEAP32[$53>>2]|0;
      $72 = (($71) + ($69))|0;
      HEAP32[$68>>2] = $72;
      $73 = (($55) + ($i$18$i<<2)|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = ($74|0)==(31);
      if ($75) {
       $maxbook$2$lcssa$i = $$maxbook$0$i;
      } else {
       $1244 = $74;$k$03$i = 0;$maxbook$24$i = $$maxbook$0$i;
       while(1) {
        $76 = ((($56) + ($i$18$i<<5)|0) + ($k$03$i<<2)|0);
        $77 = HEAP32[$76>>2]|0;
        $78 = ($77|0)>($maxbook$24$i|0);
        $$maxbook$2$i = $78 ? $77 : $maxbook$24$i;
        $79 = ($77|0)>(-1);
        if ($79) {
         $80 = HEAP32[$53>>2]|0;
         $81 = (($80) + ($77))|0;
         HEAP32[$76>>2] = $81;
         $$pre$i = HEAP32[$73>>2]|0;
         $84 = $$pre$i;
        } else {
         $84 = $1244;
        }
        $82 = (($k$03$i) + 1)|0;
        $83 = 1 << $84;
        $85 = ($82|0)<($83|0);
        if ($85) {
         $1244 = $84;$k$03$i = $82;$maxbook$24$i = $$maxbook$2$i;
        } else {
         $maxbook$2$lcssa$i = $$maxbook$2$i;
         break;
        }
       }
      }
      $86 = (($i$18$i) + 1)|0;
      $exitcond18$i = ($i$18$i|0)==($$maxclass$0$i$lcssa|0);
      if ($exitcond18$i) {
       $maxbook$2$lcssa$i$lcssa = $maxbook$2$lcssa$i;
       break;
      } else {
       $i$18$i = $86;$maxbook$010$i = $maxbook$2$lcssa$i;
      }
     }
     $61 = ($maxbook$2$lcssa$i$lcssa|0)<(0);
     if (!($61)) {
      $62 = (($39) + ($46<<2)|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = HEAP32[$63>>2]|0;
      $65 = HEAP32[$53>>2]|0;
      $66 = (($65) + 1)|0;
      HEAP32[$53>>2] = $66;
      $67 = (((($54)) + 1824|0) + ($65<<2)|0);
      HEAP32[$67>>2] = $64;
      $exitcond$i452 = ($maxbook$2$lcssa$i$lcssa|0)==(0);
      if (!($exitcond$i452)) {
       $i$22$i53 = 0;
       while(1) {
        $87 = (($i$22$i53) + 1)|0;
        $$pre21$i = HEAP32[$45>>2]|0;
        $88 = (($39) + ($$pre21$i<<2)|0);
        $89 = HEAP32[$88>>2]|0;
        $90 = (($89) + ($87<<2)|0);
        $91 = HEAP32[$90>>2]|0;
        $92 = HEAP32[$53>>2]|0;
        $93 = (($92) + 1)|0;
        HEAP32[$53>>2] = $93;
        $94 = (((($54)) + 1824|0) + ($92<<2)|0);
        HEAP32[$94>>2] = $91;
        $exitcond$i4 = ($87|0)==($maxbook$2$lcssa$i$lcssa|0);
        if ($exitcond$i4) {
         break;
        } else {
         $i$22$i53 = $87;
        }
       }
      }
     }
    }
   }
   $95 = ((($54)) + 16|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = (((($54)) + 800|0) + ($96<<2)|0);
   HEAP32[$97>>2] = 1;
   $98 = HEAP32[$95>>2]|0;
   $99 = (((($54)) + 1056|0) + ($98<<2)|0);
   HEAP32[$99>>2] = $44;
   $100 = HEAP32[$95>>2]|0;
   $101 = (($100) + 1)|0;
   HEAP32[$95>>2] = $101;
   $102 = (($i$054) + 1)|0;
   $103 = HEAP32[$31>>2]|0;
   $104 = ($102|0)<($103|0);
   if (!($104)) {
    break;
   }
   $$pre = +HEAPF64[$18>>3];
   $$pre67 = HEAP32[$0>>2]|0;
   $38 = $$pre;$54 = $$pre67;$i$054 = $102;
  }
  $$pre68 = HEAP32[$0>>2]|0;
  $115 = $$pre68;
 } else {
  $115 = $1;
 }
 $105 = ((($1)) + 3520|0);
 $106 = +HEAPF64[$105>>3];
 $107 = ((($15)) + 124|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = ((($15)) + 128|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = (~~(($106)));
 $112 = (+($111|0));
 $113 = $106 - $112;
 $114 = ((($115)) + 2868|0);
 $116 = (($110) + ($111<<3)|0);
 $117 = +HEAPF64[$116>>3];
 $118 = (~~(($117)));
 $119 = (($108) + (($118*492)|0)|0);
 _memcpy(($114|0),($119|0),492)|0;
 $120 = +HEAPF64[$116>>3];
 $121 = 1.0 - $113;
 $122 = $120 * $121;
 $123 = (($111) + 1)|0;
 $124 = (($110) + ($123<<3)|0);
 $125 = +HEAPF64[$124>>3];
 $126 = $125 * $113;
 $127 = $126 + $122;
 $128 = (~~(($127)));
 $129 = (+($128|0));
 $130 = $127 - $129;
 $131 = $130 == 0.0;
 $132 = ($128|0)>(0);
 $or$cond$i = $132 & $131;
 $$$i6 = $or$cond$i ? 1.0 : $130;
 $133 = $or$cond$i << 31 >> 31;
 $$2$i = (($133) + ($128))|0;
 $134 = 1.0 - $$$i6;
 $135 = (($$2$i) + 1)|0;
 $136 = (((($108) + (($$2$i*492)|0)|0)) + 4|0);
 $137 = +HEAPF32[$136>>2];
 $138 = $137;
 $139 = $134 * $138;
 $140 = (((($108) + (($135*492)|0)|0)) + 4|0);
 $141 = +HEAPF32[$140>>2];
 $142 = $141;
 $143 = $$$i6 * $142;
 $144 = $139 + $143;
 $145 = $144;
 $146 = ((($115)) + 2872|0);
 HEAPF32[$146>>2] = $145;
 $147 = (((($108) + (($$2$i*492)|0)|0)) + 32|0);
 $148 = +HEAPF32[$147>>2];
 $149 = $148;
 $150 = $134 * $149;
 $151 = (((($108) + (($135*492)|0)|0)) + 32|0);
 $152 = +HEAPF32[$151>>2];
 $153 = $152;
 $154 = $$$i6 * $153;
 $155 = $150 + $154;
 $156 = $155;
 $157 = ((($115)) + 2900|0);
 HEAPF32[$157>>2] = $156;
 $158 = (((($108) + (($$2$i*492)|0)|0)) + 8|0);
 $159 = +HEAPF32[$158>>2];
 $160 = $159;
 $161 = $134 * $160;
 $162 = (((($108) + (($135*492)|0)|0)) + 8|0);
 $163 = +HEAPF32[$162>>2];
 $164 = $163;
 $165 = $$$i6 * $164;
 $166 = $161 + $165;
 $167 = $166;
 $168 = ((($115)) + 2876|0);
 HEAPF32[$168>>2] = $167;
 $169 = (((($108) + (($$2$i*492)|0)|0)) + 36|0);
 $170 = +HEAPF32[$169>>2];
 $171 = $170;
 $172 = $134 * $171;
 $173 = (((($108) + (($135*492)|0)|0)) + 36|0);
 $174 = +HEAPF32[$173>>2];
 $175 = $174;
 $176 = $175 * $$$i6;
 $177 = $176 + $172;
 $178 = $177;
 $179 = ((($115)) + 2904|0);
 HEAPF32[$179>>2] = $178;
 $180 = (((($108) + (($$2$i*492)|0)|0)) + 12|0);
 $181 = +HEAPF32[$180>>2];
 $182 = $181;
 $183 = $182 * $134;
 $184 = (((($108) + (($135*492)|0)|0)) + 12|0);
 $185 = +HEAPF32[$184>>2];
 $186 = $185;
 $187 = $186 * $$$i6;
 $188 = $187 + $183;
 $189 = $188;
 $190 = ((($115)) + 2880|0);
 HEAPF32[$190>>2] = $189;
 $191 = (((($108) + (($$2$i*492)|0)|0)) + 40|0);
 $192 = +HEAPF32[$191>>2];
 $193 = $192;
 $194 = $193 * $134;
 $195 = (((($108) + (($135*492)|0)|0)) + 40|0);
 $196 = +HEAPF32[$195>>2];
 $197 = $196;
 $198 = $197 * $$$i6;
 $199 = $198 + $194;
 $200 = $199;
 $201 = ((($115)) + 2908|0);
 HEAPF32[$201>>2] = $200;
 $202 = (((($108) + (($$2$i*492)|0)|0)) + 16|0);
 $203 = +HEAPF32[$202>>2];
 $204 = $203;
 $205 = $204 * $134;
 $206 = (((($108) + (($135*492)|0)|0)) + 16|0);
 $207 = +HEAPF32[$206>>2];
 $208 = $207;
 $209 = $208 * $$$i6;
 $210 = $209 + $205;
 $211 = $210;
 $212 = ((($115)) + 2884|0);
 HEAPF32[$212>>2] = $211;
 $213 = (((($108) + (($$2$i*492)|0)|0)) + 44|0);
 $214 = +HEAPF32[$213>>2];
 $215 = $214;
 $216 = $215 * $134;
 $217 = (((($108) + (($135*492)|0)|0)) + 44|0);
 $218 = +HEAPF32[$217>>2];
 $219 = $218;
 $220 = $219 * $$$i6;
 $221 = $220 + $216;
 $222 = $221;
 $223 = ((($115)) + 2912|0);
 HEAPF32[$223>>2] = $222;
 $224 = ((($115)) + 3512|0);
 $225 = +HEAPF64[$224>>3];
 $226 = $225;
 $227 = ((($115)) + 2936|0);
 HEAPF32[$227>>2] = $226;
 $228 = ((($15)) + 132|0);
 $229 = HEAP32[$228>>2]|0;
 $230 = ((($1)) + 3472|0);
 $231 = +HEAPF64[$230>>3];
 $232 = $231;
 $233 = (~~(($232)));
 $234 = (+($233|0));
 $235 = $232 - $234;
 $236 = $235;
 $237 = HEAP32[$0>>2]|0;
 $238 = ($229|0)==(0|0);
 L44: do {
  if ($238) {
   $239 = ((($237)) + 4|0);
   $240 = HEAP32[$237>>2]|0;
   $241 = ((($237)) + 3240|0);
   HEAP32[$241>>2] = $240;
   $242 = HEAP32[$239>>2]|0;
   $243 = ((($237)) + 3300|0);
   HEAP32[$243>>2] = $242;
   $244 = ((($237)) + 3244|0);
   HEAP32[$244>>2] = $240;
   $245 = ((($237)) + 3304|0);
   HEAP32[$245>>2] = $242;
   $246 = ((($237)) + 3248|0);
   HEAP32[$246>>2] = $240;
   $247 = ((($237)) + 3308|0);
   HEAP32[$247>>2] = $242;
   $248 = ((($237)) + 3252|0);
   HEAP32[$248>>2] = $240;
   $249 = ((($237)) + 3312|0);
   HEAP32[$249>>2] = $242;
   $250 = ((($237)) + 3256|0);
   HEAP32[$250>>2] = $240;
   $251 = ((($237)) + 3316|0);
   HEAP32[$251>>2] = $242;
   $252 = ((($237)) + 3260|0);
   HEAP32[$252>>2] = $240;
   $253 = ((($237)) + 3320|0);
   HEAP32[$253>>2] = $242;
   $254 = ((($237)) + 3264|0);
   HEAP32[$254>>2] = $240;
   $255 = ((($237)) + 3324|0);
   HEAP32[$255>>2] = $242;
   $256 = ((($237)) + 3268|0);
   HEAP32[$256>>2] = $240;
   $257 = ((($237)) + 3328|0);
   HEAP32[$257>>2] = $242;
   $258 = ((($237)) + 3272|0);
   HEAP32[$258>>2] = $240;
   $259 = ((($237)) + 3332|0);
   HEAP32[$259>>2] = $242;
   $260 = ((($237)) + 3276|0);
   HEAP32[$260>>2] = $240;
   $261 = ((($237)) + 3336|0);
   HEAP32[$261>>2] = $242;
   $262 = ((($237)) + 3280|0);
   HEAP32[$262>>2] = $240;
   $263 = ((($237)) + 3340|0);
   HEAP32[$263>>2] = $242;
   $264 = ((($237)) + 3284|0);
   HEAP32[$264>>2] = $240;
   $265 = ((($237)) + 3344|0);
   HEAP32[$265>>2] = $242;
   $266 = ((($237)) + 3288|0);
   HEAP32[$266>>2] = $240;
   $267 = ((($237)) + 3348|0);
   HEAP32[$267>>2] = $242;
   $268 = ((($237)) + 3292|0);
   HEAP32[$268>>2] = $240;
   $269 = ((($237)) + 3352|0);
   HEAP32[$269>>2] = $242;
   $270 = ((($237)) + 3296|0);
   HEAP32[$270>>2] = $240;
   $271 = ((($237)) + 3356|0);
   HEAP32[$271>>2] = $242;
  } else {
   $272 = ((($237)) + 3120|0);
   $273 = (($229) + (($233*240)|0)|0);
   dest=$272; src=$273; stop=dest+60|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $274 = ((($237)) + 3180|0);
   $275 = (((($229) + (($233*240)|0)|0)) + 60|0);
   dest=$274; src=$275; stop=dest+60|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $276 = ((($1)) + 3420|0);
   $277 = HEAP32[$276>>2]|0;
   $278 = ($277|0)==(0);
   if (!($278)) {
    $279 = 1.0 - $236;
    $280 = (($233) + 1)|0;
    $281 = ((($vi)) + 8|0);
    $282 = ((($237)) + 4|0);
    $$pre$i8 = HEAP32[$281>>2]|0;
    $283 = (+($$pre$i8|0));
    $i$07$i = 0;
    while(1) {
     $284 = ((((($229) + (($233*240)|0)|0)) + 120|0) + ($i$07$i<<2)|0);
     $285 = +HEAPF32[$284>>2];
     $286 = $285;
     $287 = $286 * $279;
     $288 = ((((($229) + (($280*240)|0)|0)) + 120|0) + ($i$07$i<<2)|0);
     $289 = +HEAPF32[$288>>2];
     $290 = $289;
     $291 = $290 * $236;
     $292 = $291 + $287;
     $293 = $292;
     $294 = $293;
     $295 = $294 * 1000.0;
     $296 = $295 / $283;
     $297 = HEAP32[$237>>2]|0;
     $298 = (+($297|0));
     $299 = $298 * $296;
     $300 = (~~(($299)));
     $301 = (((($237)) + 3000|0) + ($i$07$i<<2)|0);
     HEAP32[$301>>2] = $300;
     $302 = HEAP32[$282>>2]|0;
     $303 = (+($302|0));
     $304 = $303 * $296;
     $305 = (~~(($304)));
     $306 = (((($237)) + 3060|0) + ($i$07$i<<2)|0);
     HEAP32[$306>>2] = $305;
     $307 = (~~(($293)));
     $308 = (((($237)) + 2940|0) + ($i$07$i<<2)|0);
     HEAP32[$308>>2] = $307;
     $309 = ((((($229) + (($233*240)|0)|0)) + 180|0) + ($i$07$i<<2)|0);
     $310 = +HEAPF32[$309>>2];
     $311 = $310;
     $312 = $311 * $279;
     $313 = ((((($229) + (($280*240)|0)|0)) + 180|0) + ($i$07$i<<2)|0);
     $314 = +HEAPF32[$313>>2];
     $315 = $314;
     $316 = $315 * $236;
     $317 = $316 + $312;
     $318 = $317;
     $319 = $318;
     $320 = $319 * 1000.0;
     $321 = $320 / $283;
     $322 = HEAP32[$237>>2]|0;
     $323 = (+($322|0));
     $324 = $323 * $321;
     $325 = (~~(($324)));
     $326 = (((($237)) + 3240|0) + ($i$07$i<<2)|0);
     HEAP32[$326>>2] = $325;
     $327 = HEAP32[$282>>2]|0;
     $328 = (+($327|0));
     $329 = $328 * $321;
     $330 = (~~(($329)));
     $331 = (((($237)) + 3300|0) + ($i$07$i<<2)|0);
     HEAP32[$331>>2] = $330;
     $332 = (($i$07$i) + 1)|0;
     $exitcond10$i = ($332|0)==(15);
     if ($exitcond10$i) {
      break L44;
     } else {
      $i$07$i = $332;
     }
    }
   }
   $333 = (((($229) + (($233*240)|0)|0)) + 148|0);
   $334 = +HEAPF32[$333>>2];
   $335 = $334;
   $336 = 1.0 - $236;
   $337 = $335 * $336;
   $338 = (($233) + 1)|0;
   $339 = (((($229) + (($338*240)|0)|0)) + 148|0);
   $340 = +HEAPF32[$339>>2];
   $341 = $340;
   $342 = $341 * $236;
   $343 = $342 + $337;
   $344 = $343;
   $345 = $344;
   $346 = $345 * 1000.0;
   $347 = ((($vi)) + 8|0);
   $348 = ((($237)) + 4|0);
   $349 = (~~(($344)));
   $$pre11$i = HEAP32[$347>>2]|0;
   $350 = (+($$pre11$i|0));
   $351 = $346 / $350;
   $i$16$i = 0;
   while(1) {
    $352 = HEAP32[$237>>2]|0;
    $353 = (+($352|0));
    $354 = $353 * $351;
    $355 = (~~(($354)));
    $356 = (((($237)) + 3000|0) + ($i$16$i<<2)|0);
    HEAP32[$356>>2] = $355;
    $357 = HEAP32[$348>>2]|0;
    $358 = (+($357|0));
    $359 = $358 * $351;
    $360 = (~~(($359)));
    $361 = (((($237)) + 3060|0) + ($i$16$i<<2)|0);
    HEAP32[$361>>2] = $360;
    $362 = (((($237)) + 2940|0) + ($i$16$i<<2)|0);
    HEAP32[$362>>2] = $349;
    $363 = (($i$16$i) + 1)|0;
    $exitcond9$i = ($363|0)==(15);
    if ($exitcond9$i) {
     break;
    } else {
     $i$16$i = $363;
    }
   }
   $364 = (((($229) + (($233*240)|0)|0)) + 208|0);
   $365 = +HEAPF32[$364>>2];
   $366 = $365;
   $367 = $366 * $336;
   $368 = (((($229) + (($338*240)|0)|0)) + 208|0);
   $369 = +HEAPF32[$368>>2];
   $370 = $369;
   $371 = $370 * $236;
   $372 = $371 + $367;
   $373 = $372;
   $374 = $373;
   $375 = $374 * 1000.0;
   $376 = $375 / $350;
   $i$25$i = 0;
   while(1) {
    $377 = HEAP32[$237>>2]|0;
    $378 = (+($377|0));
    $379 = $378 * $376;
    $380 = (~~(($379)));
    $381 = (((($237)) + 3240|0) + ($i$25$i<<2)|0);
    HEAP32[$381>>2] = $380;
    $382 = HEAP32[$348>>2]|0;
    $383 = (+($382|0));
    $384 = $383 * $376;
    $385 = (~~(($384)));
    $386 = (((($237)) + 3300|0) + ($i$25$i<<2)|0);
    HEAP32[$386>>2] = $385;
    $387 = (($i$25$i) + 1)|0;
    $exitcond$i9 = ($387|0)==(15);
    if ($exitcond$i9) {
     break;
    } else {
     $i$25$i = $387;
    }
   }
  }
 } while(0);
 $388 = +HEAPF64[$18>>3];
 $389 = ((($15)) + 92|0);
 $390 = HEAP32[$389>>2]|0;
 $391 = ((($15)) + 100|0);
 $392 = HEAP32[$391>>2]|0;
 $393 = ((($15)) + 108|0);
 $394 = HEAP32[$393>>2]|0;
 $395 = HEAP32[$0>>2]|0;
 $396 = ((($395)) + 2852|0);
 $397 = HEAP32[$396>>2]|0;
 $398 = (~~(($388)));
 $399 = ((($395)) + 28|0);
 $400 = HEAP32[$399>>2]|0;
 $401 = ($400|0)>(0);
 if (!($401)) {
  HEAP32[$399>>2] = 1;
 }
 $402 = ($397|0)==(0|0);
 if ($402) {
  $403 = (_calloc(1,520)|0);
  HEAP32[$396>>2] = $403;
  $p$0$i = $403;
 } else {
  $p$0$i = $397;
 }
 _memcpy(($p$0$i|0),(25784|0),520)|0;
 HEAP32[$p$0$i>>2] = 0;
 $404 = ((($395)) + 3460|0);
 $405 = HEAP32[$404>>2]|0;
 $406 = ($405|0)==(0);
 if (!($406)) {
  $407 = ((($p$0$i)) + 500|0);
  HEAP32[$407>>2] = 1;
  $408 = (($390) + ($398<<2)|0);
  $409 = HEAP32[$408>>2]|0;
  $410 = ((($p$0$i)) + 504|0);
  HEAP32[$410>>2] = $409;
  $411 = (($392) + ($398<<2)|0);
  $412 = HEAP32[$411>>2]|0;
  $413 = ((($p$0$i)) + 508|0);
  HEAP32[$413>>2] = $412;
  $414 = (($394) + ($398<<3)|0);
  $415 = +HEAPF64[$414>>3];
  $416 = ((($p$0$i)) + 512|0);
  HEAPF64[$416>>3] = $415;
 }
 $417 = +HEAPF64[$18>>3];
 $418 = HEAP32[$389>>2]|0;
 $419 = HEAP32[$391>>2]|0;
 $420 = HEAP32[$393>>2]|0;
 $421 = HEAP32[$0>>2]|0;
 $422 = ((($421)) + 2856|0);
 $423 = HEAP32[$422>>2]|0;
 $424 = (~~(($417)));
 $425 = ((($421)) + 28|0);
 $426 = HEAP32[$425>>2]|0;
 $427 = ($426|0)>(1);
 if (!($427)) {
  HEAP32[$425>>2] = 2;
 }
 $428 = ($423|0)==(0|0);
 if ($428) {
  $429 = (_calloc(1,520)|0);
  HEAP32[$422>>2] = $429;
  $p$0$i10 = $429;
 } else {
  $p$0$i10 = $423;
 }
 _memcpy(($p$0$i10|0),(25784|0),520)|0;
 HEAP32[$p$0$i10>>2] = 0;
 $430 = ((($421)) + 3460|0);
 $431 = HEAP32[$430>>2]|0;
 $432 = ($431|0)==(0);
 if (!($432)) {
  $433 = ((($p$0$i10)) + 500|0);
  HEAP32[$433>>2] = 1;
  $434 = (($418) + ($424<<2)|0);
  $435 = HEAP32[$434>>2]|0;
  $436 = ((($p$0$i10)) + 504|0);
  HEAP32[$436>>2] = $435;
  $437 = (($419) + ($424<<2)|0);
  $438 = HEAP32[$437>>2]|0;
  $439 = ((($p$0$i10)) + 508|0);
  HEAP32[$439>>2] = $438;
  $440 = (($420) + ($424<<3)|0);
  $441 = +HEAPF64[$440>>3];
  $442 = ((($p$0$i10)) + 512|0);
  HEAPF64[$442>>3] = $441;
 }
 if (!($30)) {
  $443 = +HEAPF64[$18>>3];
  $444 = ((($15)) + 96|0);
  $445 = HEAP32[$444>>2]|0;
  $446 = ((($15)) + 104|0);
  $447 = HEAP32[$446>>2]|0;
  $448 = HEAP32[$393>>2]|0;
  $449 = HEAP32[$0>>2]|0;
  $450 = ((($449)) + 2860|0);
  $451 = HEAP32[$450>>2]|0;
  $452 = (~~(($443)));
  $453 = ((($449)) + 28|0);
  $454 = HEAP32[$453>>2]|0;
  $455 = ($454|0)>(2);
  if (!($455)) {
   HEAP32[$453>>2] = 3;
  }
  $456 = ($451|0)==(0|0);
  if ($456) {
   $457 = (_calloc(1,520)|0);
   HEAP32[$450>>2] = $457;
   $p$0$i12 = $457;
  } else {
   $p$0$i12 = $451;
  }
  _memcpy(($p$0$i12|0),(25784|0),520)|0;
  HEAP32[$p$0$i12>>2] = 1;
  $458 = ((($449)) + 3460|0);
  $459 = HEAP32[$458>>2]|0;
  $460 = ($459|0)==(0);
  if (!($460)) {
   $461 = ((($p$0$i12)) + 500|0);
   HEAP32[$461>>2] = 1;
   $462 = (($445) + ($452<<2)|0);
   $463 = HEAP32[$462>>2]|0;
   $464 = ((($p$0$i12)) + 504|0);
   HEAP32[$464>>2] = $463;
   $465 = (($447) + ($452<<2)|0);
   $466 = HEAP32[$465>>2]|0;
   $467 = ((($p$0$i12)) + 508|0);
   HEAP32[$467>>2] = $466;
   $468 = (($448) + ($452<<3)|0);
   $469 = +HEAPF64[$468>>3];
   $470 = ((($p$0$i12)) + 512|0);
   HEAPF64[$470>>3] = $469;
  }
  $471 = +HEAPF64[$18>>3];
  $472 = HEAP32[$444>>2]|0;
  $473 = HEAP32[$446>>2]|0;
  $474 = HEAP32[$393>>2]|0;
  $475 = HEAP32[$0>>2]|0;
  $476 = ((($475)) + 2864|0);
  $477 = HEAP32[$476>>2]|0;
  $478 = (~~(($471)));
  $479 = ((($475)) + 28|0);
  $480 = HEAP32[$479>>2]|0;
  $481 = ($480|0)>(3);
  if (!($481)) {
   HEAP32[$479>>2] = 4;
  }
  $482 = ($477|0)==(0|0);
  if ($482) {
   $483 = (_calloc(1,520)|0);
   HEAP32[$476>>2] = $483;
   $p$0$i14 = $483;
  } else {
   $p$0$i14 = $477;
  }
  _memcpy(($p$0$i14|0),(25784|0),520)|0;
  HEAP32[$p$0$i14>>2] = 1;
  $484 = ((($475)) + 3460|0);
  $485 = HEAP32[$484>>2]|0;
  $486 = ($485|0)==(0);
  if (!($486)) {
   $487 = ((($p$0$i14)) + 500|0);
   HEAP32[$487>>2] = 1;
   $488 = (($472) + ($478<<2)|0);
   $489 = HEAP32[$488>>2]|0;
   $490 = ((($p$0$i14)) + 504|0);
   HEAP32[$490>>2] = $489;
   $491 = (($473) + ($478<<2)|0);
   $492 = HEAP32[$491>>2]|0;
   $493 = ((($p$0$i14)) + 508|0);
   HEAP32[$493>>2] = $492;
   $494 = (($474) + ($478<<3)|0);
   $495 = +HEAPF64[$494>>3];
   $496 = ((($p$0$i14)) + 512|0);
   HEAPF64[$496>>3] = $495;
  }
 }
 $497 = (((($1)) + 3528|0) + ($$<<5)|0);
 $498 = +HEAPF64[$497>>3];
 $499 = ((($15)) + 32|0);
 $500 = HEAP32[$499>>2]|0;
 $501 = ((($15)) + 36|0);
 $502 = HEAP32[$501>>2]|0;
 $503 = ((($15)) + 44|0);
 $504 = HEAP32[$503>>2]|0;
 _vorbis_encode_tonemask_setup($vi,$498,0,$500,$502,$504);
 $505 = ((($1)) + 3560|0);
 $506 = +HEAPF64[$505>>3];
 $507 = HEAP32[$499>>2]|0;
 $508 = HEAP32[$501>>2]|0;
 $509 = ((($15)) + 52|0);
 $510 = HEAP32[$509>>2]|0;
 _vorbis_encode_tonemask_setup($vi,$506,1,$507,$508,$510);
 if (!($30)) {
  $511 = ((($1)) + 3592|0);
  $512 = +HEAPF64[$511>>3];
  $513 = HEAP32[$499>>2]|0;
  $514 = HEAP32[$501>>2]|0;
  $515 = HEAP32[$509>>2]|0;
  _vorbis_encode_tonemask_setup($vi,$512,2,$513,$514,$515);
  $516 = ((($1)) + 3624|0);
  $517 = +HEAPF64[$516>>3];
  $518 = HEAP32[$499>>2]|0;
  $519 = HEAP32[$501>>2]|0;
  $520 = ((($15)) + 48|0);
  $521 = HEAP32[$520>>2]|0;
  _vorbis_encode_tonemask_setup($vi,$517,3,$518,$519,$521);
 }
 $522 = (((((($1)) + 3528|0) + ($$<<5)|0)) + 24|0);
 $523 = +HEAPF64[$522>>3];
 $524 = ((($15)) + 80|0);
 $525 = HEAP32[$524>>2]|0;
 $526 = ((($15)) + 84|0);
 $527 = HEAP32[$526>>2]|0;
 $528 = (~~(($523)));
 $529 = (+($528|0));
 $530 = $523 - $529;
 $531 = HEAP32[$0>>2]|0;
 $532 = ((($531)) + 2852|0);
 $533 = HEAP32[$532>>2]|0;
 $534 = (($527) + ($528<<3)|0);
 $535 = +HEAPF64[$534>>3];
 $536 = 1.0 - $530;
 $537 = $535 * $536;
 $538 = (($528) + 1)|0;
 $539 = (($527) + ($538<<3)|0);
 $540 = +HEAPF64[$539>>3];
 $541 = $540 * $530;
 $542 = $541 + $537;
 $543 = (~~(($542)));
 $544 = (+($543|0));
 $545 = $542 - $544;
 $546 = $545 == 0.0;
 $547 = ($543|0)>(0);
 $or$cond$i16 = $547 & $546;
 $$$i17 = $or$cond$i16 ? 1.0 : $545;
 $548 = $or$cond$i16 << 31 >> 31;
 $$2$i18 = (($548) + ($543))|0;
 $549 = 1.0 - $$$i17;
 $550 = (($$2$i18) + 1)|0;
 $i$03$i = 0;
 while(1) {
  $551 = ((($525) + (($$2$i18*160)|0)|0) + ($i$03$i<<2)|0);
  $552 = HEAP32[$551>>2]|0;
  $553 = (+($552|0));
  $554 = $553 * $549;
  $555 = ((($525) + (($550*160)|0)|0) + ($i$03$i<<2)|0);
  $556 = HEAP32[$555>>2]|0;
  $557 = (+($556|0));
  $558 = $557 * $$$i17;
  $559 = $558 + $554;
  $560 = $559;
  $561 = (((($533)) + 336|0) + ($i$03$i<<2)|0);
  HEAPF32[$561>>2] = $560;
  $562 = (($i$03$i) + 1)|0;
  $exitcond$i19 = ($562|0)==(40);
  if ($exitcond$i19) {
   break;
  } else {
   $i$03$i = $562;
  }
 }
 $563 = ((($1)) + 3584|0);
 $564 = +HEAPF64[$563>>3];
 $565 = (~~(($564)));
 $566 = (+($565|0));
 $567 = $564 - $566;
 $568 = ((($531)) + 2856|0);
 $569 = HEAP32[$568>>2]|0;
 $570 = (($527) + ($565<<3)|0);
 $571 = +HEAPF64[$570>>3];
 $572 = 1.0 - $567;
 $573 = $571 * $572;
 $574 = (($565) + 1)|0;
 $575 = (($527) + ($574<<3)|0);
 $576 = +HEAPF64[$575>>3];
 $577 = $576 * $567;
 $578 = $577 + $573;
 $579 = (~~(($578)));
 $580 = (+($579|0));
 $581 = $578 - $580;
 $582 = $581 == 0.0;
 $583 = ($579|0)>(0);
 $or$cond$i20 = $583 & $582;
 $$$i21 = $or$cond$i20 ? 1.0 : $581;
 $584 = $or$cond$i20 << 31 >> 31;
 $$2$i22 = (($584) + ($579))|0;
 $585 = 1.0 - $$$i21;
 $586 = (($$2$i22) + 1)|0;
 $i$03$i23 = 0;
 while(1) {
  $587 = ((($525) + (($$2$i22*160)|0)|0) + ($i$03$i23<<2)|0);
  $588 = HEAP32[$587>>2]|0;
  $589 = (+($588|0));
  $590 = $589 * $585;
  $591 = ((($525) + (($586*160)|0)|0) + ($i$03$i23<<2)|0);
  $592 = HEAP32[$591>>2]|0;
  $593 = (+($592|0));
  $594 = $593 * $$$i21;
  $595 = $594 + $590;
  $596 = $595;
  $597 = (((($569)) + 336|0) + ($i$03$i23<<2)|0);
  HEAPF32[$597>>2] = $596;
  $598 = (($i$03$i23) + 1)|0;
  $exitcond$i24 = ($598|0)==(40);
  if ($exitcond$i24) {
   break;
  } else {
   $i$03$i23 = $598;
  }
 }
 if (!($30)) {
  $599 = ((($1)) + 3616|0);
  $600 = +HEAPF64[$599>>3];
  $601 = ((($15)) + 88|0);
  $602 = HEAP32[$601>>2]|0;
  $603 = (~~(($600)));
  $604 = (+($603|0));
  $605 = $600 - $604;
  $606 = ((($531)) + 2860|0);
  $607 = HEAP32[$606>>2]|0;
  $608 = (($602) + ($603<<3)|0);
  $609 = +HEAPF64[$608>>3];
  $610 = 1.0 - $605;
  $611 = $609 * $610;
  $612 = (($603) + 1)|0;
  $613 = (($602) + ($612<<3)|0);
  $614 = +HEAPF64[$613>>3];
  $615 = $614 * $605;
  $616 = $615 + $611;
  $617 = (~~(($616)));
  $618 = (+($617|0));
  $619 = $616 - $618;
  $620 = $619 == 0.0;
  $621 = ($617|0)>(0);
  $or$cond$i26 = $621 & $620;
  $$$i27 = $or$cond$i26 ? 1.0 : $619;
  $622 = $or$cond$i26 << 31 >> 31;
  $$2$i28 = (($622) + ($617))|0;
  $623 = 1.0 - $$$i27;
  $624 = (($$2$i28) + 1)|0;
  $i$03$i29 = 0;
  while(1) {
   $625 = ((($525) + (($$2$i28*160)|0)|0) + ($i$03$i29<<2)|0);
   $626 = HEAP32[$625>>2]|0;
   $627 = (+($626|0));
   $628 = $627 * $623;
   $629 = ((($525) + (($624*160)|0)|0) + ($i$03$i29<<2)|0);
   $630 = HEAP32[$629>>2]|0;
   $631 = (+($630|0));
   $632 = $631 * $$$i27;
   $633 = $632 + $628;
   $634 = $633;
   $635 = (((($607)) + 336|0) + ($i$03$i29<<2)|0);
   HEAPF32[$635>>2] = $634;
   $636 = (($i$03$i29) + 1)|0;
   $exitcond$i30 = ($636|0)==(40);
   if ($exitcond$i30) {
    break;
   } else {
    $i$03$i29 = $636;
   }
  }
  $637 = ((($1)) + 3648|0);
  $638 = +HEAPF64[$637>>3];
  $639 = (~~(($638)));
  $640 = (+($639|0));
  $641 = $638 - $640;
  $642 = ((($531)) + 2864|0);
  $643 = HEAP32[$642>>2]|0;
  $644 = (($602) + ($639<<3)|0);
  $645 = +HEAPF64[$644>>3];
  $646 = 1.0 - $641;
  $647 = $645 * $646;
  $648 = (($639) + 1)|0;
  $649 = (($602) + ($648<<3)|0);
  $650 = +HEAPF64[$649>>3];
  $651 = $650 * $641;
  $652 = $651 + $647;
  $653 = (~~(($652)));
  $654 = (+($653|0));
  $655 = $652 - $654;
  $656 = $655 == 0.0;
  $657 = ($653|0)>(0);
  $or$cond$i32 = $657 & $656;
  $$$i33 = $or$cond$i32 ? 1.0 : $655;
  $658 = $or$cond$i32 << 31 >> 31;
  $$2$i34 = (($658) + ($653))|0;
  $659 = 1.0 - $$$i33;
  $660 = (($$2$i34) + 1)|0;
  $i$03$i35 = 0;
  while(1) {
   $661 = ((($525) + (($$2$i34*160)|0)|0) + ($i$03$i35<<2)|0);
   $662 = HEAP32[$661>>2]|0;
   $663 = (+($662|0));
   $664 = $663 * $659;
   $665 = ((($525) + (($660*160)|0)|0) + ($i$03$i35<<2)|0);
   $666 = HEAP32[$665>>2]|0;
   $667 = (+($666|0));
   $668 = $667 * $$$i33;
   $669 = $668 + $664;
   $670 = $669;
   $671 = (((($643)) + 336|0) + ($i$03$i35<<2)|0);
   HEAPF32[$671>>2] = $670;
   $672 = (($i$03$i35) + 1)|0;
   $exitcond$i36 = ($672|0)==(40);
   if ($exitcond$i36) {
    break;
   } else {
    $i$03$i35 = $672;
   }
  }
 }
 $673 = (((((($1)) + 3528|0) + ($$<<5)|0)) + 8|0);
 $674 = +HEAPF64[$673>>3];
 $675 = ((($15)) + 40|0);
 $676 = HEAP32[$675>>2]|0;
 $677 = (~~(($674)));
 $678 = (+($677|0));
 $679 = $674 - $678;
 $680 = (($676) + ($677<<2)|0);
 $681 = HEAP32[$680>>2]|0;
 $682 = (+($681|0));
 $683 = 1.0 - $679;
 $684 = $682 * $683;
 $685 = (($677) + 1)|0;
 $686 = (($676) + ($685<<2)|0);
 $687 = HEAP32[$686>>2]|0;
 $688 = (+($687|0));
 $689 = $688 * $679;
 $690 = $689 + $684;
 $691 = $690;
 $692 = ((($533)) + 32|0);
 HEAPF32[$692>>2] = $691;
 $693 = ((($1)) + 3568|0);
 $694 = +HEAPF64[$693>>3];
 $695 = (~~(($694)));
 $696 = (+($695|0));
 $697 = $694 - $696;
 $698 = (($676) + ($695<<2)|0);
 $699 = HEAP32[$698>>2]|0;
 $700 = (+($699|0));
 $701 = 1.0 - $697;
 $702 = $700 * $701;
 $703 = (($695) + 1)|0;
 $704 = (($676) + ($703<<2)|0);
 $705 = HEAP32[$704>>2]|0;
 $706 = (+($705|0));
 $707 = $706 * $697;
 $708 = $707 + $702;
 $709 = $708;
 $710 = ((($569)) + 32|0);
 HEAPF32[$710>>2] = $709;
 if (!($30)) {
  $711 = ((($1)) + 3600|0);
  $712 = +HEAPF64[$711>>3];
  $713 = (~~(($712)));
  $714 = (+($713|0));
  $715 = $712 - $714;
  $716 = ((($531)) + 2860|0);
  $717 = HEAP32[$716>>2]|0;
  $718 = (($676) + ($713<<2)|0);
  $719 = HEAP32[$718>>2]|0;
  $720 = (+($719|0));
  $721 = 1.0 - $715;
  $722 = $720 * $721;
  $723 = (($713) + 1)|0;
  $724 = (($676) + ($723<<2)|0);
  $725 = HEAP32[$724>>2]|0;
  $726 = (+($725|0));
  $727 = $726 * $715;
  $728 = $727 + $722;
  $729 = $728;
  $730 = ((($717)) + 32|0);
  HEAPF32[$730>>2] = $729;
  $731 = ((($1)) + 3632|0);
  $732 = +HEAPF64[$731>>3];
  $733 = (~~(($732)));
  $734 = (+($733|0));
  $735 = $732 - $734;
  $736 = ((($531)) + 2864|0);
  $737 = HEAP32[$736>>2]|0;
  $738 = (($676) + ($733<<2)|0);
  $739 = HEAP32[$738>>2]|0;
  $740 = (+($739|0));
  $741 = 1.0 - $735;
  $742 = $740 * $741;
  $743 = (($733) + 1)|0;
  $744 = (($676) + ($743<<2)|0);
  $745 = HEAP32[$744>>2]|0;
  $746 = (+($745|0));
  $747 = $746 * $735;
  $748 = $747 + $742;
  $749 = $748;
  $750 = ((($737)) + 32|0);
  HEAPF32[$750>>2] = $749;
 }
 $751 = (((((($1)) + 3528|0) + ($$<<5)|0)) + 16|0);
 $752 = +HEAPF64[$751>>3];
 $753 = ((($15)) + 76|0);
 $754 = HEAP32[$753>>2]|0;
 $755 = ((($15)) + 60|0);
 $756 = HEAP32[$755>>2]|0;
 $757 = ((($15)) + 56|0);
 $758 = HEAP32[$757>>2]|0;
 if ($5) {
  $761 = 0.0;
 } else {
  $759 = ((($1)) + 3408|0);
  $760 = +HEAPF64[$759>>3];
  $761 = $760;
 }
 _vorbis_encode_noisebias_setup($vi,$752,0,$754,$756,$758,$761);
 $762 = ((($1)) + 3576|0);
 $763 = +HEAPF64[$762>>3];
 $764 = HEAP32[$753>>2]|0;
 $765 = ((($15)) + 64|0);
 $766 = HEAP32[$765>>2]|0;
 $767 = HEAP32[$757>>2]|0;
 _vorbis_encode_noisebias_setup($vi,$763,1,$764,$766,$767,0.0);
 if ($30) {
  $803 = HEAP32[$0>>2]|0;
  $804 = ((($803)) + 2852|0);
  $805 = HEAP32[$804>>2]|0;
  $806 = ((($803)) + 3496|0);
  $807 = +HEAPF64[$806>>3];
  $808 = $807;
  $809 = ((($805)) + 4|0);
  HEAPF32[$809>>2] = $808;
  $810 = ((($803)) + 3504|0);
  $811 = +HEAPF64[$810>>3];
  $812 = $811;
  $813 = ((($805)) + 8|0);
  HEAPF32[$813>>2] = $812;
  $814 = ((($803)) + 2856|0);
  $815 = HEAP32[$814>>2]|0;
  $816 = ((($815)) + 4|0);
  HEAPF32[$816>>2] = $808;
  $817 = ((($815)) + 8|0);
  HEAPF32[$817>>2] = $812;
  $827 = $803;
 } else {
  $768 = ((($1)) + 3608|0);
  $769 = +HEAPF64[$768>>3];
  $770 = HEAP32[$753>>2]|0;
  $771 = ((($15)) + 68|0);
  $772 = HEAP32[$771>>2]|0;
  $773 = HEAP32[$757>>2]|0;
  _vorbis_encode_noisebias_setup($vi,$769,2,$770,$772,$773,0.0);
  $774 = ((($1)) + 3640|0);
  $775 = +HEAPF64[$774>>3];
  $776 = HEAP32[$753>>2]|0;
  $777 = ((($15)) + 72|0);
  $778 = HEAP32[$777>>2]|0;
  $779 = HEAP32[$757>>2]|0;
  _vorbis_encode_noisebias_setup($vi,$775,3,$776,$778,$779,0.0);
  $780 = HEAP32[$0>>2]|0;
  $781 = ((($780)) + 2852|0);
  $782 = HEAP32[$781>>2]|0;
  $783 = ((($780)) + 3496|0);
  $784 = +HEAPF64[$783>>3];
  $785 = $784;
  $786 = ((($782)) + 4|0);
  HEAPF32[$786>>2] = $785;
  $787 = ((($780)) + 3504|0);
  $788 = +HEAPF64[$787>>3];
  $789 = $788;
  $790 = ((($782)) + 8|0);
  HEAPF32[$790>>2] = $789;
  $791 = ((($780)) + 2856|0);
  $792 = HEAP32[$791>>2]|0;
  $793 = ((($792)) + 4|0);
  HEAPF32[$793>>2] = $785;
  $794 = ((($792)) + 8|0);
  HEAPF32[$794>>2] = $789;
  $795 = ((($780)) + 2860|0);
  $796 = HEAP32[$795>>2]|0;
  $797 = ((($796)) + 4|0);
  HEAPF32[$797>>2] = $785;
  $798 = ((($796)) + 8|0);
  HEAPF32[$798>>2] = $789;
  $799 = ((($780)) + 2864|0);
  $800 = HEAP32[$799>>2]|0;
  $801 = ((($800)) + 4|0);
  HEAPF32[$801>>2] = $785;
  $802 = ((($800)) + 8|0);
  HEAPF32[$802>>2] = $789;
  $827 = $780;
 }
 $818 = +HEAPF64[$18>>3];
 $819 = ((($15)) + 152|0);
 $820 = HEAP32[$819>>2]|0;
 $821 = (~~(($818)));
 $822 = (($820) + ($821<<3)|0);
 $823 = HEAP32[$822>>2]|0;
 $824 = (((($820) + ($821<<3)|0)) + 4|0);
 $825 = HEAP32[$824>>2]|0;
 $826 = HEAP32[$827>>2]|0;
 $828 = ((($827)) + 4|0);
 $829 = HEAP32[$828>>2]|0;
 $830 = ($826|0)==($829|0);
 $$$i = $830 ? 1 : 2;
 $831 = ((($827)) + 8|0);
 $832 = ((($827)) + 12|0);
 $833 = ((($vi)) + 8|0);
 $834 = ((($vi)) + 4|0);
 $i$014$i = 0;
 while(1) {
  $835 = (_calloc(1,3208)|0);
  $836 = (((($827)) + 544|0) + ($i$014$i<<2)|0);
  HEAP32[$836>>2] = $835;
  $837 = (_calloc(1,16)|0);
  $838 = (((($827)) + 32|0) + ($i$014$i<<2)|0);
  HEAP32[$838>>2] = $837;
  $839 = (26304 + ($i$014$i<<4)|0);
  ;HEAP32[$837>>2]=HEAP32[$839>>2]|0;HEAP32[$837+4>>2]=HEAP32[$839+4>>2]|0;HEAP32[$837+8>>2]=HEAP32[$839+8>>2]|0;HEAP32[$837+12>>2]=HEAP32[$839+12>>2]|0;
  $840 = HEAP32[$831>>2]|0;
  $841 = ($i$014$i|0)<($840|0);
  if (!($841)) {
   $842 = (($i$014$i) + 1)|0;
   HEAP32[$831>>2] = $842;
  }
  $843 = (((($827)) + 288|0) + ($i$014$i<<2)|0);
  HEAP32[$843>>2] = 0;
  $844 = HEAP32[$836>>2]|0;
  $845 = (($823) + (($i$014$i*3208)|0)|0);
  _memcpy(($844|0),($845|0),3208)|0;
  $846 = HEAP32[$832>>2]|0;
  $847 = ($i$014$i|0)<($846|0);
  if (!($847)) {
   $848 = (($i$014$i) + 1)|0;
   HEAP32[$832>>2] = $848;
  }
  $849 = HEAP32[$845>>2]|0;
  $850 = ($849|0)>(0);
  if ($850) {
   $j$013$i = 0;
   while(1) {
    $851 = ((((($823) + (($i$014$i*3208)|0)|0)) + 1092|0) + ($j$013$i<<2)|0);
    $852 = HEAP32[$851>>2]|0;
    $853 = HEAP32[$0>>2]|0;
    $854 = (_malloc(2840)|0);
    $855 = (((($853)) + 1568|0) + ($852<<2)|0);
    HEAP32[$855>>2] = $854;
    $856 = (((($825) + ($852<<5)|0)) + 12|0);
    $857 = HEAP32[$856>>2]|0;
    _memcpy(($854|0),($857|0),2840)|0;
    $858 = ((($853)) + 20|0);
    $859 = HEAP32[$858>>2]|0;
    $860 = ($859|0)>($852|0);
    if (!($860)) {
     $861 = (($852) + 1)|0;
     HEAP32[$858>>2] = $861;
    }
    $862 = (((($825) + ($852<<5)|0)) + 8|0);
    $863 = HEAP32[$862>>2]|0;
    $864 = ((($854)) + 8|0);
    HEAP32[$864>>2] = $863;
    $865 = (($825) + ($852<<5)|0);
    $866 = HEAP32[$865>>2]|0;
    $867 = (((($853)) + 1312|0) + ($852<<2)|0);
    HEAP32[$867>>2] = $866;
    $868 = ((($853)) + 3420|0);
    $869 = HEAP32[$868>>2]|0;
    $870 = ($869|0)==(0);
    $871 = ((($854)) + 12|0);
    $872 = HEAP32[$871>>2]|0;
    $873 = ($872|0)>(0);
    do {
     if ($870) {
      if ($873) {
       $877 = (((($825) + ($852<<5)|0)) + 24|0);
       $878 = HEAP32[$877>>2]|0;
       $879 = ((($854)) + 24|0);
       $i$247$i$i = 0;
       while(1) {
        $928 = (($879) + ($i$247$i$i<<2)|0);
        $929 = (($878) + ($i$247$i$i<<4)|0);
        $930 = HEAP32[$929>>2]|0;
        $931 = ($930|0)==(0|0);
        if (!($931)) {
         $932 = HEAP32[$928>>2]|0;
         $933 = $932 | 1;
         HEAP32[$928>>2] = $933;
        }
        $934 = (((($878) + ($i$247$i$i<<4)|0)) + 4|0);
        $935 = HEAP32[$934>>2]|0;
        $936 = ($935|0)==(0|0);
        if (!($936)) {
         $1103 = HEAP32[$928>>2]|0;
         $1104 = $1103 | 2;
         HEAP32[$928>>2] = $1104;
        }
        $1105 = (((($878) + ($i$247$i$i<<4)|0)) + 8|0);
        $1106 = HEAP32[$1105>>2]|0;
        $1107 = ($1106|0)==(0|0);
        if (!($1107)) {
         $1108 = HEAP32[$928>>2]|0;
         $1109 = $1108 | 4;
         HEAP32[$928>>2] = $1109;
        }
        $1110 = (((($878) + ($i$247$i$i<<4)|0)) + 12|0);
        $1111 = HEAP32[$1110>>2]|0;
        $1112 = ($1111|0)==(0|0);
        if (!($1112)) {
         $1113 = HEAP32[$928>>2]|0;
         $1114 = $1113 | 8;
         HEAP32[$928>>2] = $1114;
        }
        $1115 = (($i$247$i$i) + 1)|0;
        $1116 = HEAP32[$871>>2]|0;
        $1117 = ($1115|0)<($1116|0);
        if ($1117) {
         $i$247$i$i = $1115;
        } else {
         $951 = $1116;
         break;
        }
       }
      } else {
       $951 = $872;
      }
      $937 = (((($825) + ($852<<5)|0)) + 16|0);
      $938 = HEAP32[$937>>2]|0;
      $939 = ((($853)) + 24|0);
      $940 = HEAP32[$939>>2]|0;
      $941 = ($940|0)>(0);
      $942 = $938;
      L223: do {
       if ($941) {
        $i$05$i6$i$i = 0;
        while(1) {
         $943 = (((($853)) + 1824|0) + ($i$05$i6$i$i<<2)|0);
         $944 = HEAP32[$943>>2]|0;
         $945 = ($944|0)==($938|0);
         if ($945) {
          $$0$i9$i$i = $i$05$i6$i$i;
          break L223;
         }
         $946 = (($i$05$i6$i$i) + 1)|0;
         $947 = ($946|0)<($940|0);
         if ($947) {
          $i$05$i6$i$i = $946;
         } else {
          label = 116;
          break;
         }
        }
       } else {
        label = 116;
       }
      } while(0);
      if ((label|0) == 116) {
       label = 0;
       $948 = (($940) + 1)|0;
       HEAP32[$939>>2] = $948;
       $$0$i9$i$i = $940;
      }
      $949 = ((($854)) + 20|0);
      HEAP32[$949>>2] = $$0$i9$i$i;
      $950 = (((($853)) + 1824|0) + ($$0$i9$i$i<<2)|0);
      HEAP32[$950>>2] = $942;
      $952 = ($951|0)>(0);
      if (!($952)) {
       break;
      }
      $953 = (((($825) + ($852<<5)|0)) + 24|0);
      $954 = ((($854)) + 280|0);
      $booklist$344$i$i = 0;$i$345$i$i = 0;
      while(1) {
       $955 = HEAP32[$953>>2]|0;
       $956 = (($955) + ($i$345$i$i<<4)|0);
       $957 = HEAP32[$956>>2]|0;
       $958 = ($957|0)==(0|0);
       $959 = $957;
       if ($958) {
        $972 = $955;$booklist$5$i$i = $booklist$344$i$i;
       } else {
        $960 = HEAP32[$939>>2]|0;
        $961 = ($960|0)>(0);
        L235: do {
         if ($961) {
          $i$05$i1$i$i = 0;
          while(1) {
           $962 = (((($853)) + 1824|0) + ($i$05$i1$i$i<<2)|0);
           $963 = HEAP32[$962>>2]|0;
           $964 = ($963|0)==($957|0);
           if ($964) {
            $$0$i4$i$i = $i$05$i1$i$i;
            break L235;
           }
           $965 = (($i$05$i1$i$i) + 1)|0;
           $966 = ($965|0)<($960|0);
           if ($966) {
            $i$05$i1$i$i = $965;
           } else {
            label = 123;
            break;
           }
          }
         } else {
          label = 123;
         }
        } while(0);
        if ((label|0) == 123) {
         label = 0;
         $967 = (($960) + 1)|0;
         HEAP32[$939>>2] = $967;
         $$0$i4$i$i = $960;
        }
        $968 = (($booklist$344$i$i) + 1)|0;
        $969 = (($954) + ($booklist$344$i$i<<2)|0);
        HEAP32[$969>>2] = $$0$i4$i$i;
        $970 = (((($853)) + 1824|0) + ($$0$i4$i$i<<2)|0);
        HEAP32[$970>>2] = $959;
        $$pre65$i$i = HEAP32[$953>>2]|0;
        $972 = $$pre65$i$i;$booklist$5$i$i = $968;
       }
       $971 = (((($972) + ($i$345$i$i<<4)|0)) + 4|0);
       $973 = HEAP32[$971>>2]|0;
       $974 = ($973|0)==(0|0);
       $975 = $973;
       if ($974) {
        $1069 = $972;$booklist$5$1$i$i = $booklist$5$i$i;
       } else {
        $1057 = HEAP32[$939>>2]|0;
        $1058 = ($1057|0)>(0);
        L245: do {
         if ($1058) {
          $i$05$i1$1$i$i = 0;
          while(1) {
           $1059 = (((($853)) + 1824|0) + ($i$05$i1$1$i$i<<2)|0);
           $1060 = HEAP32[$1059>>2]|0;
           $1061 = ($1060|0)==($973|0);
           if ($1061) {
            $$0$i4$1$i$i = $i$05$i1$1$i$i;
            break L245;
           }
           $1062 = (($i$05$i1$1$i$i) + 1)|0;
           $1063 = ($1062|0)<($1057|0);
           if ($1063) {
            $i$05$i1$1$i$i = $1062;
           } else {
            label = 147;
            break;
           }
          }
         } else {
          label = 147;
         }
        } while(0);
        if ((label|0) == 147) {
         label = 0;
         $1064 = (($1057) + 1)|0;
         HEAP32[$939>>2] = $1064;
         $$0$i4$1$i$i = $1057;
        }
        $1065 = (($booklist$5$i$i) + 1)|0;
        $1066 = (($954) + ($booklist$5$i$i<<2)|0);
        HEAP32[$1066>>2] = $$0$i4$1$i$i;
        $1067 = (((($853)) + 1824|0) + ($$0$i4$1$i$i<<2)|0);
        HEAP32[$1067>>2] = $975;
        $$pre66$i$i = HEAP32[$953>>2]|0;
        $1069 = $$pre66$i$i;$booklist$5$1$i$i = $1065;
       }
       $1068 = (((($1069) + ($i$345$i$i<<4)|0)) + 8|0);
       $1070 = HEAP32[$1068>>2]|0;
       $1071 = ($1070|0)==(0|0);
       $1072 = $1070;
       if ($1071) {
        $1085 = $1069;$booklist$5$2$i$i = $booklist$5$1$i$i;
       } else {
        $1073 = HEAP32[$939>>2]|0;
        $1074 = ($1073|0)>(0);
        L255: do {
         if ($1074) {
          $i$05$i1$2$i$i = 0;
          while(1) {
           $1075 = (((($853)) + 1824|0) + ($i$05$i1$2$i$i<<2)|0);
           $1076 = HEAP32[$1075>>2]|0;
           $1077 = ($1076|0)==($1070|0);
           if ($1077) {
            $$0$i4$2$i$i = $i$05$i1$2$i$i;
            break L255;
           }
           $1078 = (($i$05$i1$2$i$i) + 1)|0;
           $1079 = ($1078|0)<($1073|0);
           if ($1079) {
            $i$05$i1$2$i$i = $1078;
           } else {
            label = 153;
            break;
           }
          }
         } else {
          label = 153;
         }
        } while(0);
        if ((label|0) == 153) {
         label = 0;
         $1080 = (($1073) + 1)|0;
         HEAP32[$939>>2] = $1080;
         $$0$i4$2$i$i = $1073;
        }
        $1081 = (($booklist$5$1$i$i) + 1)|0;
        $1082 = (($954) + ($booklist$5$1$i$i<<2)|0);
        HEAP32[$1082>>2] = $$0$i4$2$i$i;
        $1083 = (((($853)) + 1824|0) + ($$0$i4$2$i$i<<2)|0);
        HEAP32[$1083>>2] = $1072;
        $$pre67$i$i = HEAP32[$953>>2]|0;
        $1085 = $$pre67$i$i;$booklist$5$2$i$i = $1081;
       }
       $1084 = (((($1085) + ($i$345$i$i<<4)|0)) + 12|0);
       $1086 = HEAP32[$1084>>2]|0;
       $1087 = ($1086|0)==(0|0);
       $1088 = $1086;
       if ($1087) {
        $booklist$5$3$i$i = $booklist$5$2$i$i;
       } else {
        $1089 = HEAP32[$939>>2]|0;
        $1090 = ($1089|0)>(0);
        L265: do {
         if ($1090) {
          $i$05$i1$3$i$i = 0;
          while(1) {
           $1091 = (((($853)) + 1824|0) + ($i$05$i1$3$i$i<<2)|0);
           $1092 = HEAP32[$1091>>2]|0;
           $1093 = ($1092|0)==($1086|0);
           if ($1093) {
            $$0$i4$3$i$i = $i$05$i1$3$i$i;
            break L265;
           }
           $1094 = (($i$05$i1$3$i$i) + 1)|0;
           $1095 = ($1094|0)<($1089|0);
           if ($1095) {
            $i$05$i1$3$i$i = $1094;
           } else {
            label = 159;
            break;
           }
          }
         } else {
          label = 159;
         }
        } while(0);
        if ((label|0) == 159) {
         label = 0;
         $1096 = (($1089) + 1)|0;
         HEAP32[$939>>2] = $1096;
         $$0$i4$3$i$i = $1089;
        }
        $1097 = (($booklist$5$2$i$i) + 1)|0;
        $1098 = (($954) + ($booklist$5$2$i$i<<2)|0);
        HEAP32[$1098>>2] = $$0$i4$3$i$i;
        $1099 = (((($853)) + 1824|0) + ($$0$i4$3$i$i<<2)|0);
        HEAP32[$1099>>2] = $1088;
        $booklist$5$3$i$i = $1097;
       }
       $1100 = (($i$345$i$i) + 1)|0;
       $1101 = HEAP32[$871>>2]|0;
       $1102 = ($1100|0)<($1101|0);
       if ($1102) {
        $booklist$344$i$i = $booklist$5$3$i$i;$i$345$i$i = $1100;
       } else {
        break;
       }
      }
     } else {
      if ($873) {
       $874 = (((($825) + ($852<<5)|0)) + 28|0);
       $875 = HEAP32[$874>>2]|0;
       $876 = ((($854)) + 24|0);
       $i$056$i$i = 0;
       while(1) {
        $880 = (($876) + ($i$056$i$i<<2)|0);
        $881 = (($875) + ($i$056$i$i<<4)|0);
        $882 = HEAP32[$881>>2]|0;
        $883 = ($882|0)==(0|0);
        if (!($883)) {
         $884 = HEAP32[$880>>2]|0;
         $885 = $884 | 1;
         HEAP32[$880>>2] = $885;
        }
        $886 = (((($875) + ($i$056$i$i<<4)|0)) + 4|0);
        $887 = HEAP32[$886>>2]|0;
        $888 = ($887|0)==(0|0);
        if (!($888)) {
         $1164 = HEAP32[$880>>2]|0;
         $1165 = $1164 | 2;
         HEAP32[$880>>2] = $1165;
        }
        $1166 = (((($875) + ($i$056$i$i<<4)|0)) + 8|0);
        $1167 = HEAP32[$1166>>2]|0;
        $1168 = ($1167|0)==(0|0);
        if (!($1168)) {
         $1169 = HEAP32[$880>>2]|0;
         $1170 = $1169 | 4;
         HEAP32[$880>>2] = $1170;
        }
        $1171 = (((($875) + ($i$056$i$i<<4)|0)) + 12|0);
        $1172 = HEAP32[$1171>>2]|0;
        $1173 = ($1172|0)==(0|0);
        if (!($1173)) {
         $1174 = HEAP32[$880>>2]|0;
         $1175 = $1174 | 8;
         HEAP32[$880>>2] = $1175;
        }
        $1176 = (($i$056$i$i) + 1)|0;
        $1177 = HEAP32[$871>>2]|0;
        $1178 = ($1176|0)<($1177|0);
        if ($1178) {
         $i$056$i$i = $1176;
        } else {
         $903 = $1177;
         break;
        }
       }
      } else {
       $903 = $872;
      }
      $889 = (((($825) + ($852<<5)|0)) + 20|0);
      $890 = HEAP32[$889>>2]|0;
      $891 = ((($853)) + 24|0);
      $892 = HEAP32[$891>>2]|0;
      $893 = ($892|0)>(0);
      $894 = $890;
      L155: do {
       if ($893) {
        $i$05$i$i$i = 0;
        while(1) {
         $895 = (((($853)) + 1824|0) + ($i$05$i$i$i<<2)|0);
         $896 = HEAP32[$895>>2]|0;
         $897 = ($896|0)==($890|0);
         if ($897) {
          $$0$i$i$i = $i$05$i$i$i;
          break L155;
         }
         $898 = (($i$05$i$i$i) + 1)|0;
         $899 = ($898|0)<($892|0);
         if ($899) {
          $i$05$i$i$i = $898;
         } else {
          label = 100;
          break;
         }
        }
       } else {
        label = 100;
       }
      } while(0);
      if ((label|0) == 100) {
       label = 0;
       $900 = (($892) + 1)|0;
       HEAP32[$891>>2] = $900;
       $$0$i$i$i = $892;
      }
      $901 = ((($854)) + 20|0);
      HEAP32[$901>>2] = $$0$i$i$i;
      $902 = (((($853)) + 1824|0) + ($$0$i$i$i<<2)|0);
      HEAP32[$902>>2] = $894;
      $904 = ($903|0)>(0);
      if (!($904)) {
       break;
      }
      $905 = (((($825) + ($852<<5)|0)) + 28|0);
      $906 = ((($854)) + 280|0);
      $booklist$053$i$i = 0;$i$154$i$i = 0;
      while(1) {
       $907 = HEAP32[$905>>2]|0;
       $908 = (($907) + ($i$154$i$i<<4)|0);
       $909 = HEAP32[$908>>2]|0;
       $910 = ($909|0)==(0|0);
       $911 = $909;
       if ($910) {
        $924 = $907;$booklist$2$i$i = $booklist$053$i$i;
       } else {
        $912 = HEAP32[$891>>2]|0;
        $913 = ($912|0)>(0);
        L167: do {
         if ($913) {
          $i$05$i11$i$i = 0;
          while(1) {
           $914 = (((($853)) + 1824|0) + ($i$05$i11$i$i<<2)|0);
           $915 = HEAP32[$914>>2]|0;
           $916 = ($915|0)==($909|0);
           if ($916) {
            $$0$i14$i$i = $i$05$i11$i$i;
            break L167;
           }
           $917 = (($i$05$i11$i$i) + 1)|0;
           $918 = ($917|0)<($912|0);
           if ($918) {
            $i$05$i11$i$i = $917;
           } else {
            label = 107;
            break;
           }
          }
         } else {
          label = 107;
         }
        } while(0);
        if ((label|0) == 107) {
         label = 0;
         $919 = (($912) + 1)|0;
         HEAP32[$891>>2] = $919;
         $$0$i14$i$i = $912;
        }
        $920 = (($booklist$053$i$i) + 1)|0;
        $921 = (($906) + ($booklist$053$i$i<<2)|0);
        HEAP32[$921>>2] = $$0$i14$i$i;
        $922 = (((($853)) + 1824|0) + ($$0$i14$i$i<<2)|0);
        HEAP32[$922>>2] = $911;
        $$pre$i$i = HEAP32[$905>>2]|0;
        $924 = $$pre$i$i;$booklist$2$i$i = $920;
       }
       $923 = (((($924) + ($i$154$i$i<<4)|0)) + 4|0);
       $925 = HEAP32[$923>>2]|0;
       $926 = ($925|0)==(0|0);
       $927 = $925;
       if ($926) {
        $1130 = $924;$booklist$2$1$i$i = $booklist$2$i$i;
       } else {
        $1118 = HEAP32[$891>>2]|0;
        $1119 = ($1118|0)>(0);
        L177: do {
         if ($1119) {
          $i$05$i11$1$i$i = 0;
          while(1) {
           $1120 = (((($853)) + 1824|0) + ($i$05$i11$1$i$i<<2)|0);
           $1121 = HEAP32[$1120>>2]|0;
           $1122 = ($1121|0)==($925|0);
           if ($1122) {
            $$0$i14$1$i$i = $i$05$i11$1$i$i;
            break L177;
           }
           $1123 = (($i$05$i11$1$i$i) + 1)|0;
           $1124 = ($1123|0)<($1118|0);
           if ($1124) {
            $i$05$i11$1$i$i = $1123;
           } else {
            label = 171;
            break;
           }
          }
         } else {
          label = 171;
         }
        } while(0);
        if ((label|0) == 171) {
         label = 0;
         $1125 = (($1118) + 1)|0;
         HEAP32[$891>>2] = $1125;
         $$0$i14$1$i$i = $1118;
        }
        $1126 = (($booklist$2$i$i) + 1)|0;
        $1127 = (($906) + ($booklist$2$i$i<<2)|0);
        HEAP32[$1127>>2] = $$0$i14$1$i$i;
        $1128 = (((($853)) + 1824|0) + ($$0$i14$1$i$i<<2)|0);
        HEAP32[$1128>>2] = $927;
        $$pre63$i$i = HEAP32[$905>>2]|0;
        $1130 = $$pre63$i$i;$booklist$2$1$i$i = $1126;
       }
       $1129 = (((($1130) + ($i$154$i$i<<4)|0)) + 8|0);
       $1131 = HEAP32[$1129>>2]|0;
       $1132 = ($1131|0)==(0|0);
       $1133 = $1131;
       if ($1132) {
        $1146 = $1130;$booklist$2$2$i$i = $booklist$2$1$i$i;
       } else {
        $1134 = HEAP32[$891>>2]|0;
        $1135 = ($1134|0)>(0);
        L187: do {
         if ($1135) {
          $i$05$i11$2$i$i = 0;
          while(1) {
           $1136 = (((($853)) + 1824|0) + ($i$05$i11$2$i$i<<2)|0);
           $1137 = HEAP32[$1136>>2]|0;
           $1138 = ($1137|0)==($1131|0);
           if ($1138) {
            $$0$i14$2$i$i = $i$05$i11$2$i$i;
            break L187;
           }
           $1139 = (($i$05$i11$2$i$i) + 1)|0;
           $1140 = ($1139|0)<($1134|0);
           if ($1140) {
            $i$05$i11$2$i$i = $1139;
           } else {
            label = 177;
            break;
           }
          }
         } else {
          label = 177;
         }
        } while(0);
        if ((label|0) == 177) {
         label = 0;
         $1141 = (($1134) + 1)|0;
         HEAP32[$891>>2] = $1141;
         $$0$i14$2$i$i = $1134;
        }
        $1142 = (($booklist$2$1$i$i) + 1)|0;
        $1143 = (($906) + ($booklist$2$1$i$i<<2)|0);
        HEAP32[$1143>>2] = $$0$i14$2$i$i;
        $1144 = (((($853)) + 1824|0) + ($$0$i14$2$i$i<<2)|0);
        HEAP32[$1144>>2] = $1133;
        $$pre64$i$i = HEAP32[$905>>2]|0;
        $1146 = $$pre64$i$i;$booklist$2$2$i$i = $1142;
       }
       $1145 = (((($1146) + ($i$154$i$i<<4)|0)) + 12|0);
       $1147 = HEAP32[$1145>>2]|0;
       $1148 = ($1147|0)==(0|0);
       $1149 = $1147;
       if ($1148) {
        $booklist$2$3$i$i = $booklist$2$2$i$i;
       } else {
        $1150 = HEAP32[$891>>2]|0;
        $1151 = ($1150|0)>(0);
        L197: do {
         if ($1151) {
          $i$05$i11$3$i$i = 0;
          while(1) {
           $1152 = (((($853)) + 1824|0) + ($i$05$i11$3$i$i<<2)|0);
           $1153 = HEAP32[$1152>>2]|0;
           $1154 = ($1153|0)==($1147|0);
           if ($1154) {
            $$0$i14$3$i$i = $i$05$i11$3$i$i;
            break L197;
           }
           $1155 = (($i$05$i11$3$i$i) + 1)|0;
           $1156 = ($1155|0)<($1150|0);
           if ($1156) {
            $i$05$i11$3$i$i = $1155;
           } else {
            label = 183;
            break;
           }
          }
         } else {
          label = 183;
         }
        } while(0);
        if ((label|0) == 183) {
         label = 0;
         $1157 = (($1150) + 1)|0;
         HEAP32[$891>>2] = $1157;
         $$0$i14$3$i$i = $1150;
        }
        $1158 = (($booklist$2$2$i$i) + 1)|0;
        $1159 = (($906) + ($booklist$2$2$i$i<<2)|0);
        HEAP32[$1159>>2] = $$0$i14$3$i$i;
        $1160 = (((($853)) + 1824|0) + ($$0$i14$3$i$i<<2)|0);
        HEAP32[$1160>>2] = $1149;
        $booklist$2$3$i$i = $1158;
       }
       $1161 = (($i$154$i$i) + 1)|0;
       $1162 = HEAP32[$871>>2]|0;
       $1163 = ($1161|0)<($1162|0);
       if ($1163) {
        $booklist$053$i$i = $booklist$2$3$i$i;$i$154$i$i = $1161;
       } else {
        break;
       }
      }
     }
    } while(0);
    $976 = ((($853)) + 3480|0);
    $977 = +HEAPF64[$976>>3];
    $978 = $977 * 1000.0;
    $979 = (((($853)) + 1056|0) + ($i$014$i<<2)|0);
    $980 = HEAP32[$979>>2]|0;
    $981 = HEAP32[$833>>2]|0;
    $982 = (+($981|0));
    $983 = $982 * 0.5;
    $984 = (($853) + ($i$014$i<<2)|0);
    $985 = HEAP32[$984>>2]|0;
    $986 = $985 >> 1;
    $987 = $978 > $983;
    $freq$0$i$i = $987 ? $983 : $978;
    $988 = $freq$0$i$i / $983;
    $989 = (+($986|0));
    $990 = $989 * $988;
    $991 = (~~(($990)));
    $992 = ((($980)) + 1116|0);
    HEAP32[$992>>2] = $991;
    $993 = (((($825) + ($852<<5)|0)) + 4|0);
    $994 = HEAP32[$993>>2]|0;
    do {
     if ((($994|0) == 2)) {
      $freq$2$i$i = 250.0;
     } else if ((($994|0) == 1)) {
      $995 = HEAP32[$868>>2]|0;
      $996 = ($995|0)==(0);
      $997 = ((($853)) + 2996|0);
      $998 = ((($853)) + 2968|0);
      $freq$1$in$in$in$i$i = $996 ? $998 : $997;
      $freq$1$in$in$i$i = HEAP32[$freq$1$in$in$in$i$i>>2]|0;
      $freq$1$in$i$i = (+($freq$1$in$in$i$i|0));
      $freq$1$i$i = $freq$1$in$i$i * 1000.0;
      $999 = $freq$1$i$i > $983;
      if (!($999)) {
       $freq$2$i$i = $freq$1$i$i;
       break;
      }
      $freq$2$i$i = $983;
     } else {
      $freq$2$i$i = $freq$0$i$i;
     }
    } while(0);
    $1000 = HEAP32[$867>>2]|0;
    $1001 = ($1000|0)==(2);
    do {
     if ($1001) {
      $1002 = ((($853)) + 12|0);
      $1003 = HEAP32[$1002>>2]|0;
      $1004 = ($1003|0)>(0);
      if ($1004) {
       $i$437$i$i = 0;
       while(1) {
        $1005 = (((($853)) + 544|0) + ($i$437$i$i<<2)|0);
        $1006 = HEAP32[$1005>>2]|0;
        $1007 = HEAP32[$1006>>2]|0;
        $1008 = ($1007|0)>(0);
        if ($1008) {
         $j$032$i$i = 0;
         while(1) {
          $1009 = (((($1006)) + 1092|0) + ($j$032$i$i<<2)|0);
          $1010 = HEAP32[$1009>>2]|0;
          $1011 = ($1010|0)==($852|0);
          do {
           if ($1011) {
            $1012 = HEAP32[$834>>2]|0;
            $1013 = ($1012|0)>(0);
            if ($1013) {
             $ch$231$i$i = 0;$k2$030$i$i = 0;
            } else {
             $ch$4$i$i = 0;
             break;
            }
            while(1) {
             $1014 = (((($1006)) + 4|0) + ($k2$030$i$i<<2)|0);
             $1015 = HEAP32[$1014>>2]|0;
             $1016 = ($1015|0)==($j$032$i$i|0);
             $1017 = $1016&1;
             $$ch$2$i$i = (($1017) + ($ch$231$i$i))|0;
             $1018 = (($k2$030$i$i) + 1)|0;
             $exitcond$i = ($1018|0)==($1012|0);
             if ($exitcond$i) {
              $ch$4$i$i = $$ch$2$i$i;
              break;
             } else {
              $ch$231$i$i = $$ch$2$i$i;$k2$030$i$i = $1018;
             }
            }
           } else {
            $ch$4$i$i = 0;
           }
          } while(0);
          $1019 = (($j$032$i$i) + 1)|0;
          $1020 = ($1019|0)<($1007|0);
          $1021 = ($ch$4$i$i|0)==(0);
          $1022 = $1020 & $1021;
          if ($1022) {
           $j$032$i$i = $1019;
          } else {
           $ch$1$lcssa$i$i = $ch$4$i$i;
           break;
          }
         }
        } else {
         $ch$1$lcssa$i$i = 0;
        }
        $1023 = (($i$437$i$i) + 1)|0;
        $1024 = ($1023|0)<($1003|0);
        $1025 = ($ch$1$lcssa$i$i|0)==(0);
        $1026 = $1024 & $1025;
        if ($1026) {
         $i$437$i$i = $1023;
        } else {
         $ch$0$lcssa$i$i = $ch$1$lcssa$i$i;
         break;
        }
       }
      } else {
       $ch$0$lcssa$i$i = 0;
      }
      $1027 = $freq$2$i$i / $983;
      $1028 = (+($ch$0$lcssa$i$i|0));
      $1029 = $1028 * $989;
      $1030 = $1029 * $1027;
      $1031 = HEAP32[$864>>2]|0;
      $1032 = (+($1031|0));
      $1033 = $1030 / $1032;
      $1034 = $1033 + 0.90000000000000002;
      $1035 = (~~(($1034)));
      $1036 = Math_imul($1035, $1031)|0;
      $1037 = ((($854)) + 4|0);
      HEAP32[$1037>>2] = $1036;
      $1038 = Math_imul($ch$0$lcssa$i$i, $986)|0;
      $1039 = ($1036|0)>($1038|0);
      if (!($1039)) {
       $$pre$phi68$i$iZ2D = $1037;$1054 = $1036;$1056 = $1031;
       break;
      }
      $1040 = (($1038|0) % ($1031|0))&-1;
      $1041 = (($1038) - ($1040))|0;
      HEAP32[$1037>>2] = $1041;
      $$pre$phi68$i$iZ2D = $1037;$1054 = $1041;$1056 = $1031;
     } else {
      $1042 = $freq$2$i$i / $983;
      $1043 = $1042 * $989;
      $1044 = HEAP32[$864>>2]|0;
      $1045 = (+($1044|0));
      $1046 = $1043 / $1045;
      $1047 = $1046 + 0.90000000000000002;
      $1048 = (~~(($1047)));
      $1049 = Math_imul($1048, $1044)|0;
      $1050 = ((($854)) + 4|0);
      HEAP32[$1050>>2] = $1049;
      $1051 = ($1049|0)>($986|0);
      if (!($1051)) {
       $$pre$phi68$i$iZ2D = $1050;$1054 = $1049;$1056 = $1044;
       break;
      }
      $1052 = (($986|0) % ($1044|0))&-1;
      $1053 = (($986) - ($1052))|0;
      HEAP32[$1050>>2] = $1053;
      $$pre$phi68$i$iZ2D = $1050;$1054 = $1053;$1056 = $1044;
     }
    } while(0);
    $1055 = ($1054|0)==(0);
    if ($1055) {
     HEAP32[$$pre$phi68$i$iZ2D>>2] = $1056;
    }
    $1179 = (($j$013$i) + 1)|0;
    $1180 = HEAP32[$845>>2]|0;
    $1181 = ($1179|0)<($1180|0);
    if ($1181) {
     $j$013$i = $1179;
    } else {
     break;
    }
   }
  }
  $1182 = (($i$014$i) + 1)|0;
  $1183 = ($1182|0)<($$$i|0);
  if ($1183) {
   $i$014$i = $1182;
  } else {
   break;
  }
 }
 $1184 = ((($1)) + 3428|0);
 $1185 = HEAP32[$1184>>2]|0;
 $1186 = ($1185|0)>(0);
 if ($1186) {
  $1187 = ((($vi)) + 16|0);
  HEAP32[$1187>>2] = $1185;
 } else {
  $1188 = HEAP32[$0>>2]|0;
  $1189 = ((($1188)) + 3396|0);
  $1190 = HEAP32[$1189>>2]|0;
  $1191 = ((($1188)) + 3400|0);
  $1192 = +HEAPF64[$1191>>3];
  $1193 = (~~(($1192)));
  $1194 = (+($1193|0));
  $1195 = $1192 - $1194;
  $1196 = ((($1190)) + 4|0);
  $1197 = HEAP32[$1196>>2]|0;
  $1198 = ($1197|0)==(0|0);
  if ($1198) {
   $$0$i = -1;
  } else {
   $1199 = HEAP32[$834>>2]|0;
   $1200 = (($1197) + ($1193<<3)|0);
   $1201 = +HEAPF64[$1200>>3];
   $1202 = 1.0 - $1195;
   $1203 = $1201 * $1202;
   $1204 = (($1193) + 1)|0;
   $1205 = (($1197) + ($1204<<3)|0);
   $1206 = +HEAPF64[$1205>>3];
   $1207 = $1206 * $1195;
   $1208 = $1207 + $1203;
   $1209 = (+($1199|0));
   $1210 = $1208 * $1209;
   $phitmp = (~~(($1210)));
   $$0$i = $phitmp;
  }
  $1211 = ((($vi)) + 16|0);
  HEAP32[$1211>>2] = $$0$i;
 }
 $1212 = ((($1)) + 3424|0);
 $1213 = HEAP32[$1212>>2]|0;
 $1214 = ((($vi)) + 20|0);
 HEAP32[$1214>>2] = $1213;
 $1215 = ((($1)) + 3440|0);
 $1216 = HEAP32[$1215>>2]|0;
 $1217 = ((($vi)) + 12|0);
 HEAP32[$1217>>2] = $1216;
 $1218 = ($1185|0)==(0);
 if ($1218) {
  $$sink = 0;
 } else {
  $1219 = ((($1)) + 3444|0);
  $1220 = HEAP32[$1219>>2]|0;
  $1221 = (+($1220|0));
  $1222 = (+($1185|0));
  $1223 = $1221 / $1222;
  $1224 = (~~(($1223)));
  $$sink = $1224;
 }
 $1225 = ((($vi)) + 24|0);
 HEAP32[$1225>>2] = $$sink;
 $1226 = ((($1)) + 3420|0);
 $1227 = HEAP32[$1226>>2]|0;
 $1228 = ($1227|0)==(0);
 if ($1228) {
  $$0 = 0;
  return ($$0|0);
 }
 $1229 = HEAP32[$1184>>2]|0;
 $1230 = ((($1)) + 3360|0);
 HEAP32[$1230>>2] = $1229;
 $1231 = HEAP32[$1212>>2]|0;
 $1232 = ((($1)) + 3364|0);
 HEAP32[$1232>>2] = $1231;
 $1233 = HEAP32[$1215>>2]|0;
 $1234 = ((($1)) + 3368|0);
 HEAP32[$1234>>2] = $1233;
 $1235 = ((($1)) + 3444|0);
 $1236 = HEAP32[$1235>>2]|0;
 $1237 = ((($1)) + 3372|0);
 HEAP32[$1237>>2] = $1236;
 $1238 = ((($1)) + 3448|0);
 $1239 = +HEAPF64[$1238>>3];
 $1240 = ((($1)) + 3376|0);
 HEAPF64[$1240>>3] = $1239;
 $1241 = ((($1)) + 3432|0);
 $1242 = +HEAPF64[$1241>>3];
 $1243 = ((($1)) + 3384|0);
 HEAPF64[$1243>>3] = $1242;
 $$0 = 0;
 return ($$0|0);
}
function _vorbis_encode_init_vbr($vi,$channels,$rate,$base_quality) {
 $vi = $vi|0;
 $channels = $channels|0;
 $rate = $rate|0;
 $base_quality = +$base_quality;
 var $$0 = 0, $$0$i$ph = 0, $$01$i = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($rate|0)<(1);
 if ($0) {
  $$0$i$ph = -131;
 } else {
  $1 = ((($vi)) + 28|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = $base_quality;
  $4 = $3 + 9.9999999999999995E-8;
  $5 = $4;
  $6 = !($5 >= 1.0);
  $$01$i = $6 ? $5 : 0.99989998340606689;
  $7 = ((($2)) + 3416|0);
  HEAPF32[$7>>2] = $$01$i;
  $8 = $$01$i;
  $9 = ((($2)) + 3400|0);
  $10 = (_get_setup_template($channels,$rate,$8,0,$9)|0);
  $11 = ((($2)) + 3396|0);
  HEAP32[$11>>2] = $10;
  $12 = ($10|0)==(0|0);
  if ($12) {
   $$0$i$ph = -130;
  } else {
   _vorbis_encode_setup_setting($vi,$channels,$rate);
   $13 = ((($2)) + 3420|0);
   HEAP32[$13>>2] = 0;
   $14 = ((($2)) + 3464|0);
   HEAP32[$14>>2] = 1;
   $15 = (_vorbis_encode_setup_init($vi)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0 = 0;
    return ($$0|0);
   }
   _vorbis_info_clear($vi);
   $$0 = $15;
   return ($$0|0);
  }
 }
 _vorbis_info_clear($vi);
 $$0 = $$0$i$ph;
 return ($$0|0);
}
function _vorbis_encode_tonemask_setup($vi,$s,$block,$att,$max,$in) {
 $vi = $vi|0;
 $s = +$s;
 $block = $block|0;
 $att = $att|0;
 $max = $max|0;
 $in = $in|0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $9 = 0.0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (~~(($s)));
 $1 = (+($0|0));
 $2 = $s - $1;
 $3 = ((($vi)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (((($4)) + 2852|0) + ($block<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($att) + (($0*20)|0)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (+($8|0));
 $10 = 1.0 - $2;
 $11 = $9 * $10;
 $12 = (($0) + 1)|0;
 $13 = (($att) + (($12*20)|0)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (+($14|0));
 $16 = $15 * $2;
 $17 = $16 + $11;
 $18 = $17;
 $19 = ((($6)) + 12|0);
 HEAPF32[$19>>2] = $18;
 $20 = (((($att) + (($0*20)|0)|0)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (+($21|0));
 $23 = $22 * $10;
 $24 = (((($att) + (($12*20)|0)|0)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (+($25|0));
 $27 = $26 * $2;
 $28 = $27 + $23;
 $29 = $28;
 $30 = ((($6)) + 16|0);
 HEAPF32[$30>>2] = $29;
 $31 = (((($att) + (($0*20)|0)|0)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (+($32|0));
 $34 = $33 * $10;
 $35 = (((($att) + (($12*20)|0)|0)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (+($36|0));
 $38 = $37 * $2;
 $39 = $38 + $34;
 $40 = $39;
 $41 = ((($6)) + 20|0);
 HEAPF32[$41>>2] = $40;
 $42 = (((($att) + (($0*20)|0)|0)) + 12|0);
 $43 = +HEAPF32[$42>>2];
 $44 = $43;
 $45 = $44 * $10;
 $46 = (((($att) + (($12*20)|0)|0)) + 12|0);
 $47 = +HEAPF32[$46>>2];
 $48 = $47;
 $49 = $48 * $2;
 $50 = $49 + $45;
 $51 = $50;
 $52 = ((($6)) + 24|0);
 HEAPF32[$52>>2] = $51;
 $53 = (((($att) + (($0*20)|0)|0)) + 16|0);
 $54 = +HEAPF32[$53>>2];
 $55 = $54;
 $56 = $55 * $10;
 $57 = (((($att) + (($12*20)|0)|0)) + 16|0);
 $58 = +HEAPF32[$57>>2];
 $59 = $58;
 $60 = $59 * $2;
 $61 = $60 + $56;
 $62 = $61;
 $63 = ((($6)) + 28|0);
 HEAPF32[$63>>2] = $62;
 $64 = (($max) + ($0<<2)|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (+($65|0));
 $67 = $66 * $10;
 $68 = (($max) + ($12<<2)|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (+($69|0));
 $71 = $70 * $2;
 $72 = $71 + $67;
 $73 = $72;
 $74 = ((($6)) + 496|0);
 HEAPF32[$74>>2] = $73;
 $i$01 = 0;
 while(1) {
  $75 = ((($in) + (($0*68)|0)|0) + ($i$01<<2)|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (+($76|0));
  $78 = $77 * $10;
  $79 = ((($in) + (($12*68)|0)|0) + ($i$01<<2)|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (+($80|0));
  $82 = $81 * $2;
  $83 = $82 + $78;
  $84 = $83;
  $85 = (((($6)) + 36|0) + ($i$01<<2)|0);
  HEAPF32[$85>>2] = $84;
  $86 = (($i$01) + 1)|0;
  $exitcond = ($86|0)==(17);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $86;
  }
 }
 return;
}
function _vorbis_encode_noisebias_setup($vi,$s,$block,$suppress,$in,$guard,$userbias) {
 $vi = $vi|0;
 $s = +$s;
 $block = $block|0;
 $suppress = $suppress|0;
 $in = $in|0;
 $guard = $guard|0;
 $userbias = +$userbias;
 var $$phi$trans$insert = 0, $$phi$trans$insert13 = 0, $$phi$trans$insert16 = 0, $$pre = 0.0, $$pre14 = 0.0, $$pre17 = 0.0, $0 = 0, $1 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0.0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0;
 var $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0;
 var $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $exitcond = 0, $exitcond$1 = 0, $exitcond$2 = 0, $exitcond7 = 0;
 var $exitcond7$1 = 0, $exitcond7$2 = 0, $i$04 = 0, $i$04$1 = 0, $i$04$2 = 0, $storemerge = 0.0, $storemerge$1 = 0.0, $storemerge$119 = 0.0, $storemerge$2 = 0.0, $storemerge$218 = 0.0, $storemerge20 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (~~(($s)));
 $1 = (+($0|0));
 $2 = $s - $1;
 $3 = ((($vi)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (((($4)) + 2852|0) + ($block<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($suppress) + ($0<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (+($8|0));
 $10 = 1.0 - $2;
 $11 = $9 * $10;
 $12 = (($0) + 1)|0;
 $13 = (($suppress) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (+($14|0));
 $16 = $15 * $2;
 $17 = $16 + $11;
 $18 = $17;
 $19 = ((($6)) + 108|0);
 HEAPF32[$19>>2] = $18;
 $20 = (($guard) + (($block*12)|0)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($6)) + 120|0);
 HEAP32[$22>>2] = $21;
 $23 = (((($guard) + (($block*12)|0)|0)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($6)) + 124|0);
 HEAP32[$25>>2] = $24;
 $26 = (((($guard) + (($block*12)|0)|0)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($6)) + 128|0);
 HEAP32[$28>>2] = $27;
 $i$04 = 0;
 while(1) {
  $29 = ((($in) + (($0*204)|0)|0) + ($i$04<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (+($30|0));
  $32 = $31 * $10;
  $33 = ((($in) + (($12*204)|0)|0) + ($i$04<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (+($34|0));
  $36 = $35 * $2;
  $37 = $36 + $32;
  $38 = $37;
  $39 = (((($6)) + 132|0) + ($i$04<<2)|0);
  HEAPF32[$39>>2] = $38;
  $40 = (($i$04) + 1)|0;
  $exitcond7 = ($40|0)==(17);
  if ($exitcond7) {
   $i$04$1 = 0;
   break;
  } else {
   $i$04 = $40;
  }
 }
 while(1) {
  $79 = ((((($in) + (($0*204)|0)|0)) + 68|0) + ($i$04$1<<2)|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (+($80|0));
  $82 = $81 * $10;
  $83 = ((((($in) + (($12*204)|0)|0)) + 68|0) + ($i$04$1<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (+($84|0));
  $86 = $85 * $2;
  $87 = $86 + $82;
  $88 = $87;
  $89 = (((($6)) + 200|0) + ($i$04$1<<2)|0);
  HEAPF32[$89>>2] = $88;
  $90 = (($i$04$1) + 1)|0;
  $exitcond7$1 = ($90|0)==(17);
  if ($exitcond7$1) {
   $i$04$2 = 0;
   break;
  } else {
   $i$04$1 = $90;
  }
 }
 while(1) {
  $91 = ((((($in) + (($0*204)|0)|0)) + 136|0) + ($i$04$2<<2)|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (+($92|0));
  $94 = $93 * $10;
  $95 = ((((($in) + (($12*204)|0)|0)) + 136|0) + ($i$04$2<<2)|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = (+($96|0));
  $98 = $97 * $2;
  $99 = $98 + $94;
  $100 = $99;
  $101 = (((($6)) + 268|0) + ($i$04$2<<2)|0);
  HEAPF32[$101>>2] = $100;
  $102 = (($i$04$2) + 1)|0;
  $exitcond7$2 = ($102|0)==(17);
  if ($exitcond7$2) {
   break;
  } else {
   $i$04$2 = $102;
  }
 }
 $103 = ((($6)) + 132|0);
 $104 = +HEAPF32[$103>>2];
 $47 = $104 + 6.0;
 $105 = ((($6)) + 132|0);
 $106 = $104;
 $107 = $106 + $userbias;
 $108 = $107;
 $109 = $108 < $47;
 $storemerge20 = $109 ? $47 : $108;
 HEAPF32[$105>>2] = $storemerge20;
 $41 = 1;
 while(1) {
  $$phi$trans$insert = (((($6)) + 132|0) + ($41<<2)|0);
  $$pre = +HEAPF32[$$phi$trans$insert>>2];
  $42 = (((($6)) + 132|0) + ($41<<2)|0);
  $43 = $$pre;
  $44 = $43 + $userbias;
  $45 = $44;
  $46 = $45 < $47;
  $storemerge = $46 ? $47 : $45;
  HEAPF32[$42>>2] = $storemerge;
  $48 = (($41) + 1)|0;
  $exitcond = ($48|0)==(17);
  if ($exitcond) {
   break;
  } else {
   $41 = $48;
  }
 }
 $49 = ((($6)) + 200|0);
 $50 = +HEAPF32[$49>>2];
 $51 = $50 + 6.0;
 $52 = ((($6)) + 200|0);
 $53 = $50;
 $54 = $53 + $userbias;
 $55 = $54;
 $56 = $55 < $51;
 $storemerge$119 = $56 ? $51 : $55;
 HEAPF32[$52>>2] = $storemerge$119;
 $57 = 1;
 while(1) {
  $$phi$trans$insert13 = (((($6)) + 200|0) + ($57<<2)|0);
  $$pre14 = +HEAPF32[$$phi$trans$insert13>>2];
  $58 = (((($6)) + 200|0) + ($57<<2)|0);
  $59 = $$pre14;
  $60 = $59 + $userbias;
  $61 = $60;
  $62 = $61 < $51;
  $storemerge$1 = $62 ? $51 : $61;
  HEAPF32[$58>>2] = $storemerge$1;
  $63 = (($57) + 1)|0;
  $exitcond$1 = ($63|0)==(17);
  if ($exitcond$1) {
   break;
  } else {
   $57 = $63;
  }
 }
 $64 = ((($6)) + 268|0);
 $65 = +HEAPF32[$64>>2];
 $66 = $65 + 6.0;
 $67 = ((($6)) + 268|0);
 $68 = $65;
 $69 = $68 + $userbias;
 $70 = $69;
 $71 = $70 < $66;
 $storemerge$218 = $71 ? $66 : $70;
 HEAPF32[$67>>2] = $storemerge$218;
 $72 = 1;
 while(1) {
  $$phi$trans$insert16 = (((($6)) + 268|0) + ($72<<2)|0);
  $$pre17 = +HEAPF32[$$phi$trans$insert16>>2];
  $73 = (((($6)) + 268|0) + ($72<<2)|0);
  $74 = $$pre17;
  $75 = $74 + $userbias;
  $76 = $75;
  $77 = $76 < $66;
  $storemerge$2 = $77 ? $66 : $76;
  HEAPF32[$73>>2] = $storemerge$2;
  $78 = (($72) + 1)|0;
  $exitcond$2 = ($78|0)==(17);
  if ($exitcond$2) {
   break;
  } else {
   $72 = $78;
  }
 }
 return;
}
function _get_setup_template($ch,$srate,$req,$q_or_bitrate,$base_setting) {
 $ch = $ch|0;
 $srate = $srate|0;
 $req = +$req;
 $q_or_bitrate = $q_or_bitrate|0;
 $base_setting = $base_setting|0;
 var $$0 = 0, $$01$ph22 = 0.0, $$lcssa = 0, $$lcssa3 = 0, $$lcssa4 = 0, $$phi$trans$insert = 0, $$pre = 0.0, $$pre21 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0;
 var $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0;
 var $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0;
 var $74 = 0.0, $8 = 0, $9 = 0, $i$0$be = 0, $i$0$be$us = 0, $i$08 = 0, $i$08$us = 0, $j$0$lcssa = 0, $j$05 = 0, $or$cond = 0, $or$cond$us = 0, $storemerge = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($q_or_bitrate|0)==(0);
 L1: do {
  if ($0) {
   $26 = 26336;$i$08 = 0;
   while(1) {
    $25 = HEAP32[$26>>2]|0;
    $27 = ((($25)) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($28|0)==(-1);
    $30 = ($28|0)==($ch|0);
    $or$cond = $29 | $30;
    if ($or$cond) {
     $31 = ((($25)) + 16|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)>($srate|0);
     if (!($33)) {
      $34 = ((($25)) + 20|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($35|0)<($srate|0);
      if (!($36)) {
       $37 = HEAP32[$25>>2]|0;
       $38 = ((($25)) + 8|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = +HEAPF64[$39>>3];
       $41 = $40 > $req;
       if (!($41)) {
        $44 = (($39) + ($37<<3)|0);
        $45 = +HEAPF64[$44>>3];
        $46 = $45 < $req;
        if (!($46)) {
         $$01$ph22 = $req;$$lcssa = $37;$$lcssa3 = $26;$$lcssa4 = $39;$74 = $40;
         break L1;
        }
       }
      }
     }
    }
    $i$0$be = (($i$08) + 1)|0;
    $42 = (26336 + ($i$0$be<<2)|0);
    $43 = ($i$0$be|0)==(17);
    if ($43) {
     $$0 = 0;
     break;
    } else {
     $26 = $42;$i$08 = $i$0$be;
    }
   }
   return ($$0|0);
  } else {
   $1 = (+($ch|0));
   $2 = $req / $1;
   $4 = 26336;$i$08$us = 0;
   while(1) {
    $3 = HEAP32[$4>>2]|0;
    $5 = ((($3)) + 12|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==(-1);
    $8 = ($6|0)==($ch|0);
    $or$cond$us = $7 | $8;
    if ($or$cond$us) {
     $9 = ((($3)) + 16|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = ($10|0)>($srate|0);
     if (!($11)) {
      $12 = ((($3)) + 20|0);
      $13 = HEAP32[$12>>2]|0;
      $14 = ($13|0)<($srate|0);
      if (!($14)) {
       $15 = HEAP32[$3>>2]|0;
       $16 = ((($3)) + 4|0);
       $17 = HEAP32[$16>>2]|0;
       $18 = +HEAPF64[$17>>3];
       $19 = $2 < $18;
       if (!($19)) {
        $20 = (($17) + ($15<<3)|0);
        $21 = +HEAPF64[$20>>3];
        $22 = $2 > $21;
        if (!($22)) {
         $$01$ph22 = $2;$$lcssa = $15;$$lcssa3 = $4;$$lcssa4 = $17;$74 = $18;
         break L1;
        }
       }
      }
     }
    }
    $i$0$be$us = (($i$08$us) + 1)|0;
    $23 = (26336 + ($i$0$be$us<<2)|0);
    $24 = ($i$0$be$us|0)==(17);
    if ($24) {
     $$0 = 0;
     break;
    } else {
     $4 = $23;$i$08$us = $i$0$be$us;
    }
   }
   return ($$0|0);
  }
 } while(0);
 $47 = ($$lcssa|0)>(0);
 L22: do {
  if ($47) {
   $49 = $74;$j$05 = 0;
   while(1) {
    $48 = !($$01$ph22 >= $49);
    $$pre21 = (($j$05) + 1)|0;
    if (!($48)) {
     $50 = (($$lcssa4) + ($$pre21<<3)|0);
     $51 = +HEAPF64[$50>>3];
     $52 = $$01$ph22 < $51;
     if ($52) {
      $j$0$lcssa = $j$05;
      break L22;
     }
    }
    $53 = ($$pre21|0)<($$lcssa|0);
    if (!($53)) {
     $j$0$lcssa = $$pre21;
     break L22;
    }
    $$phi$trans$insert = (($$lcssa4) + ($$pre21<<3)|0);
    $$pre = +HEAPF64[$$phi$trans$insert>>3];
    $49 = $$pre;$j$05 = $$pre21;
   }
  } else {
   $j$0$lcssa = 0;
  }
 } while(0);
 $54 = ($j$0$lcssa|0)==($$lcssa|0);
 if ($54) {
  $55 = (+($$lcssa|0));
  $56 = $55 + -0.001;
  $storemerge = $56;
 } else {
  $57 = (($$lcssa4) + ($j$0$lcssa<<3)|0);
  $58 = +HEAPF64[$57>>3];
  $59 = $58;
  $60 = (($j$0$lcssa) + 1)|0;
  $61 = (($$lcssa4) + ($60<<3)|0);
  $62 = +HEAPF64[$61>>3];
  $63 = $62;
  $64 = $59;
  $65 = $$01$ph22 - $64;
  $66 = $63 - $59;
  $67 = $66;
  $68 = $65 / $67;
  $69 = $68;
  $70 = (+($j$0$lcssa|0));
  $71 = $69 + $70;
  $72 = $71;
  $storemerge = $72;
 }
 HEAPF64[$base_setting>>3] = $storemerge;
 $73 = HEAP32[$$lcssa3>>2]|0;
 $$0 = $73;
 return ($$0|0);
}
function _vorbis_encode_setup_setting($vi,$channels,$rate) {
 $vi = $vi|0;
 $channels = $channels|0;
 $rate = $rate|0;
 var $$pre = 0.0, $$pre$phi3Z2D = 0, $$pre$phiZ2D = 0.0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0;
 var $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vi)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 3396|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$vi>>2] = 0;
 $4 = ((($vi)) + 4|0);
 HEAP32[$4>>2] = $channels;
 $5 = ((($vi)) + 8|0);
 HEAP32[$5>>2] = $rate;
 $6 = ((($1)) + 3456|0);
 HEAP32[$6>>2] = 1;
 $7 = ((($1)) + 3460|0);
 HEAP32[$7>>2] = 1;
 $8 = ((($1)) + 3400|0);
 $9 = +HEAPF64[$8>>3];
 $10 = (~~(($9)));
 $11 = (+($10|0));
 $12 = $9 - $11;
 $13 = ((($1)) + 3472|0);
 HEAPF64[$13>>3] = $9;
 $14 = ((($1)) + 3488|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  $17 = ((($3)) + 120|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($10<<3)|0);
  $20 = +HEAPF64[$19>>3];
  $21 = 1.0 - $12;
  $22 = $20 * $21;
  $23 = (($10) + 1)|0;
  $24 = (($18) + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $25 * $12;
  $27 = $26 + $22;
  $28 = ((($1)) + 3480|0);
  HEAPF64[$28>>3] = $27;
  $$pre$phi3Z2D = $23;$$pre$phiZ2D = $21;
 } else {
  $$pre = 1.0 - $12;
  $$pre2 = (($10) + 1)|0;
  $$pre$phi3Z2D = $$pre2;$$pre$phiZ2D = $$pre;
 }
 $29 = ((($3)) + 112|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + ($10<<2)|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (+($32|0));
 $34 = $33 * $$pre$phiZ2D;
 $35 = (($30) + ($$pre$phi3Z2D<<2)|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (+($36|0));
 $38 = $37 * $12;
 $39 = $38 + $34;
 $40 = ((($1)) + 3496|0);
 HEAPF64[$40>>3] = $39;
 $41 = ((($3)) + 116|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + ($10<<2)|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (+($44|0));
 $46 = $45 * $$pre$phiZ2D;
 $47 = (($42) + ($$pre$phi3Z2D<<2)|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (+($48|0));
 $50 = $49 * $12;
 $51 = $50 + $46;
 $52 = ((($1)) + 3504|0);
 HEAPF64[$52>>3] = $51;
 $53 = ((($1)) + 3512|0);
 HEAPF64[$53>>3] = -6.0;
 $54 = ((($1)) + 3520|0);
 HEAPF64[$54>>3] = $9;
 $55 = ((($1)) + 3528|0);
 HEAPF64[$55>>3] = $9;
 $56 = ((($1)) + 3536|0);
 HEAPF64[$56>>3] = $9;
 $57 = ((($1)) + 3544|0);
 HEAPF64[$57>>3] = $9;
 $58 = ((($1)) + 3552|0);
 HEAPF64[$58>>3] = $9;
 $59 = ((($1)) + 3560|0);
 HEAPF64[$59>>3] = $9;
 $60 = ((($1)) + 3568|0);
 HEAPF64[$60>>3] = $9;
 $61 = ((($1)) + 3576|0);
 HEAPF64[$61>>3] = $9;
 $62 = ((($1)) + 3584|0);
 HEAPF64[$62>>3] = $9;
 $63 = ((($1)) + 3592|0);
 HEAPF64[$63>>3] = $9;
 $64 = ((($1)) + 3600|0);
 HEAPF64[$64>>3] = $9;
 $65 = ((($1)) + 3608|0);
 HEAPF64[$65>>3] = $9;
 $66 = ((($1)) + 3616|0);
 HEAPF64[$66>>3] = $9;
 $67 = ((($1)) + 3624|0);
 HEAPF64[$67>>3] = $9;
 $68 = ((($1)) + 3632|0);
 HEAPF64[$68>>3] = $9;
 $69 = ((($1)) + 3640|0);
 HEAPF64[$69>>3] = $9;
 $70 = ((($1)) + 3648|0);
 HEAPF64[$70>>3] = $9;
 return;
}
function __vorbis_apply_window($d,$winno,$blocksizes,$lW,$W,$nW) {
 $d = $d|0;
 $winno = $winno|0;
 $blocksizes = $blocksizes|0;
 $lW = $lW|0;
 $W = $W|0;
 $nW = $nW|0;
 var $$neg = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$0$lcssa = 0, $i$18 = 0, $i$2$lcssa = 0, $i$25 = 0;
 var $p$09 = 0, $p$16 = 0, $p$16$in = 0, $scevgep = 0, $smax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($W|0)!=(0);
 $1 = $0 ? $lW : 0;
 $2 = $0 ? $nW : 0;
 $3 = (($winno) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (520336 + ($4<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($winno) + ($2<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (520336 + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($blocksizes) + ($W<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($blocksizes) + ($1<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($blocksizes) + ($2<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($12|0) / 4)&-1;
 $18 = (($14|0) / 4)&-1;
 $19 = (($17) - ($18))|0;
 $20 = (($14|0) / 2)&-1;
 $21 = (($19) + ($20))|0;
 $22 = (($12|0) / 2)&-1;
 $23 = (($22) + ($17))|0;
 $$neg = (($16|0) / -4)&-1;
 $24 = (($23) + ($$neg))|0;
 $25 = (($16|0) / 2)&-1;
 $26 = (($24) + ($25))|0;
 $27 = ($19|0)>(0);
 if ($27) {
  $28 = (($17) - ($18))|0;
  $29 = $28 << 2;
  _memset(($d|0),0,($29|0))|0;
  $i$0$lcssa = $19;
 } else {
  $i$0$lcssa = 0;
 }
 $30 = ($i$0$lcssa|0)<($21|0);
 if ($30) {
  $31 = (($17) + ($20))|0;
  $32 = (($31) - ($i$0$lcssa))|0;
  $33 = (($32) - ($18))|0;
  $i$18 = $i$0$lcssa;$p$09 = 0;
  while(1) {
   $37 = (($6) + ($p$09<<2)|0);
   $38 = +HEAPF32[$37>>2];
   $39 = (($d) + ($i$18<<2)|0);
   $40 = +HEAPF32[$39>>2];
   $41 = $40 * $38;
   HEAPF32[$39>>2] = $41;
   $42 = (($i$18) + 1)|0;
   $43 = (($p$09) + 1)|0;
   $exitcond = ($43|0)==($33|0);
   if ($exitcond) {
    break;
   } else {
    $i$18 = $42;$p$09 = $43;
   }
  }
 }
 $34 = ($16|0)>(1);
 if ($34) {
  $35 = (($24) + 1)|0;
  $36 = ($26|0)>($35|0);
  $i$25 = $24;$p$16$in = $25;
  while(1) {
   $p$16 = (($p$16$in) + -1)|0;
   $47 = (($10) + ($p$16<<2)|0);
   $48 = +HEAPF32[$47>>2];
   $49 = (($d) + ($i$25<<2)|0);
   $50 = +HEAPF32[$49>>2];
   $51 = $50 * $48;
   HEAPF32[$49>>2] = $51;
   $52 = (($i$25) + 1)|0;
   $53 = ($52|0)<($26|0);
   if ($53) {
    $i$25 = $52;$p$16$in = $p$16;
   } else {
    break;
   }
  }
  $smax = $36 ? $26 : $35;
  $i$2$lcssa = $smax;
 } else {
  $i$2$lcssa = $24;
 }
 $44 = ($12|0)>($i$2$lcssa|0);
 if (!($44)) {
  return;
 }
 $scevgep = (($d) + ($i$2$lcssa<<2)|0);
 $45 = (($12) - ($i$2$lcssa))|0;
 $46 = $45 << 2;
 _memset(($scevgep|0),0,($46|0))|0;
 return;
}
function _encoder_init($num_ch,$sample_rate,$quality) {
 $num_ch = $num_ch|0;
 $sample_rate = +$sample_rate;
 $quality = +$quality;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h_code = 0, $h_comm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $h_comm = sp + 32|0;
 $h_code = sp;
 $0 = (_malloc(688)|0);
 $1 = ((($0)) + 408|0);
 _vorbis_info_init($1);
 $2 = (~~(($sample_rate)));
 (_vorbis_encode_init_vbr($1,$num_ch,$2,$quality)|0);
 $3 = ((($0)) + 440|0);
 _vorbis_comment_init($3);
 _vorbis_comment_add_tag($3,553008,553016);
 $4 = ((($0)) + 456|0);
 (_vorbis_analysis_init($4,$1)|0);
 $5 = ((($0)) + 568|0);
 (_vorbis_block_init($4,$5)|0);
 $6 = (_time((0|0))|0);
 _srand($6);
 $7 = (_rand()|0);
 (_ogg_stream_init($0,$7)|0);
 $8 = ((($0)) + 680|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 684|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 360|0);
 (_vorbis_analysis_headerout($4,$3,$10,$h_comm,$h_code)|0);
 (_ogg_stream_packetin($0,$10)|0);
 (_ogg_stream_packetin($0,$h_comm)|0);
 (_ogg_stream_packetin($0,$h_code)|0);
 $11 = ((($0)) + 392|0);
 $12 = (_ogg_stream_flush($0,$11)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  STACKTOP = sp;return ($0|0);
 }
 $14 = ((($0)) + 396|0);
 $15 = ((($0)) + 404|0);
 $16 = ((($0)) + 400|0);
 while(1) {
  $17 = HEAP32[$9>>2]|0;
  $18 = HEAP32[$14>>2]|0;
  $19 = (($18) + ($17))|0;
  $20 = HEAP32[$15>>2]|0;
  $21 = (($19) + ($20))|0;
  $22 = ($21|0)==(0);
  if (!($22)) {
   $25 = HEAP32[$8>>2]|0;
   $26 = (_realloc($25,$21)|0);
   HEAP32[$8>>2] = $26;
   $27 = HEAP32[$9>>2]|0;
   $28 = (($26) + ($27)|0);
   $29 = HEAP32[$11>>2]|0;
   $30 = HEAP32[$14>>2]|0;
   _memcpy(($28|0),($29|0),($30|0))|0;
   $31 = (($30) + ($27))|0;
   HEAP32[$9>>2] = $31;
   $32 = (($26) + ($31)|0);
   $33 = HEAP32[$16>>2]|0;
   $34 = HEAP32[$15>>2]|0;
   _memcpy(($32|0),($33|0),($34|0))|0;
   $35 = (($34) + ($31))|0;
   HEAP32[$9>>2] = $35;
  }
  $23 = (_ogg_stream_flush($0,$11)|0);
  $24 = ($23|0)==(0);
  if ($24) {
   break;
  }
 }
 STACKTOP = sp;return ($0|0);
}
function _encoder_clear($enc) {
 $enc = $enc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_ogg_stream_clear($enc)|0);
 $0 = ((($enc)) + 568|0);
 (_vorbis_block_clear($0)|0);
 $1 = ((($enc)) + 456|0);
 _vorbis_dsp_clear($1);
 $2 = ((($enc)) + 440|0);
 _vorbis_comment_clear($2);
 $3 = ((($enc)) + 408|0);
 _vorbis_info_clear($3);
 $4 = ((($enc)) + 680|0);
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 _free($enc);
 return;
}
function _encoder_analysis_buffer($enc,$length) {
 $enc = $enc|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($enc)) + 456|0);
 $1 = (_vorbis_analysis_buffer($0,$length)|0);
 return ($1|0);
}
function _encoder_process($enc,$length) {
 $enc = $enc|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($enc)) + 456|0);
 (_vorbis_analysis_wrote($0,$length)|0);
 $1 = ((($enc)) + 568|0);
 $2 = (_vorbis_analysis_blockout($0,$1)|0);
 $3 = ($2|0)==(1);
 if (!($3)) {
  return;
 }
 $4 = ((($enc)) + 360|0);
 $5 = ((($enc)) + 392|0);
 $6 = ((($enc)) + 684|0);
 $7 = ((($enc)) + 396|0);
 $8 = ((($enc)) + 404|0);
 $9 = ((($enc)) + 680|0);
 $10 = ((($enc)) + 392|0);
 $11 = ((($enc)) + 400|0);
 while(1) {
  (_vorbis_analysis($1,0)|0);
  (_vorbis_bitrate_addblock($1)|0);
  $14 = (_vorbis_bitrate_flushpacket($0,$4)|0);
  $15 = ($14|0)==(0);
  if (!($15)) {
   while(1) {
    (_ogg_stream_packetin($enc,$4)|0);
    $18 = (_ogg_stream_pageout($enc,$5)|0);
    $19 = ($18|0)==(0);
    if (!($19)) {
     while(1) {
      $20 = HEAP32[$6>>2]|0;
      $21 = HEAP32[$7>>2]|0;
      $22 = (($21) + ($20))|0;
      $23 = HEAP32[$8>>2]|0;
      $24 = (($22) + ($23))|0;
      $25 = ($24|0)==(0);
      if (!($25)) {
       $28 = HEAP32[$9>>2]|0;
       $29 = (_realloc($28,$24)|0);
       HEAP32[$9>>2] = $29;
       $30 = HEAP32[$6>>2]|0;
       $31 = (($29) + ($30)|0);
       $32 = HEAP32[$10>>2]|0;
       $33 = HEAP32[$7>>2]|0;
       _memcpy(($31|0),($32|0),($33|0))|0;
       $34 = (($33) + ($30))|0;
       HEAP32[$6>>2] = $34;
       $35 = (($29) + ($34)|0);
       $36 = HEAP32[$11>>2]|0;
       $37 = HEAP32[$8>>2]|0;
       _memcpy(($35|0),($36|0),($37|0))|0;
       $38 = (($37) + ($34))|0;
       HEAP32[$6>>2] = $38;
      }
      $26 = (_ogg_stream_pageout($enc,$5)|0);
      $27 = ($26|0)==(0);
      if ($27) {
       break;
      }
     }
    }
    $16 = (_vorbis_bitrate_flushpacket($0,$4)|0);
    $17 = ($16|0)==(0);
    if ($17) {
     break;
    }
   }
  }
  $12 = (_vorbis_analysis_blockout($0,$1)|0);
  $13 = ($12|0)==(1);
  if (!($13)) {
   break;
  }
 }
 return;
}
function _encoder_data_len($enc) {
 $enc = $enc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($enc)) + 684|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _encoder_transfer_data($enc) {
 $enc = $enc|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($enc)) + 684|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($enc)) + 680|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _ldexp($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _qsort($base,$nel,$width,$cmp) {
 $base = $base|0;
 $nel = $nel|0;
 $width = $width|0;
 $cmp = $cmp|0;
 var $$ = 0, $$0$be$i = 0, $$0$be$i19 = 0, $$0$i44 = 0, $$01$be$i = 0, $$01$be$i18 = 0, $$012$i = 0, $$012$i15 = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$us$i = 0, $$02$us$i30 = 0, $$03$i = 0, $$03$i14 = 0, $$66 = 0, $$67 = 0, $$lcssa = 0, $$lcssa102 = 0, $$lcssa70 = 0, $$lcssa71 = 0;
 var $$pre = 0, $$pre$i = 0, $$pre$i21 = 0, $$pre6$i = 0, $$pre6$i26 = 0, $$sum = 0, $$sum$i = 0, $$sum$i17 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $4$phi = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ar$i = 0;
 var $exitcond$i = 0, $exitcond$i29 = 0, $head$0$lcssa = 0, $head$076 = 0, $head$174 = 0, $i$0 = 0, $i$0$lcssa$i = 0, $i$0$lcssa$i23 = 0, $i$01$us$i = 0, $i$01$us$i28 = 0, $i$04$i = 0, $i$04$i13 = 0, $lp = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $or$cond68 = 0, $or$cond6873 = 0, $or$cond72 = 0;
 var $pshift$0$lcssa = 0, $pshift$077 = 0, $pshift$1 = 0, $pshift$275 = 0, $sum = 0, $sum$i = 0, $sum$i16 = 0, $tmp$i25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 688|0;
 $tmp$i25 = sp + 424|0;
 $ar$i = sp + 192|0;
 $lp = sp;
 $0 = Math_imul($width, $nel)|0;
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $$sum = (($0) - ($width))|0;
 $2 = ((($lp)) + 4|0);
 HEAP32[$2>>2] = $width;
 HEAP32[$lp>>2] = $width;
 $4 = $width;$6 = $width;$i$0 = 2;
 while(1) {
  $3 = (($4) + ($width))|0;
  $5 = (($3) + ($6))|0;
  $7 = (($lp) + ($i$0<<2)|0);
  HEAP32[$7>>2] = $5;
  $8 = ($5>>>0)<($0>>>0);
  $9 = (($i$0) + 1)|0;
  if ($8) {
   $4$phi = $6;$6 = $5;$i$0 = $9;$4 = $4$phi;
  } else {
   break;
  }
 }
 $10 = (0 - ($width))|0;
 $11 = (($base) + ($$sum)|0);
 $12 = ($$sum|0)>(0);
 if ($12) {
  $13 = ($width|0)==(0);
  $14 = $11;
  $16 = 1;$51 = 0;$head$076 = $base;$pshift$077 = 1;
  while(1) {
   $15 = $16 & 3;
   $17 = ($15|0)==(3);
   do {
    if ($17) {
     HEAP32[$ar$i>>2] = $head$076;
     $18 = ($pshift$077|0)>(1);
     L13: do {
      if ($18) {
       $$012$i = $pshift$077;$$03$i = $head$076;$24 = $head$076;$i$04$i = 1;
       while(1) {
        $19 = (($$03$i) + ($10)|0);
        $20 = (($$012$i) + -2)|0;
        $21 = (($lp) + ($20<<2)|0);
        $22 = HEAP32[$21>>2]|0;
        $sum$i = (($22) + ($width))|0;
        $$sum$i = (0 - ($sum$i))|0;
        $23 = (($$03$i) + ($$sum$i)|0);
        $25 = (FUNCTION_TABLE_iii[$cmp & 15]($24,$23)|0);
        $26 = ($25|0)>(-1);
        if ($26) {
         $27 = (FUNCTION_TABLE_iii[$cmp & 15]($24,$19)|0);
         $28 = ($27|0)>(-1);
         if ($28) {
          $i$0$lcssa$i = $i$04$i;
          break;
         }
        }
        $29 = (FUNCTION_TABLE_iii[$cmp & 15]($23,$19)|0);
        $30 = ($29|0)>(-1);
        $31 = (($i$04$i) + 1)|0;
        $32 = (($ar$i) + ($i$04$i<<2)|0);
        if ($30) {
         HEAP32[$32>>2] = $23;
         $33 = (($$012$i) + -1)|0;
         $$0$be$i = $23;$$01$be$i = $33;
        } else {
         HEAP32[$32>>2] = $19;
         $$0$be$i = $19;$$01$be$i = $20;
        }
        $34 = ($$01$be$i|0)>(1);
        if (!($34)) {
         $i$0$lcssa$i = $31;
         break;
        }
        $$pre$i = HEAP32[$ar$i>>2]|0;
        $$012$i = $$01$be$i;$$03$i = $$0$be$i;$24 = $$pre$i;$i$04$i = $31;
       }
       $35 = ($i$0$lcssa$i|0)<(2);
       if (!($35)) {
        $36 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
        HEAP32[$36>>2] = $tmp$i25;
        if (!($13)) {
         $$02$us$i = $width;$48 = $tmp$i25;
         while(1) {
          $46 = ($$02$us$i>>>0)>(256);
          $38 = $46 ? 256 : $$02$us$i;
          $47 = HEAP32[$ar$i>>2]|0;
          _memcpy(($48|0),($47|0),($38|0))|0;
          $44 = $47;$i$01$us$i = 0;
          while(1) {
           $40 = (($ar$i) + ($i$01$us$i<<2)|0);
           $41 = (($i$01$us$i) + 1)|0;
           $42 = (($ar$i) + ($41<<2)|0);
           $43 = HEAP32[$42>>2]|0;
           _memcpy(($44|0),($43|0),($38|0))|0;
           $45 = (($44) + ($38)|0);
           HEAP32[$40>>2] = $45;
           $exitcond$i = ($41|0)==($i$0$lcssa$i|0);
           if ($exitcond$i) {
            break;
           } else {
            $44 = $43;$i$01$us$i = $41;
           }
          }
          $37 = ($$02$us$i|0)==($38|0);
          if ($37) {
           break L13;
          }
          $39 = (($$02$us$i) - ($38))|0;
          $$pre6$i = HEAP32[$36>>2]|0;
          $$02$us$i = $39;$48 = $$pre6$i;
         }
        }
       }
      } else {
      }
     } while(0);
     $49 = $16 >>> 2;
     $50 = $51 << 30;
     $52 = $49 | $50;
     $53 = $51 >>> 2;
     $54 = (($pshift$077) + 2)|0;
     $105 = $52;$168 = $53;$pshift$1 = $54;
    } else {
     $55 = (($pshift$077) + -1)|0;
     $56 = (($lp) + ($55<<2)|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = $head$076;
     $59 = (($14) - ($58))|0;
     $60 = ($57>>>0)<($59>>>0);
     if ($60) {
      HEAP32[$ar$i>>2] = $head$076;
      $61 = ($pshift$077|0)>(1);
      L38: do {
       if ($61) {
        $$012$i15 = $pshift$077;$$03$i14 = $head$076;$67 = $head$076;$i$04$i13 = 1;
        while(1) {
         $62 = (($$03$i14) + ($10)|0);
         $63 = (($$012$i15) + -2)|0;
         $64 = (($lp) + ($63<<2)|0);
         $65 = HEAP32[$64>>2]|0;
         $sum$i16 = (($65) + ($width))|0;
         $$sum$i17 = (0 - ($sum$i16))|0;
         $66 = (($$03$i14) + ($$sum$i17)|0);
         $68 = (FUNCTION_TABLE_iii[$cmp & 15]($67,$66)|0);
         $69 = ($68|0)>(-1);
         if ($69) {
          $70 = (FUNCTION_TABLE_iii[$cmp & 15]($67,$62)|0);
          $71 = ($70|0)>(-1);
          if ($71) {
           $i$0$lcssa$i23 = $i$04$i13;
           break;
          }
         }
         $72 = (FUNCTION_TABLE_iii[$cmp & 15]($66,$62)|0);
         $73 = ($72|0)>(-1);
         $74 = (($i$04$i13) + 1)|0;
         $75 = (($ar$i) + ($i$04$i13<<2)|0);
         if ($73) {
          HEAP32[$75>>2] = $66;
          $76 = (($$012$i15) + -1)|0;
          $$0$be$i19 = $66;$$01$be$i18 = $76;
         } else {
          HEAP32[$75>>2] = $62;
          $$0$be$i19 = $62;$$01$be$i18 = $63;
         }
         $77 = ($$01$be$i18|0)>(1);
         if (!($77)) {
          $i$0$lcssa$i23 = $74;
          break;
         }
         $$pre$i21 = HEAP32[$ar$i>>2]|0;
         $$012$i15 = $$01$be$i18;$$03$i14 = $$0$be$i19;$67 = $$pre$i21;$i$04$i13 = $74;
        }
        $78 = ($i$0$lcssa$i23|0)<(2);
        if (!($78)) {
         $79 = (($ar$i) + ($i$0$lcssa$i23<<2)|0);
         HEAP32[$79>>2] = $tmp$i25;
         if (!($13)) {
          $$02$us$i30 = $width;$91 = $tmp$i25;
          while(1) {
           $89 = ($$02$us$i30>>>0)>(256);
           $81 = $89 ? 256 : $$02$us$i30;
           $90 = HEAP32[$ar$i>>2]|0;
           _memcpy(($91|0),($90|0),($81|0))|0;
           $87 = $90;$i$01$us$i28 = 0;
           while(1) {
            $83 = (($ar$i) + ($i$01$us$i28<<2)|0);
            $84 = (($i$01$us$i28) + 1)|0;
            $85 = (($ar$i) + ($84<<2)|0);
            $86 = HEAP32[$85>>2]|0;
            _memcpy(($87|0),($86|0),($81|0))|0;
            $88 = (($87) + ($81)|0);
            HEAP32[$83>>2] = $88;
            $exitcond$i29 = ($84|0)==($i$0$lcssa$i23|0);
            if ($exitcond$i29) {
             break;
            } else {
             $87 = $86;$i$01$us$i28 = $84;
            }
           }
           $80 = ($$02$us$i30|0)==($81|0);
           if ($80) {
            break L38;
           }
           $82 = (($$02$us$i30) - ($81))|0;
           $$pre6$i26 = HEAP32[$79>>2]|0;
           $$02$us$i30 = $82;$91 = $$pre6$i26;
          }
         }
        }
       } else {
       }
      } while(0);
     } else {
      _trinkle($head$076,$width,$cmp,$16,$51,$pshift$077,0,$lp);
     }
     $92 = ($pshift$077|0)==(1);
     if ($92) {
      $93 = $51 << 1;
      $94 = $16 >>> 31;
      $95 = $94 | $93;
      $96 = $16 << 1;
      $105 = $96;$168 = $95;$pshift$1 = 0;
      break;
     } else {
      $97 = ($55>>>0)>(31);
      $98 = (($pshift$077) + -33)|0;
      $$ = $97 ? 0 : $16;
      $$66 = $97 ? $16 : $51;
      $$67 = $97 ? $98 : $55;
      $99 = $$66 << $$67;
      $100 = (32 - ($$67))|0;
      $101 = $$ >>> $100;
      $102 = $101 | $99;
      $103 = $$ << $$67;
      $105 = $103;$168 = $102;$pshift$1 = 1;
      break;
     }
    }
   } while(0);
   $104 = $105 | 1;
   $106 = (($head$076) + ($width)|0);
   $107 = ($106>>>0)<($11>>>0);
   if ($107) {
    $16 = $104;$51 = $168;$head$076 = $106;$pshift$077 = $pshift$1;
   } else {
    $$lcssa70 = $168;$$lcssa71 = $104;$head$0$lcssa = $106;$pshift$0$lcssa = $pshift$1;
    break;
   }
  }
 } else {
  $$lcssa70 = 0;$$lcssa71 = 1;$head$0$lcssa = $base;$pshift$0$lcssa = 1;
 }
 _trinkle($head$0$lcssa,$width,$cmp,$$lcssa71,$$lcssa70,$pshift$0$lcssa,0,$lp);
 $108 = ($pshift$0$lcssa|0)==(1);
 $109 = ($$lcssa71|0)==(1);
 $or$cond72 = $109 & $108;
 $110 = ($$lcssa70|0)==(0);
 $or$cond6873 = $110 & $or$cond72;
 if ($or$cond6873) {
  STACKTOP = sp;return;
 } else {
  $113 = $$lcssa71;$122 = $$lcssa70;$head$174 = $head$0$lcssa;$pshift$275 = $pshift$0$lcssa;
 }
 while(1) {
  $111 = ($pshift$275|0)<(2);
  if (!($111)) {
   $136 = $122 << 2;
   $137 = $113 >>> 30;
   $138 = $137 | $136;
   $139 = (($pshift$275) + -2)|0;
   $140 = $113 << 1;
   $141 = $140 & 2147483646;
   $142 = $137 << 31;
   $143 = $141 | $142;
   $144 = $143 ^ 3;
   $145 = $138 >>> 1;
   $146 = (($lp) + ($139<<2)|0);
   $147 = HEAP32[$146>>2]|0;
   $sum = (($147) + ($width))|0;
   $$sum2 = (0 - ($sum))|0;
   $148 = (($head$174) + ($$sum2)|0);
   $149 = (($pshift$275) + -1)|0;
   _trinkle($148,$width,$cmp,$144,$145,$149,1,$lp);
   $150 = $145 << 1;
   $151 = $137 & 1;
   $152 = $150 | $151;
   $153 = $144 << 1;
   $154 = $153 | 1;
   $155 = (($head$174) + ($10)|0);
   _trinkle($155,$width,$cmp,$154,$152,$139,1,$lp);
   $113 = $154;$122 = $152;$head$174 = $155;$pshift$275 = $139;
   continue;
  }
  $112 = (($113) + -1)|0;
  $114 = ($112|0)==(0);
  do {
   if ($114) {
    $135 = 32;
    label = 56;
   } else {
    $115 = $112 & 1;
    $116 = ($115|0)==(0);
    if ($116) {
     $$02$i$i = $112;$nTrailingZeros$03$i$i = 0;
     while(1) {
      $117 = (($nTrailingZeros$03$i$i) + 1)|0;
      $118 = $$02$i$i >>> 1;
      $119 = $118 & 1;
      $120 = ($119|0)==(0);
      if ($120) {
       $$02$i$i = $118;$nTrailingZeros$03$i$i = $117;
      } else {
       $$lcssa = $117;
       break;
      }
     }
     $121 = ($$lcssa|0)==(0);
     if ($121) {
      label = 51;
     } else {
      $132 = $$lcssa;
     }
    } else {
     label = 51;
    }
    if ((label|0) == 51) {
     label = 0;
     $123 = ($122|0)==(0);
     if ($123) {
      $135 = 64;
      label = 56;
      break;
     }
     $124 = $122 & 1;
     $125 = ($124|0)==(0);
     if ($125) {
      $$02$i3$i = $122;$nTrailingZeros$03$i2$i = 0;
     } else {
      $$0$i44 = 0;$157 = $113;$160 = $122;$164 = 0;
      break;
     }
     while(1) {
      $126 = (($nTrailingZeros$03$i2$i) + 1)|0;
      $127 = $$02$i3$i >>> 1;
      $128 = $127 & 1;
      $129 = ($128|0)==(0);
      if ($129) {
       $$02$i3$i = $127;$nTrailingZeros$03$i2$i = $126;
      } else {
       $$lcssa102 = $126;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
       break;
      }
     }
     $130 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
     $131 = ($$lcssa102|0)==(0);
     if ($131) {
      $$0$i44 = 0;$157 = $113;$160 = $122;$164 = 0;
      break;
     } else {
      $132 = $130;
     }
    }
    $133 = ($132>>>0)>(31);
    if ($133) {
     $135 = $132;
     label = 56;
    } else {
     $$0$i44 = $132;$157 = $113;$160 = $122;$164 = $132;
    }
   }
  } while(0);
  if ((label|0) == 56) {
   label = 0;
   $134 = (($135) + -32)|0;
   $$0$i44 = $134;$157 = $122;$160 = 0;$164 = $135;
  }
  $156 = $157 >>> $$0$i44;
  $158 = (32 - ($$0$i44))|0;
  $159 = $160 << $158;
  $161 = $159 | $156;
  $162 = $160 >>> $$0$i44;
  $163 = (($164) + ($pshift$275))|0;
  $$pre = (($head$174) + ($10)|0);
  $165 = ($163|0)==(1);
  $166 = ($161|0)==(1);
  $or$cond = $166 & $165;
  $167 = ($162|0)==(0);
  $or$cond68 = $167 & $or$cond;
  if ($or$cond68) {
   break;
  } else {
   $113 = $161;$122 = $162;$head$174 = $$pre;$pshift$275 = $163;
  }
 }
 STACKTOP = sp;return;
}
function _trinkle($head,$width,$cmp,$pp$val,$pp$1$val,$pshift,$trusty,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pp$val = $pp$val|0;
 $pp$1$val = $pp$1$val|0;
 $pshift = $pshift|0;
 $trusty = $trusty|0;
 $lp = $lp|0;
 var $$0$be$i = 0, $$0$i = 0, $$0$lcssa = 0, $$0$lcssa49 = 0, $$01$be$i = 0, $$01162 = 0, $$01162$phi = 0, $$012$i = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$lcssa = 0, $$02$lcssa51 = 0, $$02$us$i = 0, $$02$us$i10 = 0, $$02964 = 0, $$03$i = 0, $$03$lcssa = 0, $$03865 = 0, $$lcssa = 0, $$lcssa76 = 0;
 var $$pre = 0, $$pre$i = 0, $$pre6$i = 0, $$pre6$i6 = 0, $$sum = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $ar = 0, $ar$i = 0, $exitcond$i = 0, $exitcond$i9 = 0, $i$0$lcssa = 0, $i$0$lcssa$i = 0, $i$0$lcssa50 = 0, $i$01$us$i = 0, $i$01$us$i8 = 0, $i$01063 = 0, $i$04$i = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $pp$val1666 = 0, $sum = 0, $sum$i = 0, $tmp$i5 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720|0;
 $tmp$i5 = sp + 456|0;
 $ar$i = sp + 228|0;
 $ar = sp;
 HEAP32[$ar>>2] = $head;
 $0 = (0 - ($width))|0;
 $1 = ($pp$val|0)!=(1);
 $2 = ($pp$1$val|0)!=(0);
 $3 = $2 | $1;
 L1: do {
  if ($3) {
   $4 = (($lp) + ($pshift<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (0 - ($5))|0;
   $7 = (($head) + ($6)|0);
   $8 = (FUNCTION_TABLE_iii[$cmp & 15]($7,$head)|0);
   $9 = ($8|0)<(1);
   if ($9) {
    $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
    label = 18;
   } else {
    $$01162 = $head;$$02964 = $pshift;$$03865 = $trusty;$16 = $7;$33 = $pp$1$val;$i$01063 = 1;$pp$val1666 = $pp$val;
    while(1) {
     $10 = ($$03865|0)==(0);
     $11 = ($$02964|0)>(1);
     $or$cond = $10 & $11;
     if ($or$cond) {
      $12 = (($$01162) + ($0)|0);
      $13 = (($$02964) + -2)|0;
      $14 = (($lp) + ($13<<2)|0);
      $15 = HEAP32[$14>>2]|0;
      $17 = (FUNCTION_TABLE_iii[$cmp & 15]($12,$16)|0);
      $18 = ($17|0)>(-1);
      if ($18) {
       $$0$lcssa49 = $$01162;$$02$lcssa51 = $$02964;$i$0$lcssa50 = $i$01063;
       break L1;
      }
      $sum = (($15) + ($width))|0;
      $$sum = (0 - ($sum))|0;
      $19 = (($$01162) + ($$sum)|0);
      $20 = (FUNCTION_TABLE_iii[$cmp & 15]($19,$16)|0);
      $21 = ($20|0)>(-1);
      if ($21) {
       $$0$lcssa49 = $$01162;$$02$lcssa51 = $$02964;$i$0$lcssa50 = $i$01063;
       break L1;
      }
     }
     $22 = (($i$01063) + 1)|0;
     $23 = (($ar) + ($i$01063<<2)|0);
     HEAP32[$23>>2] = $16;
     $24 = (($pp$val1666) + -1)|0;
     $25 = ($24|0)==(0);
     do {
      if ($25) {
       $46 = 32;
       label = 15;
      } else {
       $26 = $24 & 1;
       $27 = ($26|0)==(0);
       if ($27) {
        $$02$i$i = $24;$nTrailingZeros$03$i$i = 0;
        while(1) {
         $28 = (($nTrailingZeros$03$i$i) + 1)|0;
         $29 = $$02$i$i >>> 1;
         $30 = $29 & 1;
         $31 = ($30|0)==(0);
         if ($31) {
          $$02$i$i = $29;$nTrailingZeros$03$i$i = $28;
         } else {
          $$lcssa = $28;
          break;
         }
        }
        $32 = ($$lcssa|0)==(0);
        if ($32) {
         label = 10;
        } else {
         $43 = $$lcssa;
        }
       } else {
        label = 10;
       }
       if ((label|0) == 10) {
        label = 0;
        $34 = ($33|0)==(0);
        if ($34) {
         $46 = 64;
         label = 15;
         break;
        }
        $35 = $33 & 1;
        $36 = ($35|0)==(0);
        if ($36) {
         $$02$i3$i = $33;$nTrailingZeros$03$i2$i = 0;
        } else {
         $$0$i = 0;$48 = $pp$val1666;$51 = $33;$55 = 0;
         break;
        }
        while(1) {
         $37 = (($nTrailingZeros$03$i2$i) + 1)|0;
         $38 = $$02$i3$i >>> 1;
         $39 = $38 & 1;
         $40 = ($39|0)==(0);
         if ($40) {
          $$02$i3$i = $38;$nTrailingZeros$03$i2$i = $37;
         } else {
          $$lcssa76 = $37;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
          break;
         }
        }
        $41 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
        $42 = ($$lcssa76|0)==(0);
        if ($42) {
         $$0$i = 0;$48 = $pp$val1666;$51 = $33;$55 = 0;
         break;
        } else {
         $43 = $41;
        }
       }
       $44 = ($43>>>0)>(31);
       if ($44) {
        $46 = $43;
        label = 15;
       } else {
        $$0$i = $43;$48 = $pp$val1666;$51 = $33;$55 = $43;
       }
      }
     } while(0);
     if ((label|0) == 15) {
      label = 0;
      $45 = (($46) + -32)|0;
      $$0$i = $45;$48 = $33;$51 = 0;$55 = $46;
     }
     $47 = $48 >>> $$0$i;
     $49 = (32 - ($$0$i))|0;
     $50 = $51 << $49;
     $52 = $50 | $47;
     $53 = $51 >>> $$0$i;
     $54 = (($55) + ($$02964))|0;
     $56 = ($52|0)!=(1);
     $57 = ($53|0)!=(0);
     $58 = $57 | $56;
     if (!($58)) {
      $$0$lcssa49 = $16;$$02$lcssa51 = $54;$i$0$lcssa50 = $22;
      break L1;
     }
     $$pre = HEAP32[$ar>>2]|0;
     $59 = (($lp) + ($54<<2)|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = (0 - ($60))|0;
     $62 = (($16) + ($61)|0);
     $63 = (FUNCTION_TABLE_iii[$cmp & 15]($62,$$pre)|0);
     $64 = ($63|0)<(1);
     if ($64) {
      $$0$lcssa = $16;$$02$lcssa = $54;$$03$lcssa = 0;$i$0$lcssa = $22;
      label = 18;
      break;
     } else {
      $$01162$phi = $16;$$02964 = $54;$$03865 = 0;$16 = $62;$33 = $53;$i$01063 = $22;$pp$val1666 = $52;$$01162 = $$01162$phi;
     }
    }
   }
  } else {
   $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
   label = 18;
  }
 } while(0);
 if ((label|0) == 18) {
  $65 = ($$03$lcssa|0)==(0);
  if ($65) {
   $$0$lcssa49 = $$0$lcssa;$$02$lcssa51 = $$02$lcssa;$i$0$lcssa50 = $i$0$lcssa;
  } else {
   STACKTOP = sp;return;
  }
 }
 $66 = ($i$0$lcssa50|0)<(2);
 L30: do {
  if (!($66)) {
   $67 = (($ar) + ($i$0$lcssa50<<2)|0);
   HEAP32[$67>>2] = $tmp$i5;
   $68 = ($width|0)==(0);
   if (!($68)) {
    $$02$us$i10 = $width;$80 = $tmp$i5;
    while(1) {
     $78 = ($$02$us$i10>>>0)>(256);
     $70 = $78 ? 256 : $$02$us$i10;
     $79 = HEAP32[$ar>>2]|0;
     _memcpy(($80|0),($79|0),($70|0))|0;
     $76 = $79;$i$01$us$i8 = 0;
     while(1) {
      $72 = (($ar) + ($i$01$us$i8<<2)|0);
      $73 = (($i$01$us$i8) + 1)|0;
      $74 = (($ar) + ($73<<2)|0);
      $75 = HEAP32[$74>>2]|0;
      _memcpy(($76|0),($75|0),($70|0))|0;
      $77 = (($76) + ($70)|0);
      HEAP32[$72>>2] = $77;
      $exitcond$i9 = ($73|0)==($i$0$lcssa50|0);
      if ($exitcond$i9) {
       break;
      } else {
       $76 = $75;$i$01$us$i8 = $73;
      }
     }
     $69 = ($$02$us$i10|0)==($70|0);
     if ($69) {
      break L30;
     }
     $71 = (($$02$us$i10) - ($70))|0;
     $$pre6$i6 = HEAP32[$67>>2]|0;
     $$02$us$i10 = $71;$80 = $$pre6$i6;
    }
   }
  }
 } while(0);
 HEAP32[$ar$i>>2] = $$0$lcssa49;
 $81 = ($$02$lcssa51|0)>(1);
 L39: do {
  if ($81) {
   $$012$i = $$02$lcssa51;$$03$i = $$0$lcssa49;$87 = $$0$lcssa49;$i$04$i = 1;
   while(1) {
    $82 = (($$03$i) + ($0)|0);
    $83 = (($$012$i) + -2)|0;
    $84 = (($lp) + ($83<<2)|0);
    $85 = HEAP32[$84>>2]|0;
    $sum$i = (($85) + ($width))|0;
    $$sum$i = (0 - ($sum$i))|0;
    $86 = (($$03$i) + ($$sum$i)|0);
    $88 = (FUNCTION_TABLE_iii[$cmp & 15]($87,$86)|0);
    $89 = ($88|0)>(-1);
    if ($89) {
     $90 = (FUNCTION_TABLE_iii[$cmp & 15]($87,$82)|0);
     $91 = ($90|0)>(-1);
     if ($91) {
      $i$0$lcssa$i = $i$04$i;
      break;
     }
    }
    $92 = (FUNCTION_TABLE_iii[$cmp & 15]($86,$82)|0);
    $93 = ($92|0)>(-1);
    $94 = (($i$04$i) + 1)|0;
    $95 = (($ar$i) + ($i$04$i<<2)|0);
    if ($93) {
     HEAP32[$95>>2] = $86;
     $96 = (($$012$i) + -1)|0;
     $$0$be$i = $86;$$01$be$i = $96;
    } else {
     HEAP32[$95>>2] = $82;
     $$0$be$i = $82;$$01$be$i = $83;
    }
    $97 = ($$01$be$i|0)>(1);
    if (!($97)) {
     $i$0$lcssa$i = $94;
     break;
    }
    $$pre$i = HEAP32[$ar$i>>2]|0;
    $$012$i = $$01$be$i;$$03$i = $$0$be$i;$87 = $$pre$i;$i$04$i = $94;
   }
   $98 = ($i$0$lcssa$i|0)<(2);
   if ($98) {
    $113 = $tmp$i5;
   } else {
    $99 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
    HEAP32[$99>>2] = $tmp$i5;
    $100 = ($width|0)==(0);
    if ($100) {
     $113 = $tmp$i5;
    } else {
     $$02$us$i = $width;$112 = $tmp$i5;
     while(1) {
      $110 = ($$02$us$i>>>0)>(256);
      $102 = $110 ? 256 : $$02$us$i;
      $111 = HEAP32[$ar$i>>2]|0;
      _memcpy(($112|0),($111|0),($102|0))|0;
      $108 = $111;$i$01$us$i = 0;
      while(1) {
       $104 = (($ar$i) + ($i$01$us$i<<2)|0);
       $105 = (($i$01$us$i) + 1)|0;
       $106 = (($ar$i) + ($105<<2)|0);
       $107 = HEAP32[$106>>2]|0;
       _memcpy(($108|0),($107|0),($102|0))|0;
       $109 = (($108) + ($102)|0);
       HEAP32[$104>>2] = $109;
       $exitcond$i = ($105|0)==($i$0$lcssa$i|0);
       if ($exitcond$i) {
        break;
       } else {
        $108 = $107;$i$01$us$i = $105;
       }
      }
      $101 = ($$02$us$i|0)==($102|0);
      if ($101) {
       $113 = $tmp$i5;
       break L39;
      }
      $103 = (($$02$us$i) - ($102))|0;
      $$pre6$i = HEAP32[$99>>2]|0;
      $$02$us$i = $103;$112 = $$pre6$i;
     }
    }
   }
  } else {
   $113 = $tmp$i5;
  }
 } while(0);
 STACKTOP = sp;return;
}
function _rint($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2146435072;
 $3 = ($2>>>0)>(1126170624);
 $4 = (0)>(0);
 $5 = ($2|0)==(1126170624);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0 = $x;
  return (+$$0);
 }
 $8 = ($1|0)<(0);
 $9 = $x + -4503599627370496.0;
 $10 = $9 + 4503599627370496.0;
 $11 = $x + 4503599627370496.0;
 $12 = $11 + -4503599627370496.0;
 $y$0 = $8 ? $10 : $12;
 $13 = $y$0 == 0.0;
 if (!($13)) {
  $$0 = $y$0;
  return (+$$0);
 }
 $14 = $8 ? -0.0 : 0.0;
 $$0 = $14;
 return (+$$0);
}
function _rintf($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 & 2130706432;
 $2 = ($1>>>0)>(1249902592);
 if ($2) {
  $$0 = $x;
  return (+$$0);
 }
 $3 = ($0|0)<(0);
 $4 = $x + -8388608.0;
 $5 = $4 + 8388608.0;
 $6 = $x + 8388608.0;
 $7 = $6 + -8388608.0;
 $y$0 = $3 ? $5 : $7;
 $8 = $y$0 == 0.0;
 if (!($8)) {
  $$0 = $y$0;
  return (+$$0);
 }
 $9 = $3 ? -0.0 : 0.0;
 $$0 = $9;
 return (+$$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _srand($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($s) + -1)|0;
 $1 = 553040;
 $2 = $1;
 HEAP32[$2>>2] = $0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 return;
}
function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 553040;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
 $9 = tempRet0;
 $10 = 553040;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
 $15 = tempRet0;
 return ($14|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0;
 var $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0;
 var $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0;
 var $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0;
 var $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
 var $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[553048>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (553088 + ($13<<2)|0);
    $$sum10 = (($13) + 2)|0;
    $15 = (553088 + ($$sum10<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[553048>>2] = $22;
     } else {
      $23 = HEAP32[(553064)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[(553056)>>2]|0;
   $35 = ($4>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = (553088 + ($65<<2)|0);
     $$sum4 = (($65) + 2)|0;
     $67 = (553088 + ($$sum4<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[553048>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[(553064)>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = ((($70)) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[(553056)>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($4))|0;
     $82 = $4 | 3;
     $83 = ((($68)) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($4)|0);
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[(553068)>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = (553088 + ($92<<2)|0);
      $94 = HEAP32[553048>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[553048>>2] = $98;
       $$pre105 = (($92) + 2)|0;
       $$pre106 = (553088 + ($$pre105<<2)|0);
       $$pre$phiZ2D = $$pre106;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = (553088 + ($$sum9<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[(553064)>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = ((($F4$0)) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = ((($90)) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = ((($90)) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[(553056)>>2] = $81;
     HEAP32[(553068)>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[(553052)>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = (553352 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($4))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = ((($t$0$i)) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = ((($t$0$i)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = ((($144)) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($4))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[(553064)>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($4)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = ((($v$0$i$lcssa)) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($v$0$i$lcssa)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = ((($v$0$i$lcssa)) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = ((($v$0$i$lcssa)) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = ((($R$0$i)) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = ((($R$0$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = ((($v$0$i$lcssa)) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = ((($159)) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = ((($156)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = ((($v$0$i$lcssa)) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = (553352 + ($182<<2)|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[(553052)>>2]|0;
         $189 = $188 & $187;
         HEAP32[(553052)>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[(553064)>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = ((($154)) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = ((($154)) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[(553064)>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = ((($R$1$i)) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = ((($v$0$i$lcssa)) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = ((($R$1$i)) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = ((($201)) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = ((($v$0$i$lcssa)) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[(553064)>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = ((($R$1$i)) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = ((($207)) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($4))|0;
      $215 = $214 | 3;
      $216 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $4 | 3;
      $221 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i35)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($4))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[(553056)>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[(553068)>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = (553088 + ($229<<2)|0);
       $231 = HEAP32[553048>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[553048>>2] = $235;
        $$pre$i = (($229) + 2)|0;
        $$pre8$i = (553088 + ($$pre$i<<2)|0);
        $$pre$phi$iZ2D = $$pre8$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = (553088 + ($$sum3$i<<2)|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(553064)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = ((($F1$0$i)) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = ((($227)) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = ((($227)) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[(553056)>>2] = $rsize$0$i$lcssa;
      HEAP32[(553068)>>2] = $151;
     }
     $243 = ((($v$0$i$lcssa)) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(553052)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = (553352 + ($idx$0$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i|0)==(31);
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = ((($t$0$i14)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = ((($t$0$i14)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = (((($t$0$i14)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = (553352 + ($327<<2)|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;$v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;$v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $331 = ((($t$230$i)) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = ((($t$230$i)) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = ((($t$230$i)) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[(553056)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(553064)>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($v$3$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($v$3$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($v$3$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($v$3$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = ((($R$0$i18)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = ((($R$0$i18)) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = ((($v$3$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = ((($v$3$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (553352 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[(553052)>>2]|0;
           $386 = $385 & $384;
           HEAP32[(553052)>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[(553064)>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($351)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = ((($351)) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[(553064)>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($R$1$i20)) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = ((($v$3$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($R$1$i20)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = ((($v$3$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[(553064)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($R$1$i20)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L199: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (553088 + ($424<<2)|0);
          $426 = HEAP32[553048>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[553048>>2] = $430;
           $$pre$i25 = (($424) + 2)|0;
           $$pre43$i = (553088 + ($$pre$i25<<2)|0);
           $$pre$phi$i26Z2D = $$pre43$i;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = (553088 + ($$sum17$i<<2)|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(553064)>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = ((($F5$0$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = (553352 + ($I7$0$i<<2)|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[(553052)>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[(553052)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($rsize$3$lcssa$i|0);
         L217: do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i|0)==(31);
           $481 = $I7$0$i >>> 1;
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = (((($T$028$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa232 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L217;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           $494 = HEAP32[(553064)>>2]|0;
           $495 = ($$lcssa232>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa232>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L199;
           }
          }
         } while(0);
         $499 = ((($T$0$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(553064)>>2]|0;
         $502 = ($500>>>0)>=($501>>>0);
         $not$$i = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = ((($500)) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = ((($v$3$lcssa$i)) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(553056)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(553068)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(553068)>>2] = $514;
   HEAP32[(553056)>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(553056)>>2] = 0;
   HEAP32[(553068)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = ((($512)) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[(553060)>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[(553060)>>2] = $528;
  $529 = HEAP32[(553072)>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[(553072)>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = ((($529)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = ((($529)) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[553520>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[(553528)>>2] = $538;
    HEAP32[(553524)>>2] = $538;
    HEAP32[(553532)>>2] = -1;
    HEAP32[(553536)>>2] = -1;
    HEAP32[(553540)>>2] = 0;
    HEAP32[(553492)>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[553520>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[(553528)>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[(553488)>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[(553480)>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[(553492)>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L258: do {
  if ($560) {
   $561 = HEAP32[(553072)>>2]|0;
   $562 = ($561|0)==(0|0);
   L260: do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = (553496);
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = ((($sp$0$i$i)) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa228 = $sp$0$i$i;$$lcssa230 = $565;
        break;
       }
      }
      $569 = ((($sp$0$i$i)) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[(553060)>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa228>>2]|0;
      $600 = HEAP32[$$lcssa230>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;$tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;$tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 174) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[(553524)>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[(553480)>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[(553488)>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;$tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;$tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while(0);
   L280: do {
    if ((label|0) == 184) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = HEAP32[(553528)>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;$tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while(0);
   $618 = HEAP32[(553492)>>2]|0;
   $619 = $618 | 4;
   HEAP32[(553492)>>2] = $619;
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while(0);
 if ((label|0) == 191) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;$tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label|0) == 194) {
  $631 = HEAP32[(553480)>>2]|0;
  $632 = (($631) + ($tsize$254$i))|0;
  HEAP32[(553480)>>2] = $632;
  $633 = HEAP32[(553484)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(553484)>>2] = $632;
  }
  $635 = HEAP32[(553072)>>2]|0;
  $636 = ($635|0)==(0|0);
  L299: do {
   if ($636) {
    $637 = HEAP32[(553064)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$255$i>>>0)<($637>>>0);
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     HEAP32[(553064)>>2] = $tbase$255$i;
    }
    HEAP32[(553496)>>2] = $tbase$255$i;
    HEAP32[(553500)>>2] = $tsize$254$i;
    HEAP32[(553508)>>2] = 0;
    $640 = HEAP32[553520>>2]|0;
    HEAP32[(553084)>>2] = $640;
    HEAP32[(553080)>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = (553088 + ($641<<2)|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = (553088 + ($$sum$i$i<<2)|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = (553088 + ($$sum1$i$i<<2)|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$254$i) + -40)|0;
    $647 = ((($tbase$255$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$255$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(553072)>>2] = $654;
    HEAP32[(553060)>>2] = $655;
    $656 = $655 | 1;
    $$sum$i13$i = (($653) + 4)|0;
    $657 = (($tbase$255$i) + ($$sum$i13$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$254$i) + -36)|0;
    $658 = (($tbase$255$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[(553536)>>2]|0;
    HEAP32[(553076)>>2] = $659;
   } else {
    $sp$084$i = (553496);
    while(1) {
     $660 = HEAP32[$sp$084$i>>2]|0;
     $661 = ((($sp$084$i)) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$255$i|0)==($663|0);
     if ($664) {
      $$lcssa222 = $660;$$lcssa224 = $661;$$lcssa226 = $662;$sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = ((($sp$084$i)) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label|0) == 204) {
     $668 = ((($sp$084$i$lcssa)) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa222>>>0);
      $673 = ($635>>>0)<($tbase$255$i>>>0);
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = (($$lcssa226) + ($tsize$254$i))|0;
       HEAP32[$$lcssa224>>2] = $674;
       $675 = HEAP32[(553060)>>2]|0;
       $676 = (($675) + ($tsize$254$i))|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($676) - ($683))|0;
       HEAP32[(553072)>>2] = $684;
       HEAP32[(553060)>>2] = $685;
       $686 = $685 | 1;
       $$sum$i17$i = (($683) + 4)|0;
       $687 = (($635) + ($$sum$i17$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i18$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i18$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[(553536)>>2]|0;
       HEAP32[(553076)>>2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[(553064)>>2]|0;
    $691 = ($tbase$255$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[(553064)>>2] = $tbase$255$i;
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$255$i) + ($tsize$254$i)|0);
    $sp$183$i = (553496);
    while(1) {
     $693 = HEAP32[$sp$183$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa219 = $sp$183$i;$sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = ((($sp$183$i)) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      $sp$0$i$i$i = (553496);
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label|0) == 212) {
     $698 = ((($sp$183$i$lcssa)) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa219>>2] = $tbase$255$i;
      $702 = ((($sp$183$i$lcssa)) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$254$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = ((($tbase$255$i)) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      $709 = (0 - ($706))|0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = (($tbase$255$i) + ($711)|0);
      $$sum112$i = (($tsize$254$i) + 8)|0;
      $713 = (($tbase$255$i) + ($$sum112$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      $717 = (0 - ($714))|0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = (($719) + ($tsize$254$i))|0;
      $720 = (($tbase$255$i) + ($$sum113$i)|0);
      $721 = $720;
      $722 = $712;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($711) + ($nb$0))|0;
      $724 = (($tbase$255$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($711) + 4)|0;
      $727 = (($tbase$255$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L317: do {
       if ($728) {
        $729 = HEAP32[(553060)>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[(553060)>>2] = $730;
        HEAP32[(553072)>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$255$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[(553068)>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[(553056)>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[(553056)>>2] = $736;
         HEAP32[(553068)>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$255$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$255$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$254$i) + 4)|0;
        $$sum114$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$255$i) + ($$sum114$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L325: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = (($$sum3738$i$i) + ($tsize$254$i))|0;
           $747 = (($tbase$255$i) + ($$sum124$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$254$i) + 12)|0;
           $$sum125$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$255$i) + ($$sum125$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = (553088 + ($751<<2)|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = ((($748)) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[553048>>2]|0;
            $763 = $762 & $761;
            HEAP32[553048>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre57$i$i = ((($750)) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = ((($750)) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = ((($748)) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = (($$sum34$i$i) + ($tsize$254$i))|0;
           $770 = (($tbase$255$i) + ($$sum115$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$254$i) + 12)|0;
           $$sum116$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$255$i) + ($$sum116$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$255$i) + ($$sum122$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum123$i = (($$sum67$i$i) + ($tsize$254$i))|0;
              $787 = (($tbase$255$i) + ($$sum123$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;$RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;$RP$0$i$i = $784;
             }
             while(1) {
              $790 = ((($R$0$i$i)) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if (!($792)) {
               $R$0$i$i = $791;$RP$0$i$i = $790;
               continue;
              }
              $793 = ((($R$0$i$i)) + 16|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($794|0)==(0|0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;$RP$0$i$i = $793;
              }
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = (($$sum3536$i$i) + ($tsize$254$i))|0;
             $775 = (($tbase$255$i) + ($$sum117$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = ((($776)) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = ((($773)) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$254$i) + 28)|0;
           $$sum118$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$255$i) + ($$sum118$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = (553352 + ($799<<2)|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[(553052)>>2]|0;
             $806 = $805 & $804;
             HEAP32[(553052)>>2] = $806;
             break L325;
            } else {
             $807 = HEAP32[(553064)>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = ((($771)) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = ((($771)) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L325;
             }
            }
           } while(0);
           $814 = HEAP32[(553064)>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = ((($R$1$i$i)) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = (($$sum3132$i$i) + ($tsize$254$i))|0;
           $817 = (($tbase$255$i) + ($$sum119$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = ((($R$1$i$i)) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = ((($818)) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum120$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$255$i) + ($$sum120$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[(553064)>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = ((($R$1$i$i)) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = ((($824)) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = (($$sum9$i$i) + ($tsize$254$i))|0;
         $830 = (($tbase$255$i) + ($$sum121$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = ((($oldfirst$0$i$i)) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$255$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$255$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = (553088 + ($840<<2)|0);
         $842 = HEAP32[553048>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[553048>>2] = $846;
           $$pre$i22$i = (($840) + 2)|0;
           $$pre56$i$i = (553088 + ($$pre$i22$i<<2)|0);
           $$pre$phi$i23$iZ2D = $$pre56$i$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = (553088 + ($$sum29$i$i<<2)|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[(553064)>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$255$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$255$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = (553352 + ($I7$0$i$i<<2)|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$255$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$255$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$255$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[(553052)>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[(553052)>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$255$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$255$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$255$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ((($891)) + 4|0);
        $893 = HEAP32[$892>>2]|0;
        $894 = $893 & -8;
        $895 = ($894|0)==($qsize$0$i$i|0);
        L411: do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i|0)==(31);
          $897 = $I7$0$i$i >>> 1;
          $898 = (25 - ($897))|0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;$T$050$i$i = $891;
          while(1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = (((($T$050$i$i)) + 16|0) + ($907<<2)|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = ((($903)) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L411;
           } else {
            $K8$051$i$i = $901;$T$050$i$i = $903;
           }
          }
          $910 = HEAP32[(553064)>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$255$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$050$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$255$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$255$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L317;
          }
         }
        } while(0);
        $915 = ((($T$0$lcssa$i25$i)) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[(553064)>>2]|0;
        $918 = ($916>>>0)>=($917>>>0);
        $not$$i26$i = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = ((($916)) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$255$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$255$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$255$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $711 | 8;
      $924 = (($tbase$255$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     } else {
      $sp$0$i$i$i = (553496);
     }
    }
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = ((($sp$0$i$i$i)) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa215 = $925;$$lcssa216 = $928;$$lcssa217 = $929;
       break;
      }
     }
     $931 = ((($sp$0$i$i$i)) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = (($$lcssa216) + -47)|0;
    $$sum1$i15$i = (($$lcssa216) + -39)|0;
    $933 = (($$lcssa215) + ($$sum1$i15$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    $937 = (0 - ($934))|0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = (($$sum$i14$i) + ($939))|0;
    $940 = (($$lcssa215) + ($$sum2$i16$i)|0);
    $941 = ((($635)) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = ((($943)) + 8|0);
    $945 = (($tsize$254$i) + -40)|0;
    $946 = ((($tbase$255$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($tbase$255$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(553072)>>2] = $953;
    HEAP32[(553060)>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($952) + 4)|0;
    $956 = (($tbase$255$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$254$i) + -36)|0;
    $957 = (($tbase$255$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(553536)>>2]|0;
    HEAP32[(553076)>>2] = $958;
    $959 = ((($943)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944>>2]=HEAP32[(553496)>>2]|0;HEAP32[$944+4>>2]=HEAP32[(553496)+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[(553496)+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[(553496)+12>>2]|0;
    HEAP32[(553496)>>2] = $tbase$255$i;
    HEAP32[(553500)>>2] = $tsize$254$i;
    HEAP32[(553508)>>2] = 0;
    HEAP32[(553504)>>2] = $944;
    $960 = ((($943)) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = ((($943)) + 32|0);
    $962 = ($961>>>0)<($$lcssa217>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = ((($964)) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = ((($964)) + 8|0);
      $966 = ($965>>>0)<($$lcssa217>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = ((($635)) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = (553088 + ($977<<2)|0);
      $979 = HEAP32[553048>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      if ($982) {
       $983 = $979 | $980;
       HEAP32[553048>>2] = $983;
       $$pre$i$i = (($977) + 2)|0;
       $$pre14$i$i = (553088 + ($$pre$i$i<<2)|0);
       $$pre$phi$i$iZ2D = $$pre14$i$i;$F$0$i$i = $978;
      } else {
       $$sum4$i$i = (($977) + 2)|0;
       $984 = (553088 + ($$sum4$i$i<<2)|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = HEAP32[(553064)>>2]|0;
       $987 = ($985>>>0)<($986>>>0);
       if ($987) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = ((($F$0$i$i)) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = ((($635)) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = ((($635)) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = (553352 + ($I1$0$i$i<<2)|0);
     $1017 = ((($635)) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = ((($635)) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[(553052)>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[(553052)>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = ((($635)) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = ((($635)) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = ((($635)) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ((($1027)) + 4|0);
     $1029 = HEAP32[$1028>>2]|0;
     $1030 = $1029 & -8;
     $1031 = ($1030|0)==($970|0);
     L452: do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i|0)==(31);
       $1033 = $I1$0$i$i >>> 1;
       $1034 = (25 - ($1033))|0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;$T$06$i$i = $1027;
       while(1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = (((($T$06$i$i)) + 16|0) + ($1043<<2)|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa211 = $1044;$T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = ((($1039)) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L452;
        } else {
         $K2$07$i$i = $1037;$T$06$i$i = $1039;
        }
       }
       $1046 = HEAP32[(553064)>>2]|0;
       $1047 = ($$lcssa211>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa211>>2] = $635;
        $1048 = ((($635)) + 24|0);
        HEAP32[$1048>>2] = $T$06$i$i$lcssa;
        $1049 = ((($635)) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = ((($635)) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L299;
       }
      }
     } while(0);
     $1051 = ((($T$0$lcssa$i$i)) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[(553064)>>2]|0;
     $1054 = ($1052>>>0)>=($1053>>>0);
     $not$$i$i = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = ((($1052)) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = ((($635)) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = ((($635)) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = ((($635)) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(553060)>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[(553060)>>2] = $1062;
   $1063 = HEAP32[(553072)>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[(553072)>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(553064)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[(553068)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[(553056)>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = (553088 + ($25<<2)|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = ((($22)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[553048>>2]|0;
     $36 = $35 & $34;
     HEAP32[553048>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre60 = ((($24)) + 8|0);
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = ((($24)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = ((($22)) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi61Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = ((($R$0)) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = ((($R$0)) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = ((($49)) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = ((($46)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (553352 + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[(553052)>>2]|0;
      $79 = $78 & $77;
      HEAP32[(553052)>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[(553064)>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = ((($44)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = ((($44)) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[(553064)>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = ((($R$1)) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = ((($R$1)) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = ((($91)) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[(553064)>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = ((($R$1)) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = ((($97)) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[(553072)>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[(553060)>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[(553060)>>2] = $120;
   HEAP32[(553072)>>2] = $p$0;
   $121 = $120 | 1;
   $122 = ((($p$0)) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[(553068)>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[(553068)>>2] = 0;
   HEAP32[(553056)>>2] = 0;
   return;
  }
  $125 = HEAP32[(553068)>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[(553056)>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[(553056)>>2] = $128;
   HEAP32[(553068)>>2] = $p$0;
   $129 = $128 | 1;
   $130 = ((($p$0)) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = (553088 + ($140<<2)|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[(553064)>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = ((($137)) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[553048>>2]|0;
     $152 = $151 & $150;
     HEAP32[553048>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre58 = ((($139)) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = HEAP32[(553064)>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = ((($139)) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = ((($137)) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi59Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = ((($R7$0)) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = ((($R7$0)) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[(553064)>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[(553064)>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = ((($166)) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = ((($163)) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (553352 + ($191<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond47 = ($R7$1|0)==(0|0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[(553052)>>2]|0;
       $198 = $197 & $196;
       HEAP32[(553052)>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[(553064)>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = ((($161)) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = ((($161)) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[(553064)>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = ((($R7$1)) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = ((($R7$1)) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = ((($210)) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[(553064)>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = ((($R7$1)) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = ((($216)) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = ((($p$0)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[(553068)>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[(553056)>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = ((($p$0)) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = (553088 + ($233<<2)|0);
  $235 = HEAP32[553048>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[553048>>2] = $239;
   $$pre = (($233) + 2)|0;
   $$pre57 = (553088 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre57;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = (553088 + ($$sum11<<2)|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[(553064)>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = ((($F16$0)) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = ((($p$0)) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = ((($p$0)) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = (553352 + ($I18$0<<2)|0);
 $273 = ((($p$0)) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = ((($p$0)) + 16|0);
 $275 = ((($p$0)) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[(553052)>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[(553052)>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = ((($p$0)) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = ((($p$0)) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = ((($p$0)) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ((($284)) + 4|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $286 & -8;
   $288 = ($287|0)==($psize$1|0);
   L202: do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0|0)==(31);
     $290 = $I18$0 >>> 1;
     $291 = (25 - ($290))|0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;$T$051 = $284;
     while(1) {
      $300 = $K19$052 >>> 31;
      $301 = (((($T$051)) + 16|0) + ($300<<2)|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = ((($296)) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L202;
      } else {
       $K19$052 = $294;$T$051 = $296;
      }
     }
     $303 = HEAP32[(553064)>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = ((($p$0)) + 24|0);
      HEAP32[$305>>2] = $T$051$lcssa;
      $306 = ((($p$0)) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = ((($p$0)) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = ((($T$0$lcssa)) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[(553064)>>2]|0;
   $311 = ($309>>>0)>=($310>>>0);
   $not$ = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = $311 & $not$;
   if ($312) {
    $313 = ((($309)) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = ((($p$0)) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = ((($p$0)) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = ((($p$0)) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[(553080)>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[(553080)>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = (553504);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = ((($sp$0$i)) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[(553080)>>2] = -1;
 return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  return ($6|0);
 }
 $8 = ((($6)) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = ($10|0)==(0);
 if ($11) {
  return ($6|0);
 }
 _memset(($6|0),0,($req$0|0))|0;
 return ($6|0);
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 $5 = (($bytes) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = ((($oldmem)) + -8|0);
 $9 = (_try_realloc_chunk($8,$7)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 8|0);
  $mem$0 = $11;
  return ($mem$0|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $14 = ((($oldmem)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$0 = $12;
 return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $cond = 0, $newp$0 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(553064)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[(553528)>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $30 = HEAP32[(553072)>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[(553060)>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[(553072)>>2] = $36;
  HEAP32[(553060)>>2] = $35;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $42 = HEAP32[(553068)>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[(553056)>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[(553056)>>2] = $storemerge21;
  HEAP32[(553068)>>2] = $storemerge;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = (553088 + ($77<<2)|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = ((($74)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[553048>>2]|0;
    $88 = $87 & $86;
    HEAP32[553048>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = ((($76)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($76)) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = ((($74)) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;$RP$0 = $112;
      }
     } else {
      $R$0 = $110;$RP$0 = $109;
     }
     while(1) {
      $115 = ((($R$0)) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if (!($117)) {
       $R$0 = $116;$RP$0 = $115;
       continue;
      }
      $118 = ((($R$0)) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if ($120) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $119;$RP$0 = $118;
      }
     }
     $121 = ($RP$0$lcssa>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = ((($101)) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = ((($98)) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (553352 + ($124<<2)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[(553052)>>2]|0;
      $131 = $130 & $129;
      HEAP32[(553052)>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[(553064)>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = ((($96)) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = ((($96)) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[(553064)>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = ((($R$1)) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = ((($R$1)) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = ((($143)) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[(553064)>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = ((($R$1)) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = ((($149)) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi50Z2D = 0, $$pre$phi52Z2D = 0, $$pre$phiZ2D = 0, $$pre48 = 0, $$pre49 = 0, $$pre51 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$043 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$042 = 0, $T$042$lcssa = 0, $cond = 0;
 var $cond39 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(553064)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(553068)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[(553056)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum14 = (4 - ($5))|0;
    $105 = (($p) + ($$sum14)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum24 = (8 - ($5))|0;
    $17 = (($p) + ($$sum24)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum25 = (12 - ($5))|0;
    $19 = (($p) + ($$sum25)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (553088 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[553048>>2]|0;
     $32 = $31 & $30;
     HEAP32[553048>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre51 = ((($20)) + 8|0);
     $$pre$phi52Z2D = $$pre51;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi52Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi52Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum16 = (24 - ($5))|0;
   $39 = (($p) + ($$sum16)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum17 = (12 - ($5))|0;
   $41 = (($p) + ($$sum17)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum18 = (16 - ($5))|0;
     $$sum19 = (($$sum18) + 4)|0;
     $53 = (($p) + ($$sum19)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum18)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = ((($R$0)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = ((($R$0)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum23 = (8 - ($5))|0;
     $44 = (($p) + ($$sum23)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum20 = (28 - ($5))|0;
    $67 = (($p) + ($$sum20)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (553352 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(553052)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(553052)>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(553064)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[(553064)>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$1)) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum21 = (16 - ($5))|0;
    $86 = (($p) + ($$sum21)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$1)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum22 = (($$sum21) + 4)|0;
    $92 = (($p) + ($$sum22)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[(553064)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$1)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[(553064)>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[(553072)>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[(553060)>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[(553060)>>2] = $115;
   HEAP32[(553072)>>2] = $$0;
   $116 = $115 | 1;
   $117 = ((($$0)) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[(553068)>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    return;
   }
   HEAP32[(553068)>>2] = 0;
   HEAP32[(553056)>>2] = 0;
   return;
  }
  $120 = HEAP32[(553068)>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(553056)>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[(553056)>>2] = $123;
   HEAP32[(553068)>>2] = $$0;
   $124 = $123 | 1;
   $125 = ((($$0)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum12 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum12)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum13 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum13)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = (553088 + ($135<<2)|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($132)) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[553048>>2]|0;
     $146 = $145 & $144;
     HEAP32[553048>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre49 = ((($134)) + 8|0);
     $$pre$phi50Z2D = $$pre49;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = ((($134)) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi50Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = ((($132)) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi50Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = ((($R7$0)) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = ((($R7$0)) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum11 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum11)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = ((($159)) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = ((($156)) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum8 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum8)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (553352 + ($182<<2)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond39 = ($R7$1|0)==(0|0);
      if ($cond39) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[(553052)>>2]|0;
       $189 = $188 & $187;
       HEAP32[(553052)>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[(553064)>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = ((($154)) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = ((($154)) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[(553064)>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = ((($R7$1)) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum9 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum9)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = ((($R7$1)) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = ((($201)) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum10 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum10)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[(553064)>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = ((($R7$1)) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = ((($207)) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = ((($$0)) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[(553068)>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[(553056)>>2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = ((($$0)) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = (553088 + ($224<<2)|0);
  $226 = HEAP32[553048>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[553048>>2] = $230;
   $$pre = (($224) + 2)|0;
   $$pre48 = (553088 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre48;$F16$0 = $225;
  } else {
   $$sum7 = (($224) + 2)|0;
   $231 = (553088 + ($$sum7<<2)|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[(553064)>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = ((($F16$0)) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = ((($$0)) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = ((($$0)) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = (553352 + ($I19$0<<2)|0);
 $264 = ((($$0)) + 28|0);
 HEAP32[$264>>2] = $I19$0;
 $265 = ((($$0)) + 16|0);
 $266 = ((($$0)) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[(553052)>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[(553052)>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = ((($$0)) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = ((($$0)) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = ((($$0)) + 8|0);
  HEAP32[$274>>2] = $$0;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ((($275)) + 4|0);
 $277 = HEAP32[$276>>2]|0;
 $278 = $277 & -8;
 $279 = ($278|0)==($$1|0);
 L191: do {
  if ($279) {
   $T$0$lcssa = $275;
  } else {
   $280 = ($I19$0|0)==(31);
   $281 = $I19$0 >>> 1;
   $282 = (25 - ($281))|0;
   $283 = $280 ? 0 : $282;
   $284 = $$1 << $283;
   $K20$043 = $284;$T$042 = $275;
   while(1) {
    $291 = $K20$043 >>> 31;
    $292 = (((($T$042)) + 16|0) + ($291<<2)|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     $$lcssa = $292;$T$042$lcssa = $T$042;
     break;
    }
    $285 = $K20$043 << 1;
    $286 = ((($287)) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L191;
    } else {
     $K20$043 = $285;$T$042 = $287;
    }
   }
   $294 = HEAP32[(553064)>>2]|0;
   $295 = ($$lcssa>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$$lcssa>>2] = $$0;
   $296 = ((($$0)) + 24|0);
   HEAP32[$296>>2] = $T$042$lcssa;
   $297 = ((($$0)) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = ((($$0)) + 8|0);
   HEAP32[$298>>2] = $$0;
   return;
  }
 } while(0);
 $299 = ((($T$0$lcssa)) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[(553064)>>2]|0;
 $302 = ($300>>>0)>=($301>>>0);
 $not$ = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = $302 & $not$;
 if (!($303)) {
  _abort();
  // unreachable;
 }
 $304 = ((($300)) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = ((($$0)) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = ((($$0)) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = ((($$0)) + 24|0);
 HEAP32[$307>>2] = 0;
 return;
}
//精简
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        //HEAP32[((ptr)>>2)]=value4; fix Invalid asm.js: Expected shift of word size
        HEAP32[(ptr)>>2]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _strcat(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    var pdestEnd = 0;
    pdestEnd = (pdest + (_strlen(pdest)|0))|0;
    do {
      HEAP8[((pdestEnd+i)>>0)]=HEAP8[((psrc+i)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        //HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0); fix: Invalid asm.js: Expected shift of word size
        HEAP32[(dest)>>2]=((HEAP32[(src)>>2])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
//精简，这些函数不导出 不能留，不然一些未引用变量会删除只留下表达式

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
//精简
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
// =======================================================================



  
//精简

function b0(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(0);return 0; }
function b1(p0) { p0 = p0|0; abort(1); }
function b2(p0,p1) { p0 = p0|0;p1 = p1|0; abort(2); }
function b3(p0) { p0 = p0|0; abort(3);return 0; }
function b4(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(4); }
function b5(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; abort(5);return 0; }
function b6(p0,p1) { p0 = p0|0;p1 = p1|0; abort(6);return 0; }
function b7(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(7);return 0; }

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiiii = [b0,_floor1_inverse2,_vorbis_book_decodevs_add,_vorbis_book_decodev_add];
var FUNCTION_TABLE_vi = [b1,_floor1_free_info,_floor1_free_look,_mapping0_free_info,_res0_free_info,_res0_free_look,b1,b1];
var FUNCTION_TABLE_vii = [b2,_floor1_pack,_res0_pack,b2];
var FUNCTION_TABLE_ii = [b3,_mapping0_forward];
var FUNCTION_TABLE_viii = [b4,_mapping0_pack];
var FUNCTION_TABLE_iiiiiiiii = [b5,_res1_forward,_res2_forward,b5];
var FUNCTION_TABLE_iii = [b6,_floor1_unpack,_floor1_look,_floor1_inverse1,_mapping0_unpack,_mapping0_inverse,_res0_unpack,_res0_look,_icomp,_apsort,_sort32a,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_iiiiii = [b7,_res0_inverse,_res1_class,_res1_inverse,_res2_class,_res2_inverse,b7,b7];

  return { _memmove: _memmove, _strlen: _strlen, _strcat: _strcat, _free: _free, _i64Add: _i64Add, _encoder_clear: _encoder_clear, _encoder_transfer_data: _encoder_transfer_data, _encoder_data_len: _encoder_data_len, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _encoder_init: _encoder_init, _encoder_process: _encoder_process, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _strcpy: _strcpy, _encoder_analysis_buffer: _encoder_analysis_buffer };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
//var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _strcat = Module["_strcat"] = asm["_strcat"];
var _free = Module["_free"] = asm["_free"];
var _encoder_init = Module["_encoder_init"] = asm["_encoder_init"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _encoder_transfer_data = Module["_encoder_transfer_data"] = asm["_encoder_transfer_data"];
var _encoder_process = Module["_encoder_process"] = asm["_encoder_process"];
var _encoder_data_len = Module["_encoder_data_len"] = asm["_encoder_data_len"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _encoder_clear = Module["_encoder_clear"] = asm["_encoder_clear"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _encoder_analysis_buffer = Module["_encoder_analysis_buffer"] = asm["_encoder_analysis_buffer"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];

//精简


  var encoder_init = Module._encoder_init,
      encoder_clear = Module._encoder_clear,
      encoder_analysis_buffer = Module._encoder_analysis_buffer,
      encoder_process = Module._encoder_process,
      encoder_data_len = Module._encoder_data_len,
      encoder_transfer_data = Module._encoder_transfer_data,
      HEAPU8 = Module.HEAPU8,
      HEAPU32 = Module.HEAPU32,
      HEAPF32 = Module.HEAPF32;


	//实时编码器
	var Encoder = function(sampleRate, numChannels, quality) {
		this.numChannels = numChannels;
		this.sampleRate = sampleRate;
		this.encoder = encoder_init(this.numChannels, sampleRate, quality);
	};
	var Encoder_Proc = function(encoder,length) {
		encoder_process(encoder, length);
		var len = encoder_data_len(encoder);
		if (len > 0) {
			var data = encoder_transfer_data(encoder);
			return new Uint8Array(HEAPU8.subarray(data, data + len));
		}
		return new Uint8Array(0);
	};
	var Encoder_Enc = function(encoder,numCh,pcmList) {
		var length = pcmList[0].length;
		var analysis_buffer = encoder_analysis_buffer(encoder, length) >> 2;
		for (var ch = 0; ch < numCh; ++ch){
			var pcm=pcmList[ch],f32=new Float32Array(length);
			for(var i=0;i<length;i++){//转成浮点数
				var s=pcm[i];
				s=s<0?s/0x8000:s/0x7FFF;
				f32[i]=s;
			}
			HEAPF32.set(f32, HEAPU32[analysis_buffer + ch] >> 2);
		}
		return Encoder_Proc(encoder, length);
	};

	Encoder.prototype.encode = function(pcmList) {//[Int16Array,...] 多声道
		var pcmLen=pcmList[0].length;
		var blockSize=this.sampleRate,numCh=this.numChannels;
		if(pcmLen<=blockSize){
			return Encoder_Enc(this.encoder, numCh, pcmList);
		}
		//分块编码，不然太大_malloc分配不出内存
		var memory=new Uint8Array(500000), mOffset=0;
		var idx=0;
		while(idx<pcmLen){
			var chunks=[];
			for (var ch = 0; ch < numCh; ++ch){
				var chunk=pcmList[ch].subarray(idx,idx+blockSize);
				chunks.push(chunk);
			}
			idx+=blockSize;
			var buf=Encoder_Enc(this.encoder, numCh, chunks);
			
			if(buf.length>0){
				var bufLen=buf.length;
				if(mOffset+bufLen>memory.length){
					var tmp=new Uint8Array(memory.length+Math.max(500000,bufLen));
					tmp.set(memory.subarray(0, mOffset));
					memory=tmp;
				}
				memory.set(buf,mOffset);
				mOffset+=bufLen;
			};
		};
		return new Uint8Array(memory.buffer.slice(0,mOffset));
	};

	Encoder.prototype.flush = function() {
		var val=Encoder_Proc(this.encoder, 0);
		encoder_clear(this.encoder);
		this.encoder=null;
		return val;
	};


	Encoder.Module=Module;
	Encoder.Create=Create;
	return Encoder;
};


Recorder.OggVorbisEncoder=Create();
}));